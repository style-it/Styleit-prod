{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/StyleIt/components/custom/textSelected.js","webpack:///./src/StyleIt/constants/block_elms.js","webpack:///./src/StyleIt/services/className.service.js","webpack:///./src/StyleIt/utilis/DomUtilis.js","webpack:///./src/StyleIt/services/attr.service.js","webpack:///./src/StyleIt/utilis/splitHTML.js","webpack:///./src/StyleIt/utilis/merger.js","webpack:///./src/StyleIt/services/textEditor.service.js","webpack:///./src/StyleIt/services/style.service.js","webpack:///./src/StyleIt/rules/rules.js","webpack:///./src/StyleIt/constants/void_elms.js","webpack:///./src/StyleIt/services/elements.service.js","webpack:///./src/StyleIt/services/range.service.js","webpack:///./src/StyleIt/services/copyPaste/copyPaste.service.js","webpack:///./src/StyleIt/services/events/events.js","webpack:///./src/StyleIt/services/link.service.js","webpack:///./src/StyleIt/services/Inspector/Inspector.service.js","webpack:///./src/StyleIt/services/keyPress/KeyPress.js","webpack:///./src/StyleIt/connector.js","webpack:///./src/StyleIt/index.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","default","TextSelection","getAttribute","innerHTML","HTMLElement","customElements","block_elments","getInheirtClassNames","fromElement","toElement","classes","_parent","ischildOf","parentElement","map","classList","Array","from","forEach","findIndex","push","getClasses","element","normalizeClassName","removeEmptyClass","className","removeAttribute","querySelectorAll","concat","child","node","remove","clear","Element","removeClassName","obj","e","nodeType","style","ownerDocument","el","wrapper","elements","parents","isArray","parentNode","filter","_","length","insertBefore","_el","appendChild","Document","getSelectedElement","document","getSelection","anchorNode","wrap","createElement","createSelection","body","createTextRange","range","moveToElementText","select","window","selection","createRange","selectNodeContents","removeAllRanges","addRange","parent","_wrap","getInheirtAttributes","attributes","currectElement","attrs","getAttributes","getAll","splitHTML","options","tag","DomUtilis","isElement","setAttrs","styles","getInheirtCss","template","join","attr","setAttribute","centerElement","centerTemplate","sel","getRangeAt","setStart","leftElement","leftTemplate","leftRange","extractContents","setEnd","childNodes","rightElement","rightTemplate","rightRange","split","left","center","right","unwrap","Text","insertAfter","newNode","nextSibling","replaceNode","replacementNode","extraContents","mergeNodeContect","nodeName","Node","ELEMENT_NODE","firstChild","firstElementChild","textContent","_elementProps","getStyle","styleValue","trim","normalizeStyle","attrValue","add","normalizeElement","mergeTwoNodes","elementOne","elementTwo","_elementsData","commoncLasses","classes1","classes2","c1","c2","includes","commonStyles","style1","style2","commmonStyles","style1Values","style2Values","clearElementClasses","clearElementStyles","children","recurse","_normalize","mergeNodesStyles","merged","nextElement","mergeNodesContent","mergedContent","normalize","getCleanText","text","replace","intailStyle","toggleStyle","isOn","setStyle","data","textDecoration","closest","splits","rule","collectStyleFromSelectedElement","connectecElement","collectStyles","keyValue","void_elements","wrapNakedTextNodes","target","removeChild","ancNode","focusNode","JsonToElement","jsonObject","createHtmlElement","jsElement","isShouldRenderAttrs","createTextNode","href","collectedStyle","JsonObjectToStyleString","renderAttrs","type","Levels","jsChild","htmlElement","elementToJson","level","json","isValid","keys","cn","v","createInnerWrapperElement","innerSpan","GetClosestBlockElement","getComputedStyle","display","wrapRangeWithElement","wrapTag","ranges","rangeCount","getRanges","wrapperEl","wrapNode","isCollapsed","startNode","startContainer","endNode","endContainer","startOffset","endOffset","currentRange","currentWrapper","cloneNode","surroundContents","createWrapperFunction","getRangeTextNodes","wrapRangeText","flat","getTextNodes","walker","createTreeWalker","NodeFilter","SHOW_TEXT","textNodes","nextNode","setCaretAt","charIndex","focus","textNode","TEXT_NODE","collapse","pasteHtmlAtCaret","html","contenteditable","contentEditable","deleteContents","lastNode","frag","createDocumentFragment","insertNode","cloneRange","setStartAfter","rangeIntersectsNode","intersectsNode","rangeA","rangeB","selectNode","createRangeFromNode","compareBoundaryPoints","Range","END_TO_START","START_TO_END","container","commonAncestorContainer","isNonEmptyTextNode","referenceNode","setSelectionBetweenTwoNodes","firstFlag","lastFlag","_options","assign","setBaseAndExtent","setSelectionFlags","firstElement","LastElement","prepend","CopyPaste","stylesToPaste","paste","copy","start","event","copiedNode","cloneContents","collectedCSS","span","jsonStyle","setStyles","len","htmlText","preventDefault","clipboardData","setData","shiftKey","pastePlainText","pasteWithStyles","copied","getData","pastedContainer","sameNode","block","parts","addEventListener","removeEventListener","EVENTS","TARGETS","_blank","_self","_top","resetURL","src","createTempLinkElement","Atag","Inpsector","onInspect","launchInspect","selectedElement","aTag","protocol","onKeyDown","keyCode","onClick","Destroy","KeyPress","onKeyPress","keypress","blockElement","anchorOffset","docFragment","previousSibling","br","Connector","getElementById","renderedElement","Promise","resolve","then","RenderInnerHTML","plugins","copyPaste","inspector","keyPress","usePlugins","Core","config","__config","undefined","on","callback","modeHandlers","Modes","Toggle","onToggle","Extend","onExtend","events","styleChanged","connectedElement","Connect","toString","elementToUnwrap","baseNode","linkElements","closestATag","a","setProtocol","_protocol","newURL","_href","_target","testTarget","toLowerCase","renderedLink","link","isON","closestClass","isVAlidKeyValue","ELEMENTS","caretHolder","createCaretPlacement","unWrap","selector","txtNode","closestElementToUnWrap","ToggleMode","onOff","result","collectedStyles","dispatchEvent","atNode","payload","elementToSplit","splitElements","createBlockStyle","splitBlocks","as","createInlineStyle","wrapTextNodeWithAppendStyle","createBlockElAndStyleIt","pargh","StyleIt","styleIt","execCmd","toggleClass","unLink","save","load","destroy","MODES"],"mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,UAAW,GAAIH,GACI,iBAAZC,QACdA,QAAiB,QAAID,IAErBD,EAAc,QAAIC,IARpB,CASoB,oBAATK,KAAuBA,KAAOC,MAAO,WAChD,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUR,QAGnC,IAAIC,EAASK,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHV,QAAS,IAUV,OANAW,EAAQH,GAAUI,KAAKX,EAAOD,QAASC,EAAQA,EAAOD,QAASO,GAG/DN,EAAOS,GAAI,EAGJT,EAAOD,QA0Df,OArDAO,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASf,EAASgB,EAAMC,GAC3CV,EAAoBW,EAAElB,EAASgB,IAClCG,OAAOC,eAAepB,EAASgB,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAASvB,GACX,oBAAXwB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAepB,EAASwB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAepB,EAAS,aAAc,CAAE0B,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAASjC,GAChC,IAAIgB,EAAShB,GAAUA,EAAO4B,WAC7B,WAAwB,OAAO5B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAM,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,6JClFrDvC,EAAOD,QAAUyC,EAAQ,GAASC,S,mwDCC5BC,E,YACF,aAAc,O,4FAAA,iC,2SAKW,SADCtC,KAAKuC,aAAa,gBAExCvC,KAAKwC,UAAY,gB,gCAPGC,cAYtBC,eAAezB,IAAI,mBACrByB,eAAe7C,OAAO,iBAAkByC,I,oCCdrC,IAAMK,EAAgB,CACzB,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,GAAK,KACL,EAAI,IACJ,GAAK,KACL,GAAK,MCRF,SAASC,EAAqBC,EAAaC,GAG9C,IAFA,IAAIC,EAAU,GACVC,EAAUH,EACPG,GAAWA,EAAQC,UAAUH,EAAUI,gBAAgB,CAC1D,IAAIC,EAAMH,EAAQI,UAClBC,MAAMC,KAAKH,GAAKI,SAAQ,SAAA5C,GAChBoC,EAAQS,WAAU,SAAA/C,GAAC,OAAIA,IAAME,KAAQ,GACrCoC,EAAQU,KAAK9C,MAGrBqC,EAAUA,EAAQE,cAEtB,OAAOH,EAEJ,SAASW,EAAWC,GACvB,OAAON,MAAMC,KAAKK,EAAQP,WAKvB,SAASQ,EAAmBD,GAC/B,SAASE,EAAiBF,GACjBA,EAAQG,WACTH,EAAQI,gBAAgB,SAafV,MAAMC,KAAKK,EAAQK,iBAAiB,gBAAgBC,OAAON,GACnEJ,SAAQ,SAAAW,GAAK,OAXtB,SAAeP,GACXE,EAAiBF,GACjBN,MAAMC,KAAKK,EAAQP,WAAWG,SAAQ,SAAA9C,GAClC4C,MAAMC,KAAKK,EAAQK,iBAAR,kBAAoCvD,EAApC,QAA4C8C,SAAQ,SAAAY,GAC3DA,EAAKf,UAAUgB,OAAO3D,GACtBoD,EAAiBM,SAMHE,CAAMH,MAIpCI,QAAQtC,UAAUuC,gBAAkB,SAAST,GAC/BT,MAAMC,KAAKtD,KAAKgE,iBAAL,kBAAiCF,EAAjC,QAAiDG,OAAOjE,MAC3EuD,SAAQ,SAAAY,GAAI,OAAEA,EAAKf,UAAUgB,OAAON,O,4ZCT3B,M,uLAhCHU,GACR,IACE,OAAOA,aAAe/B,YAExB,MAAOgC,GACL,MAAuB,WAAf,EAAOD,IACK,IAAjBA,EAAIE,UAAyC,WAArB,EAAOF,EAAIG,QACN,WAA7B,EAAOH,EAAII,kB,2BAIbC,EAAIC,GAEP,IAAIC,EAAW,GAOTC,GALJD,EADE1B,MAAM4B,QAAQJ,GACLA,EAEA,CAACA,IAGW1B,KAAI,SAAAsB,GAAC,OAAIA,EAAES,cAEpC,GAA2B,IADTF,EAAQG,QAAO,SAACjD,EAAGkD,EAAGrF,GAAW,OAAOA,EAAK,KAAOmC,KACtDmD,OAOhB,OAHAL,EAAQ,GAAGM,aAAaR,EAASC,EAAS,IAC1CA,EAASxB,SAAQ,SAAAgC,GAAG,OAAIT,EAAQU,YAAYD,OAE5C,O,iCAKJE,SAASzD,UAAU0D,mBAAmB,WAAW,IAAIjB,EAAEkB,SAASC,eAAe,GAAG,OAAOnB,EAAE,CAAC,IAAInD,EAAEmD,EAAEoB,WAAW,GAAG,OAAOvE,EAAE,CAAC,KAAK,IAAIA,EAAEoD,UAAUpD,EAAEA,EAAE4D,WAAW,OAAO5D,EAAE,OAAO,OAChLgD,QAAQtC,UAAU8D,KAAO,SAAEhB,GAIzB,MAHuB,iBAAZA,IAAsBA,EAAUa,SAASI,cAAcjB,IAClE,EAAKI,WAAWI,aAAaR,EAAS,GACtCA,EAAQU,YAAY,GACbV,GAETR,QAAQtC,UAAUgE,gBAAkB,WAClC,GAAIL,SAASM,KAAKC,gBAAiB,CACjC,IAAMC,EAAQR,SAASM,KAAKC,kBAC5BC,EAAMC,kBAAkBpG,MACxBmG,EAAME,cACD,GAAIC,OAAOV,aAAc,CAC9B,IAAMW,EAAYD,OAAOV,eACnBO,EAAQR,SAASa,cACvBL,EAAMM,mBAAmBzG,MACzBuG,EAAUG,kBACVH,EAAUI,SAASR,KAGvB7B,QAAQtC,UAAUiB,UAAY,SAAS2D,GACrC,IAAKA,EAAQ,OAAO,EAEpB,IADA,IAAIzC,EAAOnE,KAAKkF,WACD,MAARf,GAAc,CACnB,GAAIA,IAASyC,EACX,SAEFzC,EAAOA,EAAKe,WAEd,UAEF,IAAM2B,EAAQ,SAAS/B,GACrB,QAAK9E,KAAKkF,aACVlF,KAAKkF,WAAWI,aAAaR,EAAS9E,MACtC8E,EAAQU,YAAYxF,MACb8E,ICrEF,SAASgC,EAAqBjE,EAAaC,GAG9C,IAFA,IAAIiE,EAAa,GACbC,EAAiBnE,EACdmE,GAAkBA,EAAe/D,UAAUH,EAAUI,gBAAgB,CAExE,IADA,IAAI+D,EAAQD,EAAeD,WACnB3G,EAAI6G,EAAM5B,OAAS,EAAGjF,GAAK,EAAGA,IACb,UAAlB6G,EAAM7G,GAAGO,MAAuC,UAAnBsG,EAAM7G,GAAGO,OACjCoG,EAAWE,EAAM7G,GAAGO,QACpBoG,EAAWE,EAAM7G,GAAGO,MAASsG,EAAM7G,GAAGiB,QAIpD2F,EAAiBA,EAAe9D,cAElC,OAAO6D,EAEF,SAASG,EAAcvD,EAAQwD,GAGpC,IAFA,IAAIJ,EAAa,GACbE,EAAQtD,EAAQoD,WACZ3G,EAAI6G,EAAM5B,OAAS,EAAGjF,GAAK,EAAGA,KAC/B+G,IAAaA,GAA4B,UAAlBF,EAAM7G,GAAGO,MAAuC,UAAnBsG,EAAM7G,GAAGO,QACxDoG,EAAWE,EAAM7G,GAAGO,QACpBoG,EAAWE,EAAM7G,GAAGO,MAASsG,EAAM7G,GAAGiB,QAIhD,OAAO0F,ECvBN,SAASK,EAAUvE,EAAaC,GAAwB,IAAduE,EAAc,uDAAJ,GAAI,EACpCA,EAAhBC,WADoD,MAC9C,OAD8C,EAE3D,IAAKzE,EAAYI,UAAUH,GAEvB,OAAO,KAEX,IAAKyE,EAAUC,UAAU3E,KAAiB0E,EAAUC,UAAU1E,GAE1D,OAAO,KAEX,IAAM2E,EAAW,SAAC5E,EAAaC,GAC3B,IAAM4E,EAASC,EAAc9E,EAAaC,GACpCmE,EAAQH,EAAqBjE,EAAaC,GAC1CgB,EAAYlB,EAAqBC,EAAaC,GAC9C8E,EAAWjC,SAASI,cAAcuB,GAExC,IAAK,IAAM3C,KADXiD,EAAS9D,UAAYA,EAAU+D,KAAK,KAChBH,EAAQ,CACxB,IAAMrG,EAAQqG,EAAO/C,GACrBiD,EAASjD,MAAMA,GAAStD,EAE5B,IAAK,IAAMyG,KAAQb,EAAO,CACtB,IAAM5F,EAAQ4F,EAAMa,GACpBF,EAASG,aAAaD,EAAMzG,GAEhC,OAAOuG,GAEX/E,EAAYmD,kBACZ,IAAMgC,EAAgBrC,SAASD,qBACzBuC,EAAiBR,EAASO,EAAelF,GAE/CmF,EAAezC,YAAY3C,GAC3B,IAAIqF,EAAM5B,OAAOV,eACbO,EAAQ+B,EAAIC,WAAW,GAE3BhC,EAAMiC,SAAStF,EAAW,GAC1B,IAAMuF,EAAc1C,SAASD,qBACvB4C,EAAeb,EAASY,EAAavF,GACvCyF,EAAYpC,EAAMqC,kBACtBF,EAAa9C,YAAY+C,GAEzBpC,EAAMsC,OAAO3F,EAAWA,EAAU4F,WAAWrD,QAC7C,IAAMsD,EAAehD,SAASD,qBACxBkD,EAAgBnB,EAASkB,EAAc7F,GACzC+F,EAAa1C,EAAMqC,kBACvBI,EAAcpD,YAAYqD,GAC1B,IAAMC,EAAQ,CACVC,KAAMT,EACNU,OAAQf,EACRgB,MAAOL,GAGX,IAAK,IAAM/D,KADX/B,EAAUN,UAAY,GACLsG,EAAO,CACpB,IAAMnF,EAAUmF,EAAMjE,GACtB/B,EAAU0C,YAAY7B,GAG1B,OADAb,EAAUoG,SACHJ,EFYXK,KAAKnH,UAAU8D,KAAOe,EACtBvC,QAAQtC,UAAU8D,KAAOe,EACzBvC,QAAQtC,UAAUoH,YAAc,SAAUC,GACxCrJ,KAAKkF,WAAWI,aAAa+D,EAASrJ,KAAKsJ,cAE7ChF,QAAQtC,UAAUuH,YAAc,SAASC,GACvC,GAAIxJ,KAAKkF,WAGP,OAFAlF,KAAKkF,WAAWI,aAAakE,EAAiBxJ,MAC9CA,KAAKoE,SACEoF,GAGXlF,QAAQtC,UAAUkH,OAAS,WACzB,IAAI/C,EAAQR,SAASa,cACrBL,EAAMM,mBAAmBzG,MACzB,IAAIyJ,EAAgBtD,EAAMqC,kBAE1B,OADAxI,KAAKuJ,YAAYE,GACVA,G,0VG9EF,IAAMC,EAAmB,SAAAvF,GAAQ,MAEpC,IAAKoD,EAAUC,UAAUrD,GAErB,OAAO,KAEX,GAAsB,SAAlBA,EAAKwF,UAAuBxF,EAAKO,WAAakF,KAAKC,aAEnD,OAAO,KAGX,IAAMC,EAAa3F,EAAK4F,kBACxB,IAAKD,EAED,OAAO,KAEX,GAA4B,SAAxBA,EAAWH,UAAuBG,EAAWpF,WAAakF,KAAKC,aAE/D,OAAO,KAEX,GAAI1F,EAAK6F,cAAgBF,EAAWE,YAEhC,OAAO,KAEX,IAAMC,EAAgB,CAClBtF,MAAOuF,EAAS/F,GAChBpB,QAASW,EAAWS,GACpB8C,MAAOC,EAAc/C,IAEzB,IAAK,IAAMQ,KAASsF,EAActF,MAAO,CACrC,IAAMwF,EAAaF,EAActF,MAAMA,GACvCmF,EAAWnF,MAAMA,IAAUmF,EAAWnF,MAAMA,GAAS,IAAMwF,GAAYC,OAI3E,IAAK,IAAMtC,KAFXuC,EAAeP,GAEIG,EAAchD,MAAO,CACpC,IAAMqD,EAAYL,EAAchD,MAAMa,GACtCgC,EAAW/B,aAAaD,EAAMwC,GAOlC,OALA,EAAAR,EAAW1G,WAAUmH,IAArB,UAA4BN,EAAclH,UAC1Ca,EAAmBkG,GACnBU,EAAiBV,GACdA,EAAW5G,eACd4G,EAAW5G,cAAcgG,SAClBY,GAEJ,SAASW,EAAcC,EAAYC,GACtC,IAAKpD,EAAUC,UAAUkD,KAAgBnD,EAAUC,UAAUmD,GAEzD,OAAO,KAEX,GAA4B,SAAxBD,EAAWf,UAA+C,SAAxBgB,EAAWhB,SAE7C,OAAO,KAEX,IAAMiB,EAAgB,CAAC,CACnBjG,MAAOuF,EAASQ,GAChB3H,QAASW,EAAWgH,GACpBzD,MAAOC,EAAcwD,IAEzB,CACI/F,MAAOuF,EAASS,GAChB5H,QAASW,EAAWiH,GACpB1D,MAAOC,EAAcyD,KAuBnBE,EArBmB,SAACC,EAAUC,GAChC,IAAKD,IAAaC,EACd,MAAO,GACX,IAAMC,EAAK,EAAIF,GACTG,EAAK,EAAIF,GACf,OAAOC,EAAG7F,QAAO,SAAA1E,GAAC,OAAIwK,EAAGC,SAASzK,MALb,CAqBcmK,EAAc,GAAG7H,QAAS6H,EAAc,GAAG7H,SAC5EoI,EAfkB,SAACC,EAAQC,GAC7B,IAAMC,EAAgB,GACtB,IAAK,IAAMnJ,KAAKiJ,EACZ,GAAKC,EAAOlJ,GAAZ,CAGA,IAAMoJ,EAAeH,EAAOjJ,GACtBqJ,EAAeH,EAAOlJ,GACxBqJ,IAAiBD,IACjBD,EAAcnJ,GAAKqJ,GAG3B,OAAOF,EAZa,CAeaV,EAAc,GAAGjG,MAAOiG,EAAc,GAAGjG,OAkBxEG,EAjBuB,SAACqG,EAAcN,GACxC,IAO8B,EAPxB/F,EAAUa,SAASI,cAAc,QAEvC,IAAK,IAAM5D,KAAKgJ,EACZrG,EAAQH,MAAMxC,GAAKgJ,EAAahJ,GAIhC0I,EAAcxF,OAAS,IACvB,EAAAP,EAAQ1B,WAAUmH,IAAlB,UAAyBM,IAE7B,OAAkC,IAA9B/F,EAAQiC,WAAW1B,QACnBP,EAAQoE,SACD,MAEJpE,EAfkB,CAiBQqG,EAAcN,GACnD,IAAK/F,EAED,OAAO,KAGX,IAQMC,EAAW,CAAC2F,EAAYC,GAU9B,OATA5F,EAASxB,SAAQ,SAAAkB,IATW,SAACN,EAAM0G,GAAkB,OACjD,EAAA1G,EAAKf,WAAUgB,OAAf,UAAyByG,IACzBjH,EAAmBO,GAQnBsH,CAAoBhH,EAAGoG,GANA,SAAC1G,EAAMgH,GAC9B,IAAK,IAAMhJ,KAAKgJ,EACZhH,EAAKQ,MAAMxC,GAAK,KAKpBuJ,CAAmBjH,EAAG0G,MAG1B5D,EAAUzB,KAAKf,EAAUD,GACzB,EAAIA,EAAQ6G,UAAUpI,SAAQ,SAAA9C,GAC1B+J,EAAiB/J,MAEdqE,ECvIJ,SAAS0F,EAAiB3F,GAC7B,IAAM+G,EAAU,SAACjI,GACbN,MAAMC,KAAKK,EAAQgI,UAAUpI,SAAQ,SAACW,GAClC0H,EAAQ1H,GACR2H,EAAW3H,MAEf,IAAM4H,EAAmB,SAAAnI,GACrB,IAAIoI,GAAS,EAYb,OAXA1I,MAAMC,KAAKK,EAAQgI,UAAUpI,SAAQ,SAACI,GAElC,IADA,IAAImB,EAAUnB,EACK,OAAZmB,GAAkB,CACrB,IAAMkH,EAAclH,EAAQwE,YAC5B,IAAK0C,EACD,MAEJlH,EAAU2F,EAAc3F,EAASkH,GACjCD,EAASA,GAAsB,OAAZjH,MAGpBiH,GAGLE,EAAoB,SAAAtI,GACtB,IAAIoI,GAAS,EAQb,OAPA1I,MAAMC,KAAKK,EAAQgI,UAAUpI,SAAQ,SAACW,GAElC,IADA,IAAIY,EAAUZ,EACPY,GAAgC,IAArBA,EAAQJ,UACtBI,EAAU4E,EAAiB5E,GAC3BiH,EAASA,GAAsB,OAAZjH,KAGpBiH,GAGPG,GAAgB,EACpB,IACIvI,EAAUkI,EAAWlI,MAEFmI,EAAiBnI,GAChCuI,EAAgBD,EAAkBtI,UAGjCuI,GAAiBvI,IAK9B,SAASkI,EAAWlI,GAQhB,OAPAA,EAAQwI,YACRvI,EAAmBD,GACnB0G,EAAe1G,IAKXA,GAAgC,SAArBA,EAAQgG,UAAyBhG,EAAQqG,YAAYI,QAAwC,IAA9BzG,EAAQoD,WAAW1B,OAG1F1B,EAFI,KAZfkB,EAAGsH,YACHP,EAAQ/G,GA+BL,SAASuH,EAAaC,GACzB,OAAOA,EAAKC,QAAQ,MAAO,IAAIA,QAAQ,yBAA0B,IChF9D,SAAS3E,EAAc9E,EAAaC,GAIvC,IAHA,IAAIyJ,EAAc,GACdvF,EAAiBnE,EAEdmE,GAAkBA,EAAe/D,UAAUH,EAAUI,gBAAgB,CACxE,IAAIC,EAAM+G,EAASlD,GACnB,IAAK,IAAMrC,KAASxB,EAChB,GAAIA,EAAIlB,eAAe0C,GAAQ,CAC3B,IAAMtD,EAAQ8B,EAAIwB,GAEb4H,EAAY5H,KACb4H,EAAY5H,GAAStD,GAGjC2F,EAAiBA,EAAe9D,cAEpC,OAAOqJ,EASJ,SAASC,EAAY7I,EAAShC,EAAKN,EAAOoL,GAEzC9I,EAAQgB,MAAMhD,GADd8K,EACqB9I,EAAQgB,MAAMhD,GAAO,IAAMN,EAE3BsC,EAAQgB,MAAMhD,GAAK2K,QAAQjL,EAAO,IAE3DgJ,EAAe1G,GACfC,EAAmBD,GACnBN,MAAMC,KAAKK,EAAQK,iBAAR,mBAAqC3C,EAArC,QAAiDkC,SAAQ,SAAAW,GAChEA,EAAMS,MAAMhD,GAAOuC,EAAMS,MAAMhD,GAAK2K,QAAQjL,EAAO,IACnDgJ,EAAenG,GACfN,EAAmBM,MAepB,SAASwI,EAAS/I,EAAShC,EAAKN,GClDhC,IAAkBsL,EDmDrBhJ,EAAQgB,MAAMhD,GAAON,EACV,UAARM,ICpDkBgL,EDqDR,CAAChJ,QAAQA,EAAQhC,IAAI,QAAQN,MAAMA,GClClC,CAlBkB,SAACsL,GAC7B,GAAiB,UAAbA,EAAKhL,IAAiB,CACtB,IAAMiL,EAAiBD,EAAKhJ,QAAQkJ,QAAb,8BACvB,GAAID,EAAgB,CAChB,IAAME,EAAS1F,EAAUuF,EAAKhJ,QAASiJ,GACvC,GAAIE,EAGA,IAAK,IAAMnL,KAFX0I,IACAqC,EAASI,EAAO9D,OAAQ,wBAAhB,UAA4C2D,EAAKtL,QACvCyL,EAEdtC,EADgBsC,EAAOnL,SAI3B+K,EAASE,EAAgB,wBAAjB,UAA6CD,EAAKtL,YAQpEkC,SAAQ,SAAAwJ,GAAI,OAAIA,EAAKJ,ODiC3BtJ,MAAMC,KAAKK,EAAQK,iBAAR,mBAAqCrC,EAArC,QAA+C4B,SAAQ,SAAAsB,GAC9DA,EAAGF,MAAMhD,GAAO,KAChB0I,EAAexF,MAMhB,IAAMmI,EAAkC,SAACC,GAE5C,OAAOtF,EADiBjC,IACauH,IAGlC,SAAS5C,EAAe1G,GAC3B,IAAIA,EAAS,OAAO,KAGpB,GADcA,EAAQpB,aAAa,SAG5B,CACH,IAAM2K,EAAgBhD,EAASvG,GAD5B,WAEQhC,GACHuL,EAAcjL,eAAeN,IAC7B0B,MAAMC,KAAKK,EAAQK,iBAAR,mBAAqCkJ,EAAcvL,GAAnD,QAA8D4B,SAAQ,SAAAsB,GAC7EA,EAAGF,MAAMhD,GAAO,KAChB0I,EAAexF,OAJ3B,IAAK,IAAMlD,KAAOuL,EAAe,EAAtBvL,QAHXgC,EAAQI,gBAAgB,SAuBzB,SAASmG,EAASrF,GACrB,IAAKA,IAAOA,EAAGF,MAAO,MAAO,GAC7B,IAAI+C,EAAS,GACT/C,EAAQE,EAAGtC,aAAa,SAC5B,GAAIoC,EAAO,CACP,IAAIuI,EAAgBvI,EAAMmE,MAAM,KAC5BzF,MAAM4B,QAAQiI,IACdA,EAAc3J,SAAQ,SAAAoB,GAElB,IAAMwI,EAAWxI,EAAMmE,MAAM,KACzBqE,EAAS,IAAMA,EAAS,KACxBzF,EAAOyF,EAAS,GAAG/C,QAAU+C,EAAS,GAAG/C,WAKzD,OAAO1C,E,WErHE0F,EAAgB,CACzB,GAAK,KACL,GAAK,KACL,IAAM,MACN,MAAQ,QACR,MAAQ,QACR,MAAQ,QACR,QAAU,W,qVCHP,SAASC,EAAmBC,GAG/BjK,MAAMC,KAAKgK,EAAO5E,YAAYnF,SAAQ,SAAA9C,GAQlC,GANiB,IAAdA,EAAEiE,UAAkBjE,EAAEuJ,YAAYI,QAA8B,IAApB3J,EAAEkL,SAAStG,QAAe+H,EAAc3M,EAAEkJ,WACrFlJ,EAAEyE,WAAWqI,YAAY9M,GAEX,IAAfA,EAAEiE,UAAkBjE,EAAEyC,eACrBzC,EAAEyC,cAAciJ,YAED,IAAd1L,EAAEiE,UAAiBjE,EAAEyC,gBAAkBoK,IAAa7M,EAAEyC,cAAc2J,QAAQ,MAAQpM,EAAEuJ,YAAYI,OAAO,CAC1G,IAAMlI,EAAIyD,SAASI,cAAc,KACjCtF,EAAEqF,KAAK5D,OAyBZ,SAASwD,IACZ,IAAIvB,EAAOwB,SAASC,eACpB,GAAIzB,EAAM,CACN,IAAIqJ,EAAUrJ,EAAKsJ,UACnB,GAAgB,OAAZD,EAAkB,CAClB,KAA4B,IAArBA,EAAQ9I,UACX8I,EAAUA,EAAQtI,WAGtB,OAAOsI,EAEX,OAAO,MAGR,SAASE,EAAcC,EAAYzK,GAEtC,IAUM0K,EAAoB,SAACC,GACvB,IACIlK,EACAmK,EAFEpJ,EAAWmJ,EAAUvG,IAG3B,OAAQ5C,GACJ,IAAK,QACDf,EAAUgC,SAASoI,eAAeF,EAAU7D,aAC5C,MACJ,IAAK,KACDrG,EAAUgC,SAASI,cAAcrB,IACzBsJ,KAAOH,EAAUG,KACzBrK,EAAQ2J,OAASO,EAAUP,OAC3B,MACJ,QACI3J,EAAUgC,SAASI,cAAcrB,GACjCoJ,GAAsB,EAM9B,OAHIA,GAAuBnK,GA5BX,SAACkK,EAAWlK,GAI5B,GAHIkK,EAAUzK,YACVO,EAAQP,UAAR,EAAwByK,EAAUzK,YAElCyK,EAAUlJ,MAAO,CACjB,IAAMsJ,EH4BX,SAAiCvG,GACpC,IAAIwF,EAAgB,GACpB,IAAK,IAAMvL,KAAO+F,EACd,GAAIA,EAAOzF,eAAeN,GAAM,CAC5B,IAAMgD,EAAQ+C,EAAO/F,GACrBuL,EAAczJ,KAAd,UAAsB9B,EAAtB,YAA6BgD,IAGrC,OAAOuI,EAAcrF,KAAK,KGpCKqG,CAAwBL,EAAUlJ,OACzDhB,EAAQgB,MAAQsJ,GAuBhBE,CAAYN,EAAWlK,GAEpBA,GAgBX,OAdKT,GAAiByK,EAAWS,OAASC,EAAO,KAC7CnL,EAAgB0K,EAAkBD,IAElCtK,MAAM4B,QAAQ0I,EAAWhC,WACzBgC,EAAWhC,SAASpI,SAAQ,SAAA+K,GACxB,IAAMC,EAAcX,EAAkBU,GAClCC,IACArL,EAAcsC,YAAY+I,GAC1Bb,EAAcY,EAASC,OAM5BrL,EAEJ,SAASsL,EAAcrK,EAAMsK,GAET,iBAAXA,IAAqBA,EAAQ,GACzC,IAAM/J,EAAWP,EAAKwF,SAClBmE,GAAsB,EACtBY,EAAO,GACPC,GAAU,EAOd,OALIN,EAAOI,KACPC,EAAKN,KAAOC,EAAOI,GACnBA,KAGI/J,GACJ,IAAK,QACDgK,EAAKpH,IAAM5C,EACXgK,EAAK1E,YAAc7F,EAAK6F,YAAYsC,QAAQ,UAAW,IACvDwB,GAAsB,EAEjBY,EAAK1E,YAAYI,SAAQuE,GAAU,GACxC,MACJ,IAAK,IACDD,EAAKpH,IAAM5C,EACXgK,EAAKV,KAAO7J,EAAK6J,KACjBU,EAAKpB,OAASnJ,EAAKmJ,OACnB,MACJ,QACIoB,EAAKpH,IAAM5C,EAInB,IAAKiK,EAAS,OAAO,KACrB,GAAIb,EAAqB,CAErB,IAAMnJ,EAAQuF,EAAS/F,GACnBrD,OAAO8N,KAAKjK,GAAOU,OAAS,IAC5BqJ,EAAK/J,MAAQA,GAEbR,EAAKf,WAAae,EAAKf,UAAUiC,OAAS,IAC1CqJ,EAAKtL,UAAL,EAAqBe,EAAKf,YAE1Be,EAAKuE,YAAcvE,EAAKuE,WAAWrD,OAAS,IAC5CqJ,EAAK/C,SAAW,EAAIxH,EAAKuE,YAAYvF,KAAI,SAAC0L,GAAD,OAAQL,EAAcK,EAAIJ,MAAQtJ,QAAO,SAAA2J,GAAC,OAAIA,MAG/F,OAAOJ,E,qOCrJJ,SAASK,EAA0BpL,EAAS0D,GACxB,WAArB,EAAQA,KAAuBA,EAAU,IAC7C,IAAI2H,EAAYrJ,SAASI,cAAcsB,EAAQxC,IAAM,QAGrD,OAFAxB,MAAMC,KAAKK,EAAQ+E,YAAYnF,SAAQ,SAAAW,GAAK,OAAI8K,EAAUxJ,YAAYtB,MACtEP,EAAQ6B,YAAYwJ,GACbA,EAEF,SAASC,EAAuBtL,GACrC,IAAKA,EACH,OAAO,KAKT,GAHyB,IAArBA,EAAQe,WACVf,EAAUA,EAAQT,eAEhBP,EAAcgB,EAAQgG,UAAW,OAAOhG,EAE5C,IADA,IAAIT,EAAgBS,EACbT,GAAoE,WAAnDoD,OAAO4I,iBAAiBhM,GAAeiM,SACzDjM,EAAcA,eAChBA,EAAgBA,EAAcA,cAKlC,SAAGA,IAAkBP,EAAcO,EAAcyG,YACxCzG,EAwCJ,SAASkM,EAAqBC,GAEnC,OAIK,WAKL,IAJA,IAAIC,EAAS,GAEPpH,EAAM5B,OAAOV,eAEVxF,EAAI,EAAGA,EAAI8H,EAAIqH,WAAYnP,IAClCkP,EAAOlP,GAAK8H,EAAIC,WAAW/H,GAE7B,OAAOkP,EAbQE,GACDrM,KAAI,SAAAjC,GAChB,OA0PG,SAAuBuO,EAAWtJ,GACvC,IAAWuJ,OAEU,IAAVvJ,IAETA,EAAQG,OAAOV,eAAeuC,WAAW,IAG3C,GAAIhC,EAAMwJ,YAER,MAAO,QAGgB,IAAdF,IACTA,EAAY,QAGW,iBAAdA,IAETA,EAAY9J,SAASI,cAAc0J,IAQrC,OALAC,EAnFK,SAA+BD,EAAWtJ,GAC/C,IAAIyJ,EAAYzJ,EAAM0J,eACpBC,EAAU3J,EAAM4J,aAChBC,EAAc7J,EAAM6J,YACpBC,EAAY9J,EAAM8J,UAEpB,OAAO,SAAkB9L,GACvB,IAAI+L,EAAevK,SAASa,cAC1B2J,EAAiBV,EAAUW,YAc7B,OAZAF,EAAazJ,mBAAmBtC,GAC5BA,IAASyL,GAAoC,IAAvBA,EAAUlL,WAClCwL,EAAa9H,SAASjE,EAAM6L,GAC5BJ,EAAYO,EACZH,EAAc,GAEZ7L,IAAS2L,GAAgC,IAArBA,EAAQpL,WAC9BwL,EAAazH,OAAOtE,EAAM8L,GAC1BH,EAAUK,EACVF,EAAY,GAEdC,EAAaG,iBAAiBF,GACvBA,GA6DEG,CAAsBb,EAAWtJ,GAEpCoK,EAAkBpK,GAEZhD,IAAIuM,GApRTc,CAAcnB,EAASnO,MAC7BuP,OAaE,SAASC,EAAa7L,GAQ3B,IALA,IACE8L,IAHF9L,EAAKA,GAAMc,SAASM,MAEPrB,eAAiBe,UACfiL,iBAAiB/L,EAAIgM,WAAWC,UAAW,MAA/C,GACTC,EAAY,GACZ5M,EAAOwM,EAAOK,WAET7M,GACL4M,EAAUtN,KAAKU,GACfA,EAAOwM,EAAOK,WAEhB,OAAOD,EAsCF,SAASE,EAAWtN,GAAwB,IAAfuN,EAAe,uDAAH,EAE1C/M,EAAOR,EACXQ,EAAKgN,QACL,IAAIC,EAAW/N,MAAMC,KAAKa,EAAKuE,YAAYvD,QAAO,SAAAjB,GAAK,OAAIA,EAAMQ,WAAakF,KAAKyH,aACnF,GAAwB,IAApBD,EAAS/L,OAAc,CAEzB,IADA+L,EAAWzN,EACJyN,GAAYA,EAAStH,YAAoC,IAAtBsH,EAAS1M,UACjD0M,EAAWA,EAAStH,WAEnBsH,IACDA,EAAW,CAACA,IAIhB,IAAIjL,EAAQR,SAASa,cACrBL,EAAMiC,SAASgJ,EAAS,GAAIF,GAC5B/K,EAAMsC,OAAO2I,EAAS,GAAIF,GAC1B/K,EAAMmL,UAAN,GACA,IAAIpJ,EAAM5B,OAAOV,eACjBsC,EAAIxB,kBACJwB,EAAIvB,SAASR,GAGR,SAASoL,EAAiBC,GAC/B,IAaItJ,EAAK/B,EAZHsL,EADkB/L,IACgBmH,QAAQ,qBAC5C8B,GAAU,EAQd,GAPI8C,GACGA,EAAgBC,kBAIrB/C,GAAU,IAEPA,EACH,OAAO,KAGT,GAAIrI,OAAOV,eAETsC,EAAM5B,OAAOV,gBACLuC,YAAcD,EAAIqH,WAAY,CAOpC,IAAI1K,EACJ,IAPAsB,EAAQ+B,EAAIC,WAAW,IACjBwJ,iBAMgB,iBAAVH,EAAoB,EAC9B3M,EAAKc,SAASI,cAAc,QACzBvD,UAAYgP,EAEf,IADA,IAA8CrN,EAAMyN,EAAhDC,EAAOlM,SAASmM,yBACZ3N,EAAOU,EAAGiF,YAChB8H,EAAWC,EAAKrM,YAAYrB,GAE9BgC,EAAM4L,WAAWF,OAEQ,WAAlB,EAAQL,IACfrL,EAAM4L,WAAWP,GAOfI,KACFzL,EAAQA,EAAM6L,cACRC,cAAcL,GACpBzL,EAAMmL,UAAN,GACApJ,EAAIxB,kBACJwB,EAAIvB,SAASR,KAKd,SAAS+L,EAAoB/L,EAAOhC,GACzC,OAAIgC,EAAMgM,eACDhM,EAAMgM,eAAehO,IAnHAiO,EAqHLjM,EArHakM,EAIjC,SAA6BlO,GAClC,IAAIgC,EAAQhC,EAAKS,cAAc4B,cAC/B,IACEL,EAAMmM,WAAWnO,GACjB,MAAOM,GACP0B,EAAMM,mBAAmBtC,GAE3B,OAAOgC,EA0GyBoM,CAAoBpO,IApHiB,IAA9DiO,EAAOI,sBAAsBC,MAAMC,aAAcL,IACO,IAA7DD,EAAOI,sBAAsBC,MAAME,aAAcN,IAF9C,IAAyBD,EAAQC,EAwHjC,SAAS9B,EAAkBpK,GAChC,IAAIyM,EAAYzM,EAAM0M,wBAGtB,OAFUnC,EAAakC,EAAU1N,YAAc0N,GAElCzN,QAAO,SAAChB,GACnB,OAAO+N,EAAoB/L,EAAOhC,IAG/B,SAA4BA,GACjC,OAAOA,EAAK6F,YAAY3E,OAAS,EAJYyN,CAAmB3O,MAiC3D,SAASiF,EAAYC,EAAS0J,GACnCA,EAAc7N,WAAWI,aAAa+D,EAAS0J,EAAczJ,aA4FxD,SAAS0J,EAA4BC,EAAWC,GAAwB,IAAd7L,EAAc,uDAAJ,GACnE8L,EAAW,CAAE/O,QAAQ,GAC3BtD,OAAOsS,OAAOD,EAAU9L,GACxB1B,SAASC,eAAeyN,iBAAiBJ,EAAW,EAAGC,EAAUA,EAASxK,WAAWrD,QACjF8N,EAAS/O,QACX,CAAC6O,EAAWC,GAAU3P,SAAQ,SAAAkB,GAAC,OAAIA,EAAEyE,YAGlC,SAASoK,EAAkBC,EAAcC,GAC5BlN,OAAOV,eACzB,IAAMqN,EAAYtN,SAASI,cAAc,kBACzCkN,EAAUlL,aAAa,aAAkD,IAApCwL,EAAavJ,YAAY3E,QAC9D,IAAM6N,EAAWvN,SAASI,cAAc,kBAKxC,OAJAmN,EAASnL,aAAa,aAAiD,IAAnCyL,EAAYxJ,YAAY3E,QAE5DkO,EAAaE,QAAQR,GACrBO,EAAYhO,YAAY0N,GACjB,CAAED,YAAWC,Y,0ZCtWDQ,E,WAEnB,WAAYpG,EAAQjG,I,4FAAS,SAC3BrH,KAAKsN,OAASA,EACdtN,KAAK2T,cAAiD,WAAjC,EAAOtM,EAAQsM,eAA6BtM,EAAQsM,cAAgB,KACzF3T,KAAK4T,MAAQ5T,KAAK4T,MAAMhS,KAAK5B,MAC7BA,KAAK6T,KAAO7T,KAAK6T,KAAKjS,KAAK5B,MAC3BA,KAAK8T,Q,oDAGFC,GAAO,WACNvC,EAAO,GACX,KAAWlL,OAAOV,cAAc,CAC9B,IAAIsC,EAAM5B,OAAOV,eACjB,GAAIsC,EAAIqH,WAAY,CAElB,IADA,IAAMqD,EAAYjN,SAASI,cAAc,OADvB,aAGhB,IAAIiO,EAAa9L,EAAIC,WAAW/H,GAAG6T,gBACnCrB,EAAUpN,YAAYwO,GAEtB3Q,MAAMC,KAAKsP,EAAUlK,YAAYnF,SAAQ,SAAA1B,GACvC,GAAmB,IAAfA,EAAE6C,SAAgB,CACpB,IACMwP,EAAevM,EADIO,EAAIC,WAAW/H,GAAGyP,eAAe3K,WACL,EAAKoI,QACpD6G,EAAOxO,SAASI,cAAc,QACpCoO,EAAKnK,YAAcgK,EAAWhK,YLYrC,SAAmBrG,EAASyQ,GAC/B,IAAK,IAAMzS,KAAOyS,EACd,GAAIA,EAAUnS,eAAeN,GAAM,CAC/B,IAAMgD,EAAQyP,EAAUzS,GACxBgC,EAAQgB,MAAMhD,GAAOgD,GKdnB0P,CAAUF,EAAMD,GAChBrS,EAAEiE,KAAKqO,QAEE/G,EAAcvL,EAAE8H,WAA4B,OAAf9H,EAAE8H,UACxC9H,EAAEqB,cAAcqK,YAAY1L,OAfzBzB,EAAI,EAAGkU,EAAMpM,EAAIqH,WAAYnP,EAAIkU,IAAOlU,EAAG,IAoBpDoR,EAAOoB,QAEA,EAAOjN,SAASY,YACO,SAA5BZ,SAASY,UAAU6H,OACrBoD,EAAO7L,SAASY,UAAUC,cAAc+N,UAG5CR,EAAMS,iBACNT,EAAMU,cAAcC,QAAQ,eAAgBlD,EAAKhP,WACjDuR,EAAMU,cAAcC,QAAQ,aAAclD,EAAKxH,e,4BAE3C+J,GACcA,EAAMY,SAEtB3U,KAAK4U,eAAeb,GAEpB/T,KAAK6U,gBAAgBd,K,qCAKVA,GAAO,WACdpH,EAAOoH,EAAMU,eAAiBnO,OAAOmO,cAC3CV,EAAMS,iBACN,IAAIM,EAASnI,EAAKoI,QAAQ,cAAc3K,OAExC,IADA0K,EAASA,EAAOxI,QAAQ,MAAO,UACnBlC,OAAZ,CAGA,IAAMlI,EAAIyD,SAASI,cAAc,KACjC7D,EAAEM,UAAYsS,EAEdvD,EAAiBrP,GACjB+O,EAAW/O,GAEPA,EAAEgB,gBAAkBlD,KAAKsN,QAC3BpL,EAAEgH,SAGJ7F,MAAMC,KAAKtD,KAAKsN,OAAO3B,UAAUpI,SAAQ,SAAAW,GAClCA,EAAM8F,YAAYI,QACrB,EAAKkD,OAAOC,YAAYrJ,S,sCAId6P,GACdA,EAAMS,iBACN,IACMM,GADOf,EAAMU,eAAiBnO,OAAOmO,eACvBM,QAAQ,gBAAgB3K,OAE5C,GAAI0K,EAAQ,CACV,IAAME,EAAkBrP,SAASI,cAAc,OAC/CiP,EAAgBxS,UAAYsS,EAC5BvD,EAAiByD,GACjB3R,MAAMC,KAAK0R,EAAgBrJ,UAAUpI,SAAQ,SAAAW,GACtCkI,EAAalI,EAAM8F,cAAiBoD,EAAclJ,EAAMyF,WAC3DzF,EAAMhB,cAAcqK,YAAYrJ,MAGpCb,MAAMC,KAAK0R,EAAgBrJ,UAAUpI,SAAQ,SAAAW,GAC3C,IAAM+Q,EAAW/Q,EAAMhB,cAAc2J,QAAQ,uBACzCoI,GAAYtS,EAAcuB,EAAMyF,WAAayC,EAAa6I,EAASjL,eAAiBoC,EAAa4I,EAAgBhL,aACnHiL,EAAS/R,cAAcoC,aAAapB,EAAO+Q,GAEjB,IAAnB/Q,EAAMQ,UAAkB/B,EAAcuB,EAAMyF,WAAasL,GAC5DD,EAAgBrJ,SAAStG,OAAS,GACpCnB,EAAMkF,YAAYzD,SAASI,cAAc,OAE3C7B,EAAMgF,UAEEkD,EAAalI,EAAM8F,cAC3B9F,EAAMgF,YAGV,IAAMgM,EAAQF,EAAgBnI,QAAQ,uBACtC,GAAIqI,EAAO,CACT,IAAMC,EAAQ/N,EAAU4N,EAAiBE,EAAO,CAAE5N,IAAK4N,EAAMvL,WACzDwL,IACFA,EAAMpM,KAAKvD,YAAY2P,EAAMnM,QAC7BmM,EAAMnM,OAAOxD,YAAY2P,EAAMlM,OAC/BkM,EAAMlM,MAAMC,SACZiM,EAAMnM,OAAOE,UAGjBsB,EAAiBxK,KAAKsN,QACtB2D,EAAW+D,GACXA,EAAgB9L,cAEhBlJ,KAAK4U,eAAeb,K,8BAKtB/T,KAAKsN,OAAO8H,iBAAiB,QAASpV,KAAK4T,OAC3C5T,KAAKsN,OAAO8H,iBAAiB,OAAQpV,KAAK6T,Q,gCAG1C7T,KAAKsN,OAAO+H,oBAAoB,QAASrV,KAAK4T,OAC9C5T,KAAKsN,OAAO+H,oBAAoB,OAAQrV,KAAK6T,W,gCC9IpCyB,EAAS,GCAPC,EAAU,CACrBC,OAAQ,SACRC,MAAO,QACPzS,QAAS,UACT0S,KAAM,QAEIC,EAAW,SAACC,GAMtB,OADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAItJ,QAAQ,UAAW,KACnBA,QAAQ,SAAU,KAClBA,QAAQ,WAAY,KACpBA,QAAQ,QAAS,KACjBA,QAAQ,MAAO,KAGduJ,EAAwB,SAAC7H,GACpC,IAAM8H,EAAOnQ,SAASI,cAAc,KAEpC,OADA+P,EAAK9H,KAAOA,EACL8H,G,ICRUC,EACjB,WAAYzI,EAAQ0I,GAAW,WAE3B,G,4FAF2B,UAEtB1I,EAED,OAAO,KAGXtN,KAAKgW,UAAYA,EACjBhW,KAAKsN,OAASA,EAEd,IAAM2I,EAAgB,WAClB,IAAMhI,EAAiBjB,EAAgC,EAAKM,QAC5B,mBAApB,EAAK0I,WACb,EAAKA,UAAU/H,GACgB,mBAAvBqH,EAAM,SACdA,EAAM,QAAYrH,GAEtB,IAAMiI,EAAkBxQ,IAExB,GAAGwQ,EAAiB,CAChB,IAAMC,EAAOD,EAAgBrJ,QAAQ,KAClCsJ,GACsC,mBAA3Bb,EAAM,aACZA,EAAM,YAAgB,CAClBc,SAASD,EAAKC,SACdpI,KAAK2H,EAASQ,EAAKnI,MACnBV,OAAO6I,EAAK5T,aAAa,WAAa,GACtCoB,QAAQwS,MAO5BnW,KAAKqW,UAAY,SAAC5R,GAEd,GAAkB,IAAdA,EAAE6R,SAAiB,EAAKhJ,OAAO3B,SAAStG,QAAU,IAAM,EAAKiI,OAAOtD,YAEpE,OADAvF,EAAE+P,kBACF,EAEJyB,KAEJjW,KAAKuW,QAAU,WACXN,KAGJjW,KAAKsN,OAAO8H,iBAAiB,QAASpV,KAAKuW,SAC3CvW,KAAKsN,OAAO8H,iBAAiB,UAAWpV,KAAKqW,WAE7CrW,KAAKwW,QAAU,WACX,EAAKlJ,OAAO+H,oBAAoB,QAAS,EAAKkB,SAC9C,EAAKjJ,OAAO+H,oBAAoB,UAAW,EAAKgB,WAChD,EAAK/I,OAAS,O,mGC1DLmJ,GAEjB,WAAYnJ,GAAsB,WAAdjG,EAAc,uDAAJ,GAC1B,GAD8B,YACzBiG,EAED,OAAO,KAEuB,mBAAvBjG,EAAQqP,aACf1W,KAAK0W,WAAarP,EAAQqP,YAE9B1W,KAAKsN,OAASA,EAGdtN,KAAK2W,SAAW,SAAClS,GACb,GAAkB,IAAdA,EAAE6R,QAEuC,KAArClK,EADW3H,EAAE6I,OACOtD,cACpBvF,EAAE+P,sBAIL,GAAkB,KAAd/P,EAAE6R,QAAgB,CACvB,GAAI7R,EAAEkQ,SAGF,OAFApD,EAAiB,kBACjB9M,EAAE+P,iBAIN,IAAMrO,EAAQR,SAASa,cACjBD,EAAYD,OAAOV,eACrBgR,EAAe3H,EAAuB1I,EAAUV,YAEpD,GAAI+Q,IAAiB,EAAKtJ,SAAWsJ,EACjC,SAQJ,GANsBrQ,EAAU4B,WAAW,GAC7BK,kBACdrC,EAAMiC,SAAS7B,EAAUV,WAAYU,EAAUsQ,cAC/C1Q,EAAMsC,OAAOmO,EAAcA,EAAalO,WAAWrD,QACnDkB,EAAUG,kBACVH,EAAUI,SAASR,GACfI,EAAUoJ,YAaV,OAZIiH,IAAiB,EAAKtJ,OAAOtD,YAAYI,QACrCwM,IAAiB,EAAKtJ,SACtBjK,MAAMC,KAAK,EAAKgK,OAAO3B,UAAUpI,SAAQ,SAAA9C,GACjCA,IAAMmW,GAAiBnW,EAAEuJ,YAAYI,QACrC3J,EAAEyI,YAGV0N,EAAapU,UAAYoU,EAAapU,UAAY,UAClDyO,EAAW2F,GACXnS,EAAE+P,mBAGV,EAEA/P,EAAE+P,iBAGN,IAAMsC,EAAc3Q,EAAMqC,kBAC1BnF,MAAMC,KAAKwT,EAAYnL,UAAUpI,SAAQ,SAAAW,GACd,IAAnBA,EAAMQ,UAAmBR,EAAM8F,YAAYI,QAAWgD,EAAclJ,EAAMyF,WAC1EzF,EAAMgF,YAId,IAAMrE,EAAKc,SAASI,cAAc6Q,EAAajN,UAAY,KAC3D9E,EAAGW,YAAYsR,GACVjS,EAAGmF,YAAYI,SAChBvF,EAAGrC,UAAY,WAEnB4G,EAAYvE,EAAI+R,GAChBvT,MAAMC,KAAKuB,EAAGkS,gBAAgBhQ,YAAYxD,SAAQ,SAAAuE,GAC9CjD,EAAGkD,aAAaD,EAAKnH,KAAKmH,EAAKzG,UAGnC,IAAM2V,EAAKrR,SAASI,cAAc,MAClC6Q,EAAapR,YAAYwR,GAGzBzQ,EAAUG,kBACV2G,EAAmB,EAAKC,QACxB2D,EAAWpM,EAAI,OAEiB,mBAApB,EAAK6R,YACjB,EAAKA,WAAWjS,IAKxBzE,KAAKsN,OAAO8H,iBAAiB,UAAWpV,KAAK2W,UAE7C3W,KAAKwW,QAAU,WACX,EAAKlJ,OAAO+H,oBAAoB,UAAW,EAAKsB,UAChD,EAAKrJ,OAAS,O,2KC1FL2J,G,WACjB,c,4FAAc,S,uDAGNtT,EAAS0D,GACb,GAAuB,iBAAZ1D,GAEP,KADAA,EAAUgC,SAASuR,eAAevT,IAI9B,OAAO,UAER,IAAI4D,EAAUC,UAAU7D,GAK3B,OAAO,KA6BX,OA3BwB,SAACA,GASrB0J,EAAmB1J,GAEnB,IAVsBQ,EAYhBgT,EAAkBzJ,EAFJc,EAAc7K,KAVZQ,EAcTR,EAbF,IAAIyT,SAAQ,SAACC,GAChB,KAAOlT,EAAK4F,mBACR5F,EAAK4F,kBAAkB3F,SAE3BiT,QAScC,MAAK,kBAAM3T,EAAQnB,UAAY2U,EAAgB3U,aASzE+U,CAAgB5T,GAEhB3D,KAAKwX,QATc,SAAC7T,EAAS0D,GACzB,MAAO,CACHoQ,UAAW,IAAI/D,EAAU/P,EAAS0D,GAClCqQ,UAAW,IAAI3B,EAAUpS,EAAS0D,EAAQ2O,WAC1C2B,SAAU,IAAIlB,GAAS9S,EAAS0D,IAKzBuQ,CAAWjU,EAAS0D,GAC5B1D,I,gCAOP,IAAK,IAAMhC,KAAO3B,KAAKwX,QACfxX,KAAKwX,QAAQvV,eAAeN,IACb3B,KAAKwX,QAAQ7V,GACrB6U,e,2UC3CFqB,G,WAKjB,WAAYvK,EAAQwK,GAAQ,c,4FAAA,SACxB9X,KAAK+X,SAAW,CACZ/B,eAAWgC,GAGfhY,KAAKiY,GAAK,SAACtW,EAAIuW,GAOX5C,EAAO3T,GAAQuW,GAEnBlY,KAAKiX,UAAY,IAAIA,GACrBjX,KAAKmY,cAAL,QACKC,EAAMC,QAAS,SAACvJ,EAAGnN,EAAKN,EAAOgG,GAAhB,OAA4B,EAAKiR,SAASxJ,EAAGnN,EAAKN,EAAOgG,MAD7E,KAEK+Q,EAAMG,QAAS,SAACzJ,EAAGnN,EAAKN,EAAOgG,GAAhB,OAA4B,EAAKmR,SAAS1J,EAAGnN,EAAKN,EAAOgG,MAF7E,GAIArH,KAAK8X,OAASA,EAAShX,OAAOsS,OAAOpT,KAAK+X,SAAUD,GAAU9X,KAAK+X,SACnE/X,KAAKyY,OAAS,CACVC,aAAc1Y,KAAK8X,OAAO9B,WAE9BhW,KAAK2Y,iBAAmB3Y,KAAKiX,UAAU2B,QAAQtL,EAAQtN,KAAK8X,Q,sDAG5D,OAAOtJ,EAAcxO,KAAK2Y,oB,2BAEzBjK,GACD,OAAOhB,EAAcgB,EAAM1O,KAAK2Y,oB,gCAKhC,IAAK,IAAMhX,KAFX3B,KAAKiX,UAAUT,UACFxW,KAETA,KAAK2B,GAAO,YACL3B,KAAK2B,K,+BAOhB,GAAK3B,KAAK2O,UAAV,CAGA,IAAMpI,EAAYD,OAAOV,eAEzB,GAAIW,IAAcA,EAAUsS,WAAY,CACpC,IAAIC,EACEC,EAAWxS,EAAUwS,SAU3B,OATIA,GAAkC,IAAtBA,EAASrU,UAAkBqU,EAAS7V,gBAChD4V,EAAkBC,EAAS7V,eAE3B6V,GAAkC,IAAtBA,EAASrU,WACrBoU,EAAkBA,EAAgBjM,QAAQ,MAE1CiM,GACAA,EAAgB5P,SAEb,KAEX,IAAM8P,EAAe5J,IACrB/L,MAAMC,KAAK0V,GAAczV,SAAQ,SAAArC,GAC7B,IAAM+X,EAAc/X,EAAE2L,QAAQ,KAC9B,GAAIoM,EAAa,CACb,IAAIC,EAAI9R,EAAUlG,EAAG+X,EAAa,CAC9B3R,IAAK,MAEL4R,GACAA,EAAElQ,OAAOE,SAGjB7F,MAAMC,KAAKpC,EAAE8C,iBAAiB,MAAMT,SAAQ,SAAA2V,GACxCA,EAAEhQ,YAENhI,EAAEgI,YAlCD,MAoC2BoK,EAAkB0F,EAAa,GAAIA,EAAaA,EAAa3T,OAAS,IACtG2N,EArCK,EAoCGC,UApCH,EAoCcC,a,6BAOJ,IAAd7L,EAAc,uDAAJ,GACX,GAAKA,KAAYA,GAAYA,EAAQ2G,OAAWhO,KAAK2O,UAArD,CAIA,GAAIrI,OAAOV,eAAiBU,OAAOV,eAAeiT,WAE9C,OAAO,KAyBX,IAAMM,EAAc,SAACC,EAAWC,GAS5B,OAPAD,GADAA,EAAYA,EAAU9M,QAAQ,KAAM,KACdA,QAAQ,QAAS,KACvC8M,GAAa,KACClO,SAAS,UACnBkO,GAAa,MAGjBC,EAAO5V,KAAK2V,GACLA,GAzCI,EA6CmC/R,EAA1C2G,YA7CO,MA6CA,GA7CA,IA6CmC3G,EAA/B+O,gBA7CJ,MA6Ce,GA7Cf,IA6CmC/O,EAAhBiG,cA7CnB,MA6C4B,GA7C5B,EA+CT0L,EAAe5J,EAAqB,KACtCiK,EAAS,GACPvD,EAAOD,EAAsB7H,GAC/BsL,EAAQ3D,EAAS3H,EAAK5D,QAEtBgP,EAAYhD,EAAShM,QAAU0L,EAAKM,SACpCmD,EAAU,KACRC,EAAajE,EAAQjI,EAAOlD,OAAOqP,eACrCD,IACAD,EAAUC,GAEVJ,EAAUhP,SACVgP,EAAYD,EAAYC,EAAWC,IAEnCC,GACAD,EAAO5V,KAAK6V,GAEhB,IAAMI,EAAeL,EAAOxR,KAAK,KACjC,SAxDqBmR,GACjBA,EAAazV,SAAQ,SAAAoW,GACjBtW,MAAMC,KAAKqW,EAAK3V,iBAAiB,MAAMT,SAAQ,SAAA4S,GAAI,OAAIA,EAAKjN,YAC5D,IAAM+P,EAAcU,EAAKzW,cAAgByW,EAAKzW,cAAc2J,QAAQ,KAAO,KAC3E,GAAIoM,EAAa,CACb,IAAIC,EAAI9R,EAAUuS,EAAMV,EAAa,CACjC3R,IAAK,MAEL4R,GACAA,EAAElQ,OAAOE,aA+CzB,CAAY8P,GACZ,SA1CwBA,EAAcU,EAAcH,GAChDP,EAAazV,SAAQ,SAAA4S,GACjBA,EAAKnI,KAAO0L,EACRH,GACApD,EAAKpO,aAAa,SAAUwR,MAsCxC,CAAeP,EAAcU,EAAcH,GAlE5B,MAmEiBjG,EAAkB0F,EAAa,GAAIA,EAAaA,EAAa3T,OAAS,IAA9F4N,EAnEO,EAmEPA,UAAWC,EAnEJ,EAmEIA,SACnBF,EAA4BC,EAAWC,GAEvC1I,EAAiBxK,KAAK2Y,qB,kCAId7U,EAAWuD,GAEnB,GAAKrH,KAAK2O,UAAV,CAGA,GAA2B,iBAAf7K,EAER,OAAO,KAGX,IAAMiB,EAAWqK,IACjB,GAAwB,IAApBrK,EAASM,OAAb,CAGKgC,IAASA,EAAU,IACW,kBAAvBA,EAAQd,YAA0Bc,EAAQd,WAAR,IACA,kBAAlBc,EAAQuS,KAAuBvS,EAAQuS,KAAO7U,EAAS,GAAG8H,QAAZ,kBAA+B/I,EAA/B,QAItEiB,EAASxB,SAAQ,SAAAsB,GACb,GAAIA,EAAG3B,cAAe,CAClB,IAAM2W,EAAehV,EAAG3B,cAAc2J,QAAjB,kBAAoC/I,EAApC,OACrB,GAAI+V,EAAc,CACd,IAAM/Q,EAAQ1B,EAAUvC,EAAIgV,GACxB/Q,GACAA,EAAME,OAAOzE,gBAAgBT,SAIrCe,EAAGN,gBAAgBT,MAZ3BiB,EAASxB,SAAQ,SAAAsB,GAAE,OAAIA,EAAGzB,UAAUmH,IAAIzG,MAlBhB,MAkCIuD,EAAQd,UAAY+M,EAAkBvO,EAAS,GAAIA,EAASA,EAASM,OAAS,IAAM,CAAE4N,UAAW,KAAMC,SAAU,MAAzID,EAlCoB,EAkCpBA,UAAWC,EAlCS,EAkCTA,SAEnB,GADA1I,EAAiBxK,KAAK2Y,kBAClB1F,GAAaC,EACbF,EAA4BC,EAAWC,OACpC,CACH,IAAMhL,EAAM5B,OAAOV,eACfsC,EAAIxB,iBACJwB,EAAIxB,uB,8BAYR/E,EAAKN,EAAOE,EAAM8F,GAAS,WAC/B,GAAKrH,KAAK2O,WAAc3O,KAAK8Z,gBAAgBnY,EAAKN,GAAlD,CAYA,GATArB,KAAK2Y,iBAAiBxM,YACtBnM,KAAK+Z,SAAW,GAChBxY,EAAOA,GAAc6W,EAAMG,OACtBlR,IAASA,EAAU,IACW,kBAAvBA,EAAQd,YAA0Bc,EAAQd,WAAR,GAI9CvG,KAAK+Z,SAAW3K,KACX/H,EAAQd,UAAW,CACpB,IAAMqL,EAAW5R,KAAK+Z,SAAS/Z,KAAK+Z,SAAS1U,OAAS,GAClDuM,IACA5R,KAAKga,YAAcha,KAAKia,qBAAqBrI,IAGjDvK,EAAQ6S,QAAU7W,MAAM4B,QAAQoC,EAAQ6S,SACxC7S,EAAQ6S,OAAO3W,SAAQ,SAAA4W,GACnB,EAAKJ,SAASxW,SAAQ,SAAA6W,GAClB,IAAMC,EAAyBD,EAAQvN,QAAQsN,GAC3CE,GACAA,EAAuBnR,eAxBR,IZrKP6H,EYuMpBuJ,EAlC2B,EA8BCjT,EAAQd,UAAY+M,EAAkBtT,KAAK+Z,SAAS,GAAI/Z,KAAK+Z,SAAS/Z,KAAK+Z,SAAS1U,OAAS,IAAM,CAAE4N,UAAW,KAAMC,SAAU,MAAxJD,EA9BuB,EA8BvBA,UAAWC,EA9BY,EA8BZA,SAcnB,GZjNwBnC,EYqMRL,EAAa1Q,KAAK2Y,kBZpMjCtV,MAAM4B,QAAQ8L,KACfA,EAAY,CAACA,IAEjBA,EAAUxN,SAAQ,SAAAsB,GACVA,EAAGH,WAAakF,KAAKyH,WAAaxM,EAAG3B,eAA+C,mBAA9B2B,EAAG3B,cAAcyG,WACvE9E,EAAGmF,YAAcnF,EAAGmF,YAAYsC,QAAQ,UAAW,QYmMvDtM,KAAK+Z,SAASxW,SAAQ,SAACI,GACnB0D,EAAQkT,MAAQD,EAChB,IAAME,EAAS,EAAKrC,aAAa5W,GAAMoC,EAAShC,EAAKN,EAAOgG,GACxD9F,IAAS6W,EAAMC,aAAkC,IAAhBiC,IACjCA,EAAaE,MAErBhQ,EAAiBxK,KAAK2Y,kBAElB1F,GAAaC,EACbF,EAA4BC,EAAWC,OACpC,CACH,IAAMhL,EAAM5B,OAAOV,eACfsC,EAAIxB,iBACJwB,EAAIxB,kBAEJ1G,KAAKga,cACL/I,EAAWjR,KAAKga,YAAaha,KAAKga,YAAYhQ,YAAY3E,QAC1DrF,KAAKga,YAAY9Q,SACjBlJ,KAAKga,YAAc,MAG3B,IAAMS,EAAmBzN,EAAgChN,KAAK2Y,kBAC5B,mBAAvBrD,EAAM,SACbA,EAAM,QAAYmF,GAEtBza,KAAK0a,cAAc,eAAgBD,M,2CAElBE,GACjB,IAAKA,EAAQ,OAAO,KACpB,IAAMX,EAAcrU,SAASI,cAAc,kBAG3C,OAFAiU,EAAYjS,aAAa,aAAc,QACvC4S,EAAOnV,YAAYwU,GACZA,I,oCAGGjG,EAAO6G,GACb5a,KAAKyY,OAAO1E,IACZ/T,KAAKyY,OAAO1E,GAAO6G,K,+BAElBjX,EAAShC,EAAKN,EAAOgG,GAC1B,GAAuB,UAAnBA,EAAQiG,OAEL,CAGH,IAAIuN,EAAiBlX,EAAQkJ,QAAR,mBAA4BxL,EAA5B,OAErB,GAAIwZ,GAAkBlY,EAAckY,EAAelR,UAAW,CAC1D,IAAIqF,EAAYD,EAA0B8L,GAI1C,OAHAA,EAAelW,MAAMhD,GAAO,KAC5BqN,EAAUrK,MAAMhD,GAAON,EACvBgG,EAAQkT,OAAR,EACOva,KAAKsY,SAAS3U,EAAShC,EAAKN,EAAOgG,GAE9C,GAAIwT,GAAkBA,IAAmBlX,EAAS,MACf,IAAnB0D,EAAQkT,QAChBlT,EAAQkT,OAAR,GAEJ,IAAMO,EAAgB1T,EAAUzD,EAASkX,GAErCC,GACAtO,EAAYsO,EAAc9R,OAAQrH,EAAKN,EAAOgG,EAAQkT,iBAM3B,IAAnBlT,EAAQkT,OAA0BM,EAC1CxT,EAAQkT,OAAR,OACkC,IAAnBlT,EAAQkT,QACvBlT,EAAQkT,OAAR,GAEJ/N,EAAY7I,EAAShC,EAAKN,EAAOgG,EAAQkT,OACzC/P,EAAiB7G,GAGrB,OAAO0D,EAAQkT,MAnCfva,KAAK+a,iBAAiB1T,EAAS1D,EAAShC,EAAKN,K,+BAuC5CsC,EAAShC,EAAKN,EAAOgG,GAC1B,GAAuB,UAAnBA,EAAQiG,OACRtN,KAAK+a,iBAAiB1T,EAAS1D,EAAShC,EAAKN,OAC1C,CACH,IAAMwZ,EAAiBlX,EAAQkJ,QAAR,mBAA4BlL,EAA5B,OACvB,GAAIkZ,EAAgB,CAChB,IAAMG,EAAc5T,EAAUzD,EAASkX,GACvC,GAAIG,EACAtO,EAASsO,EAAYhS,OAAQrH,EAAKN,QAEjC,GAAuB,UAAnBgG,EAAQiG,OACbuN,EAAelW,MAAMhD,GAAON,MAE3B,IAAuB,UAAnBgG,EAAQiG,OAIb,OAFAZ,EADgBqC,EAA0B8L,EAAgB,CAAEhW,GAAI,SAC5ClD,EAAKN,GACzBwZ,EAAelW,MAAMhD,GAAO,KACrB3B,KAAKwY,SAAS7U,EAAShC,EAAKN,GAGlC,GAAIwZ,IAAmBlX,EAAS,CACjC,IAAMmX,EAAgB1T,EAAUzD,EAASkX,GACrCC,GACApO,EAASoO,EAAc9R,OAAQrH,EAAKN,UAMzC,GAAiD,UAA7CiF,OAAO4I,iBAAiBvL,GAASwL,SAA0C,UAAnB9H,EAAQiG,OAAoB,CAC3F,IAAMsJ,EAAe3H,EAAuBtL,GAC5C,GAAIiT,GAAgBA,EAAa3T,UAAUjD,KAAK2Y,kBAC5CjM,EAASxJ,cAAevB,EAAKN,OAC1B,CACH,IAAMyD,EAAUa,SAASI,cAAc,OACvC7C,cAAc4C,KAAKhB,GACnB4H,EAAS5H,EAASnD,EAAKN,SAG3BqL,EAAS/I,EAAShC,EAAKN,M,uCAKlBgG,EAAS1D,EAAShC,EAAKN,GAEpC,GAAmB,WAAfgG,EAAQ4T,GAAiB,CACzB,IAAIrE,EAAe3H,EAAuBtL,GAC1C,GAAIiT,EAAc,CACd,IAKMsE,EAAoB,SAAChW,GAEvBA,EAAWP,MAAMhD,GAAO,KACxB0B,MAAMC,KAAK4B,EAAWwD,YAAYnF,SAAQ,SAAAY,GAChB,IAAlBA,EAAKO,SATmB,SAACP,GACjC,IAAMgQ,EAAOxO,SAASI,cAAc,QACpCoO,EAAKxP,MAAMhD,GAAON,EAClB8C,EAAK2B,KAAKqO,GAOFgH,CAA4BhX,GACH,IAAlBA,EAAKO,UAAmB0I,EAAcjJ,EAAKwF,UAIlDxF,EAAKQ,MAAMhD,GAAON,EAHd6Z,EAAkB/W,OAOlC+W,EAAkBtE,QAGlB5W,KAAKob,wBAAwBzZ,EAAKN,EAAOsC,OAG1C,CACH,IAAIiT,EAAe3H,EAAuBtL,GACtCiT,GACAA,EAAajS,MAAMhD,GAAON,EAC1BgC,MAAMC,KAAKsT,EAAa5S,iBAAb,mBAA0CrC,EAA1C,QAAoD4B,SAAQ,SAAAsB,GAAE,OAAIA,EAAGF,MAAMhD,GAAO,SAE7F3B,KAAKob,wBAAwBzZ,EAAKN,EAAOsC,M,8CAK7BhC,EAAKN,EAAOsC,GAChC,IAAM0X,EAAQ1V,SAASI,cAAc,KACrCsV,EAAM1W,MAAMhD,GAAON,EACnBsC,EAAQmC,KAAKuV,K,sCAED1Z,EAAIN,GAChB,QAAyB,iBAARM,GAAqC,iBAAVN,K,gCAG5C,IAAKrB,KAAK2Y,iBAEN,SAEJ,GAA8C,UAA1C3Y,KAAK2Y,iBAAiBjH,gBACtB,SAEJ,IAAIwE,EAAkBxQ,IACtB,SAAIwQ,IAAoBA,EAAgBjT,UAAUjD,KAAK2Y,mBAAqBzC,IAAoBlW,KAAK2Y,wBAArG,O,+EC9ba2C,GAEnB,WAAYhO,EAAQwK,I,4FAAQ,SAE1B,IAAMyD,EAAU,IAAI1D,GAAKvK,EAAQwK,GAC7ByD,IACFvb,KAAKwb,QAAUD,EAAQC,QACvBxb,KAAKyb,YAAcF,EAAQE,YAC3Bzb,KAAK2Z,KAAO4B,EAAQ5B,KACpB3Z,KAAK0b,OAASH,EAAQG,OACtB1b,KAAK2b,KAAOJ,EAAQI,KACpB3b,KAAK4b,KAAOL,EAAQK,KACpB5b,KAAK6b,QAAUN,EAAQM,QACvB7b,KAAKiY,GAAKsD,EAAQtD,GAClBjY,KAAK8b,MAAQA,EAEb9b,KAAKyb,YAAczb,KAAKyb,YAAY7Z,KAAK2Z,GACzCvb,KAAKwb,QAAUxb,KAAKwb,QAAQ5Z,KAAK2Z,GACjCvb,KAAKiY,GAAKjY,KAAKiY,GAAGrW,KAAK2Z,GACvBvb,KAAK2Z,KAAO3Z,KAAK2Z,KAAK/X,KAAK2Z,GAC3Bvb,KAAK0b,OAAS1b,KAAK0b,OAAO9Z,KAAK2Z,GAC/Bvb,KAAK2b,KAAO3b,KAAK2b,KAAK/Z,KAAK2Z,GAC3Bvb,KAAK4b,KAAO5b,KAAK4b,KAAKha,KAAK2Z,GAC3Bvb,KAAK6b,QAAU7b,KAAK6b,QAAQja,KAAK2Z","file":"styleit-api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"styleit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"styleit\"] = factory();\n\telse\n\t\troot[\"styleit\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require('./src').default;\r\n","\r\nclass TextSelection extends HTMLElement {\r\n    constructor() {\r\n      super();\r\n    }\r\n    connectedCallback(){\r\n      const createZeroSpace = this.getAttribute('zero-space');\r\n      if(createZeroSpace === \"true\"){\r\n        this.innerHTML = \"&#8203;\";\r\n\r\n      }\r\n    }\r\n  }\r\n  if(!customElements.get('text-selection')){\r\n    customElements.define('text-selection', TextSelection); \r\n  }\r\n","export const block_elments = {\r\n    \"H1\":\"H1\",\r\n    \"H2\":\"H2\",\r\n    \"H3\":\"H3\",\r\n    \"H4\":\"H4\",\r\n    \"H5\":\"H5\",\r\n    \"H6\":\"H6\",\r\n    \"P\":\"P\",\r\n    \"LI\":\"LI\",\r\n    \"OL\":\"OL\"\r\n}   ","\r\nexport function getInheirtClassNames(fromElement, toElement) {\r\n    var classes = [];\r\n    var _parent = fromElement;\r\n    while (_parent && _parent.ischildOf(toElement.parentElement)) {\r\n        let map = _parent.classList;\r\n        Array.from(map).forEach(name => {\r\n            if (classes.findIndex(c => c === name) < 0) {\r\n                classes.push(name);\r\n            }\r\n        })\r\n        _parent = _parent.parentElement;\r\n    }\r\n    return classes;\r\n}\r\nexport function getClasses(element) {\r\n    return Array.from(element.classList);\r\n}\r\n\r\n//TODO: review\r\n//question: is expensive too much? \r\nexport function normalizeClassName(element) {\r\n    function removeEmptyClass(element){\r\n        if (!element.className) {\r\n            element.removeAttribute('class');\r\n        }\r\n    }\r\n    function clear(element) {\r\n        removeEmptyClass(element);\r\n        Array.from(element.classList).forEach(c => {\r\n            Array.from(element.querySelectorAll(`[class='${c}']`)).forEach(node =>{\r\n                node.classList.remove(c)\r\n                removeEmptyClass(node)\r\n            });\r\n        })\r\n    }\r\n    \r\n    const elements = Array.from(element.querySelectorAll('span[class]')).concat(element);\r\n    elements.forEach(child => clear(child));\r\n}\r\n//TODO: review\r\n//question: how about this name ? \r\nElement.prototype.removeClassName = function(className){\r\nconst nodes = Array.from(this.querySelectorAll(`[class='${className}']`)).concat(this);\r\nnodes.forEach(node=>node.classList.remove(className));\r\n}","class DomUtilis {\r\n\r\n\r\n  isElement(obj) {\r\n    try {\r\n      return obj instanceof HTMLElement;\r\n    }\r\n    catch (e) {\r\n      return (typeof obj === \"object\") &&\r\n        (obj.nodeType === 1) && (typeof obj.style === \"object\") &&\r\n        (typeof obj.ownerDocument === \"object\");\r\n    }\r\n  }\r\n  \r\n  wrap(el, wrapper) {\r\n    //el should be array\r\n    let elements = [];\r\n    if (Array.isArray(el)) {\r\n      elements = el;\r\n    } else {\r\n      elements = [el];\r\n    }\r\n\r\n    const parents = elements.map(e => e.parentNode);\r\n    var parentsDiff = parents.filter((p, _, self) => { return self[0] !== p });\r\n    if (parentsDiff.length !== 0) {\r\n      console.log(`[wrap] found ${parentsDiff.length} different parents 😅`);\r\n      return;\r\n    }\r\n    parents[0].insertBefore(wrapper, elements[0])\r\n    elements.forEach(_el => wrapper.appendChild(_el))\r\n\r\n    return true;\r\n  }\r\n}\r\nexport default new DomUtilis(); \r\n\r\nDocument.prototype.getSelectedElement=function(){var e=document.getSelection();if(null!==e){var t=e.anchorNode;if(null!==t){for(;3===t.nodeType;)t=t.parentNode;return t}return null}}\r\nElement.prototype.wrap = ( wrapper) => {\r\n  if (typeof wrapper === \"string\") wrapper = document.createElement(wrapper);\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nElement.prototype.createSelection = function() {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(this);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(this);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } \r\n}\r\nElement.prototype.ischildOf = function(parent) {\r\n  if (!parent) return false;\r\n  let node = this.parentNode;\r\n  while (node != null) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\nconst _wrap = function(wrapper) {\r\n  if (!this.parentNode) return false;\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nText.prototype.wrap = _wrap;\r\nElement.prototype.wrap = _wrap;\r\nElement.prototype.insertAfter = function (newNode) {\r\n  this.parentNode.insertBefore(newNode, this.nextSibling);\r\n}\r\nElement.prototype.replaceNode = function(replacementNode) {\r\n  if (this.parentNode) {\r\n    this.parentNode.insertBefore(replacementNode, this)\r\n    this.remove();\r\n    return replacementNode;\r\n  }\r\n}\r\nElement.prototype.unwrap = function() {\r\n  var range = document.createRange()\r\n  range.selectNodeContents(this)\r\n  var extraContents = range.extractContents();\r\n  this.replaceNode(extraContents)\r\n  return extraContents;\r\n}\r\n","\r\n\r\n//class and style not includes yet..\r\nexport function getInheirtAttributes(fromElement, toElement) {\r\n    var attributes = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        var attrs = currectElement.attributes;\r\n        for(var i = attrs.length - 1; i >= 0; i--) {\r\n            if(attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\"){\r\n                if(!attributes[attrs[i].name ]){\r\n                    attributes[attrs[i].name ] = attrs[i].value;\r\n                }\r\n            }\r\n          }\r\n      currectElement = currectElement.parentElement;\r\n    }\r\n    return attributes;\r\n  }\r\n  export function getAttributes(element,getAll){\r\n    var attributes = {};\r\n    var attrs = element.attributes;\r\n    for(var i = attrs.length - 1; i >= 0; i--) {\r\n        if(getAll  || (!getAll && attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\")){\r\n            if(!attributes[attrs[i].name ]){\r\n                attributes[attrs[i].name ] = attrs[i].value;\r\n            }\r\n        }\r\n      }\r\n      return attributes;\r\n  }\r\n  export function removeAllAttrs(element){\r\n      if(element && !element.attributes){\r\n          console.error(\"element not have attributes..\");\r\n          return null;\r\n      }\r\n    Array.from(element.attributes).forEach(attr=>element.removeAttribute(attr.nodeName))\r\n  }","import DomUtilis from \"./DomUtilis\"\r\nimport { getInheirtCss } from \"../services/style.service\";\r\nimport { getInheirtAttributes } from \"../services/attr.service\";\r\nimport { getInheirtClassNames } from \"../services/className.service\";\r\n\r\n\r\nexport function splitHTML(fromElement, toElement,options = {}) {\r\n    const {tag = \"span\"} = options;\r\n    if (!fromElement.ischildOf(toElement)) {\r\n        console.error('fromElement must be child of toElement')\r\n        return null;\r\n    }\r\n    if (!DomUtilis.isElement(fromElement) || !DomUtilis.isElement(toElement)) {\r\n        console.error('fromElement && toElement must be dom elements..');\r\n        return null;\r\n    }\r\n    const setAttrs = (fromElement, toElement) => {\r\n        const styles = getInheirtCss(fromElement, toElement);\r\n        const attrs = getInheirtAttributes(fromElement, toElement);\r\n        const className = getInheirtClassNames(fromElement, toElement);\r\n        const template = document.createElement(tag);\r\n        template.className = className.join(\" \");\r\n        for (const style in styles) {\r\n            const value = styles[style];\r\n            template.style[style] = value;\r\n        }\r\n        for (const attr in attrs) {\r\n            const value = attrs[attr];\r\n            template.setAttribute(attr, value);\r\n        }\r\n        return template;\r\n    }\r\n    fromElement.createSelection();\r\n    const centerElement = document.getSelectedElement();\r\n    const centerTemplate = setAttrs(centerElement, toElement);\r\n    //center\r\n    centerTemplate.appendChild(fromElement);\r\n    var sel = window.getSelection();\r\n    var range = sel.getRangeAt(0);\r\n    //left\r\n    range.setStart(toElement, 0);\r\n    const leftElement = document.getSelectedElement();\r\n    const leftTemplate = setAttrs(leftElement, toElement);\r\n    var leftRange = range.extractContents();\r\n    leftTemplate.appendChild(leftRange);\r\n    //right\r\n    range.setEnd(toElement, toElement.childNodes.length);\r\n    const rightElement = document.getSelectedElement();\r\n    const rightTemplate = setAttrs(rightElement, toElement);\r\n    var rightRange = range.extractContents();\r\n    rightTemplate.appendChild(rightRange);\r\n    const split = {\r\n        left: leftTemplate,\r\n        center: centerTemplate,\r\n        right: rightTemplate\r\n    }\r\n    toElement.innerHTML = \"\";\r\n    for (const el in split) {\r\n        const element = split[el];\r\n        toElement.appendChild(element);\r\n    }\r\n    toElement.unwrap();\r\n    return split;\r\n\r\n}","import DomUtilis from \"./DomUtilis\"\r\nimport { getStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { getClasses, normalizeClassName } from \"../services/className.service\";\r\nimport { getAttributes } from \"../services/attr.service\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\nimport Config from '../_app.config.json';\r\n\r\n\r\n\r\n/**\r\n *  * Returns the new merge element\r\n * @param {Element} DomElement - element to merge with his first child\r\n */\r\nexport const mergeNodeContect = node => {\r\n\r\n    if (!DomUtilis.isElement(node)) {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (node.nodeName !== \"SPAN\" || node.nodeType !== Node.ELEMENT_NODE) {\r\n        // console.error('[mergeNodeContect] node is not a span');\r\n        return null;\r\n    }\r\n\r\n    const firstChild = node.firstElementChild;\r\n    if (!firstChild) {\r\n        // console.error('[mergeNodeContect] first child not found');\r\n        return null;\r\n    }\r\n    if (firstChild.nodeName !== \"SPAN\" || firstChild.nodeType !== Node.ELEMENT_NODE) {\r\n        // console.error('[mergeNodeContect] firstChild is not a span');\r\n        return null;\r\n    }\r\n    if (node.textContent !== firstChild.textContent) {\r\n        // console.error('[mergeNodeContect] text content is different');\r\n        return null;\r\n    }\r\n    const _elementProps = {\r\n        style: getStyle(node),\r\n        classes: getClasses(node),\r\n        attrs: getAttributes(node)\r\n    }\r\n    for (const style in _elementProps.style) {\r\n        const styleValue = _elementProps.style[style];\r\n        firstChild.style[style] = (firstChild.style[style] + \" \" + styleValue).trim();\r\n    }\r\n    normalizeStyle(firstChild);\r\n\r\n    for (const attr in _elementProps.attrs) {\r\n        const attrValue = _elementProps.attrs[attr];\r\n        firstChild.setAttribute(attr, attrValue);\r\n    }\r\n    firstChild.classList.add(..._elementProps.classes);\r\n    normalizeClassName(firstChild);\r\n    normalizeElement(firstChild);\r\n    if(firstChild.parentElement)\r\n    firstChild.parentElement.unwrap();\r\n    return firstChild;\r\n};\r\nexport function mergeTwoNodes(elementOne, elementTwo) {\r\n    if (!DomUtilis.isElement(elementOne) || !DomUtilis.isElement(elementTwo)) {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (elementOne.nodeName !== \"SPAN\" || elementTwo.nodeName !== \"SPAN\") {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    const _elementsData = [{\r\n        style: getStyle(elementOne),\r\n        classes: getClasses(elementOne),\r\n        attrs: getAttributes(elementOne)\r\n    },\r\n    {\r\n        style: getStyle(elementTwo),\r\n        classes: getClasses(elementTwo),\r\n        attrs: getAttributes(elementTwo)\r\n    }]\r\n    const getCommonClasses = (classes1, classes2) => {\r\n        if (!classes1 || !classes2)\r\n            return [];\r\n        const c1 = [...classes1];\r\n        const c2 = [...classes2];\r\n        return c1.filter(c => c2.includes(c));\r\n    }\r\n    const getCommonStyles = (style1, style2) => {\r\n        const commmonStyles = {};\r\n        for (const s in style1) {\r\n            if (!style2[s])\r\n                continue;\r\n\r\n            const style1Values = style1[s];\r\n            const style2Values = style2[s];\r\n            if (style2Values === style1Values) {\r\n                commmonStyles[s] = style2Values;\r\n            }\r\n        }\r\n        return commmonStyles;\r\n    };\r\n    const commoncLasses = getCommonClasses(_elementsData[0].classes, _elementsData[1].classes);\r\n    const commonStyles = getCommonStyles(_elementsData[0].style, _elementsData[1].style);\r\n    const buildWrappingElement = (commonStyles, commoncLasses) => {\r\n        const wrapper = document.createElement('span');\r\n        // handle styles\r\n        for (const s in commonStyles)\r\n            wrapper.style[s] = commonStyles[s];\r\n            \r\n\r\n        // handle classes\r\n        if (commoncLasses.length > 0) {\r\n            wrapper.classList.add(...commoncLasses);\r\n        }\r\n        if (wrapper.attributes.length === 0) {\r\n            wrapper.unwrap();\r\n            return null;\r\n        }\r\n        return wrapper;\r\n    }\r\n    const wrapper = buildWrappingElement(commonStyles, commoncLasses);\r\n    if (!wrapper) {\r\n        // console.error('wrapper is null')\r\n        return null;\r\n    }\r\n\r\n    const clearElementClasses = (node, commoncLasses) => {\r\n        node.classList.remove(...commoncLasses);\r\n        normalizeClassName(node);\r\n    }\r\n    const clearElementStyles = (node, commonStyles) => {\r\n        for (const s in commonStyles)\r\n            node.style[s] = null;\r\n    }\r\n    const elements = [elementOne, elementTwo];\r\n    elements.forEach(e => {\r\n        clearElementClasses(e, commoncLasses);\r\n        clearElementStyles(e, commonStyles);\r\n    })\r\n\r\n    DomUtilis.wrap(elements, wrapper);\r\n    [...wrapper.children].forEach(c => {\r\n        normalizeElement(c)\r\n    })\r\n    return wrapper;\r\n};\r\n\r\n\r\nexport function mergeCommonValuesObject(obj1, obj2) {\r\n    let commonValues = {};\r\n    for (const key in obj1) {\r\n        if (obj2[key] && obj2[key] === obj1[key]) {\r\n            commonValues[key] = obj1[key]\r\n        }\r\n    }\r\n    return commonValues;\r\n}\r\n\r\nexport function mergeCommonArrays(arr1, arr2) {\r\n    const mergeArr = [];\r\n    Array.from(arr1).forEach(item => {\r\n        if (arr2.findIndex(i => i === item) > 0) {\r\n            mergeArr.push(item);\r\n        }\r\n    })\r\n    return mergeArr;\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { normalizeStyle } from \"./style.service\";\r\nimport { mergeNodeContect, mergeTwoNodes } from \"../utilis/merger\";\r\n\r\n/**\r\n * @param {Element} el - element to normalize\r\n */\r\nexport function normalizeElement(el) {\r\n    const recurse = (element) => {\r\n        Array.from(element.children).forEach((child) => {\r\n            recurse(child);\r\n            _normalize(child);\r\n        })\r\n        const mergeNodesStyles = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((element) => {\r\n                let wrapper = element;\r\n                while (wrapper !== null) {\r\n                    const nextElement = wrapper.nextSibling;\r\n                    if (!nextElement){\r\n                        break;\r\n                    }\r\n                    wrapper = mergeTwoNodes(wrapper, nextElement);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n\r\n        const mergeNodesContent = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((child) => {\r\n                let wrapper = child;\r\n                while (wrapper && wrapper.nodeType === 1) {\r\n                    wrapper = mergeNodeContect(wrapper);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n        let mergedStyles = false;\r\n        let mergedContent = false;\r\n        do {\r\n            element = _normalize(element);\r\n            if(element){\r\n                mergedStyles = mergeNodesStyles(element);\r\n                mergedContent = mergeNodesContent(element);\r\n            }\r\n           \r\n        } while (mergedContent && element);\r\n    }\r\n    el.normalize();\r\n    recurse(el);\r\n\r\n    function _normalize(element) {\r\n        element.normalize();\r\n        normalizeClassName(element);\r\n        normalizeStyle(element);\r\n        // \r\n            //  const tags = [\"STRIKE\", \"EM\", \"I\", \"B\", \"STRONG\", \"U\", \"A\"];\r\n\r\n        //TODO: normalizr attributes (no:style,className)\r\n        if (element && element.nodeName === \"SPAN\" && (!element.textContent.trim() || element.attributes.length === 0)) {\r\n            return null;\r\n        }\r\n        return element;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {Array} textNodes - textnode to remove the zero space like : u200B\r\n */\r\nexport function removeZeroSpace(textNodes) {\r\n    if (!Array.isArray(textNodes)) {\r\n        textNodes = [textNodes];\r\n    }\r\n    textNodes.forEach(el => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.parentElement && el.parentElement.nodeName !== \"TEXT-SELECTION\") {\r\n            el.textContent = el.textContent.replace(/\\u200B/g, '');\r\n        }\r\n    })\r\n}\r\nexport function getCleanText(text) {\r\n    return text.replace(/\\s/g, \"\").replace(/[\\u200B-\\u200D\\uFEFF]/g, '') \r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { UseRules } from \"../rules/rules\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\n\r\nexport function getInheirtCss(fromElement, toElement) {\r\n    var intailStyle = {};\r\n    var currectElement = fromElement;\r\n\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        let map = getStyle(currectElement);\r\n        for (const style in map) {\r\n            if (map.hasOwnProperty(style)) {\r\n                const value = map[style];\r\n                // text-decoration  could be twice like underline and strike therough.. \r\n                if (!intailStyle[style])\r\n                    intailStyle[style] = value;\r\n            }\r\n        }\r\n        currectElement = currectElement.parentElement;\r\n    }\r\n    return intailStyle;\r\n}\r\nexport function removeStyle(element, key, value) {\r\n    element.style[key] = element.style[key].replace(value, \"\");\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = el.style[key].replace(value, \"\");\r\n    })\r\n}\r\n//TOGGLE\r\nexport function toggleStyle(element, key, value, isOn) {\r\n    if (isOn) {\r\n        element.style[key] = element.style[key] + \" \" + value;\r\n    } else {\r\n        element.style[key] = element.style[key].replace(value, \"\");\r\n    }\r\n    normalizeStyle(element);\r\n    normalizeClassName(element);\r\n    Array.from(element.querySelectorAll(`[style*='${value}']`)).forEach(child => {\r\n        child.style[key] = child.style[key].replace(value, \"\");\r\n        normalizeStyle(child);\r\n        normalizeClassName(child);\r\n    })\r\n}\r\n//EXTEND\r\n//TODO: fix name\r\nexport function setStyles(element, jsonStyle) {\r\n    for (const key in jsonStyle) {\r\n        if (jsonStyle.hasOwnProperty(key)) {\r\n            const style = jsonStyle[key];\r\n            element.style[key] = style;\r\n        }\r\n    }\r\n}\r\n//TOGGLE\r\n//TODO: fix name\r\nexport function setStyle(element, key, value) {\r\n    element.style[key] = value;\r\n    if(key === \"color\"){\r\n        UseRules({element:element,key:'color',value:value});\r\n    }\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = null;\r\n        normalizeStyle(el);\r\n    });\r\n    //experimental: style the text decorations with color..\r\n    //TODO:review\r\n    // UseRules({element:element,key:key,value:value});\r\n}\r\nexport const collectStyleFromSelectedElement = (connectecElement) =>{   \r\n    const selectedElement = getSelectedElement();                \r\n    return getInheirtCss(selectedElement,connectecElement);\r\n}\r\n\r\nexport function normalizeStyle(element) {\r\n    if(!element) return null;\r\n    //TODO:review\r\n    const style = element.getAttribute('style');\r\n    if (!style) {\r\n        element.removeAttribute('style');\r\n    } else {\r\n        const collectStyles = getStyle(element);\r\n        for (const key in collectStyles) {\r\n            if (collectStyles.hasOwnProperty(key)) {\r\n                Array.from(element.querySelectorAll(`[style*='${collectStyles[key]}']`)).forEach(el => {\r\n                    el.style[key] = null;\r\n                    normalizeStyle(el);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function JsonObjectToStyleString(styles) {\r\n    let collectStyles = [];\r\n    for (const key in styles) {\r\n        if (styles.hasOwnProperty(key)) {\r\n            const style = styles[key];\r\n            collectStyles.push(`${key}:${style}`);\r\n        }\r\n    }\r\n    return collectStyles.join(';');\r\n}\r\nexport function getStyle(el) {\r\n    if (!el || !el.style) return {};\r\n    let styles = {};\r\n    let style = el.getAttribute('style');\r\n    if (style) {\r\n        let collectStyles = style.split(';');\r\n        if (Array.isArray(collectStyles)) {\r\n            collectStyles.forEach(style => {\r\n\r\n                const keyValue = style.split(':');\r\n                if (keyValue[1] && keyValue[0])\r\n                    styles[keyValue[0].trim()] = keyValue[1].trim();\r\n            })\r\n        }\r\n\r\n    }\r\n    return styles;\r\n}","import { setStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { splitHTML } from \"../utilis/splitHTML\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\n\r\n//TODO:review\r\nexport function UseRules(data) {\r\n    const ColorTextDecorationRule = (data) => {\r\n        if (data.key === \"color\") {\r\n            const textDecoration = data.element.closest(`[style*='text-decoration']`);\r\n            if (textDecoration) {\r\n                const splits = splitHTML(data.element, textDecoration);\r\n                if (splits) {\r\n                    normalizeStyle();\r\n                    setStyle(splits.center, 'text-decoration-color', `${data.value}`);\r\n                    for (const key in splits) {\r\n                        const element = splits[key];\r\n                        normalizeElement(element);\r\n                    }\r\n                } else {\r\n                    setStyle(textDecoration, 'text-decoration-color', `${data.value}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const Rules = [\r\n        ColorTextDecorationRule\r\n    ]\r\n    Rules.forEach(rule => rule(data));\r\n}","export const void_elements = {\r\n    \"BR\":\"BR\",\r\n    \"HR\":\"HR\",\r\n    \"IMG\":\"IMG\",\r\n    \"INPUT\":\"INPUT\",\r\n    \"AUDIO\":\"AUDIO\",\r\n    \"VIDEO\":\"VIDEO\",\r\n    \"PICTURE\":\"PICTURE\"\r\n}","import { getStyle, JsonObjectToStyleString } from \"./style.service\";\r\nimport Levels from '../constants/Levels.json';\r\nimport { void_elements } from \"../constants/void_elms\";\r\n\r\nexport function wrapNakedTextNodes(target){\r\n    // target is the main contenteditable element\r\n    // so \r\n    Array.from(target.childNodes).forEach(c=>{\r\n \r\n        if(c.nodeType ===1 && !c.textContent.trim() && c.children.length===0 && !void_elements[c.nodeName]){\r\n            c.parentNode.removeChild(c);\r\n        }\r\n        if(c.nodeType === 3 && c.parentElement){\r\n            c.parentElement.normalize();\r\n        }\r\n        if(((c.nodeType ===3 && c.parentElement === target)) && !c.parentElement.closest(\"p\") && c.textContent.trim()){\r\n            const p = document.createElement(\"p\");\r\n            c.wrap(p);\r\n        }\r\n    })\r\n}\r\nexport  function walkTheDOM(node, func) {\r\n    if(!node) return null;\r\n    func(node);\r\n    node = node.firstChild;\r\n    while (node) {\r\n      walkTheDOM(node, func);\r\n      node = node.nextSibling;\r\n    }\r\n  }\r\n  export  function walkOnElement(node, func) {\r\n    if(!node) return null;\r\n    const continueWith = func(node);\r\n    if(continueWith){\r\n        node = continueWith;\r\n    }\r\n    node = node.firstElementChild;\r\n    while (node) {\r\n        walkOnElement(node, func);\r\n      node = node.nextElementSibling;\r\n    }\r\n  } \r\nexport function getSelectedElement() {\r\n    var node = document.getSelection();\r\n    if (node) {\r\n        var ancNode = node.focusNode;\r\n        if (ancNode !== null) {\r\n            while (ancNode.nodeType === 3) {\r\n                ancNode = ancNode.parentNode;\r\n            }\r\n            // const el = (ancNode.nodeType === 3 ? ancNode.parentNode : node);\r\n            return ancNode;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexport function JsonToElement(jsonObject, parentElement) {\r\n    //TODO: create parentelement and jsonobject validation   \r\n    const renderAttrs = (jsElement, element) => {\r\n        if (jsElement.classList) {\r\n            element.classList = [...jsElement.classList];\r\n        }\r\n        if (jsElement.style) {\r\n            const collectedStyle = JsonObjectToStyleString(jsElement.style);\r\n            element.style = collectedStyle;\r\n        }\r\n        //TODO: other attrs...\r\n    }\r\n    const createHtmlElement = (jsElement) => {\r\n        const nodeType = jsElement.tag;\r\n        let element;\r\n        let isShouldRenderAttrs;\r\n        switch (nodeType) {\r\n            case \"#text\":\r\n                element = document.createTextNode(jsElement.textContent);\r\n                break;\r\n            case \"A\":\r\n                element = document.createElement(nodeType);\r\n                element.href = jsElement.href;\r\n                element.target = jsElement.target;\r\n                break;\r\n            default:\r\n                element = document.createElement(nodeType);\r\n                isShouldRenderAttrs = true;\r\n                break;\r\n        }\r\n        if (isShouldRenderAttrs && element) {\r\n            renderAttrs(jsElement, element);\r\n        }\r\n        return element;\r\n    }\r\n    if (!parentElement && jsonObject.type === Levels['0']) {\r\n        parentElement = createHtmlElement(jsonObject);\r\n    }\r\n    if (Array.isArray(jsonObject.children)) {\r\n        jsonObject.children.forEach(jsChild => {\r\n            const htmlElement = createHtmlElement(jsChild);\r\n            if (htmlElement) {\r\n                parentElement.appendChild(htmlElement);\r\n                JsonToElement(jsChild, htmlElement);\r\n            } else {\r\n                console.error('cant create dom element from json', jsChild);\r\n            }\r\n        });\r\n    }\r\n    return parentElement;\r\n}\r\nexport function elementToJson(node, level) {\r\n    \r\n    if (typeof (level) !== \"number\") level = 0;\r\n    const nodeType = node.nodeName;\r\n    let isShouldRenderAttrs = true;\r\n    let json = {};\r\n    let isValid = true;\r\n\r\n    if (Levels[level]) {\r\n        json.type = Levels[level];\r\n        level++;\r\n    }\r\n\r\n    switch (nodeType) {\r\n        case \"#text\":\r\n            json.tag = nodeType;\r\n            json.textContent = node.textContent.replace(/\\u200B/g, '');\r\n            isShouldRenderAttrs = false;\r\n            //question: replace \\n ?\r\n            if (!json.textContent.trim()) isValid = false;\r\n            break;\r\n        case \"A\":\r\n            json.tag = nodeType;\r\n            json.href = node.href;\r\n            json.target = node.target;\r\n            break;\r\n        default:\r\n            json.tag = nodeType;\r\n            //TODO: should we unwrap this node ? \r\n            break;\r\n    }\r\n    if (!isValid) return null;\r\n    if (isShouldRenderAttrs) {\r\n        //TODO: get attrs \r\n        const style = getStyle(node);\r\n        if (Object.keys(style).length > 0) {\r\n            json.style = style;\r\n        }\r\n        if (node.classList && node.classList.length > 0)\r\n            json.classList = [...node.classList];\r\n\r\n        if (node.childNodes && node.childNodes.length > 0)\r\n            json.children = [...node.childNodes].map((cn) => elementToJson(cn, level)).filter(v => v);\r\n    }\r\n\r\n    return json;\r\n\r\n}","import { block_elments } from \"../constants/block_elms\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\n\r\nexport function createInnerWrapperElement(element, options) {\r\n  if (typeof (options) !== \"object\") options = {};\r\n  let innerSpan = document.createElement(options.el || \"span\");\r\n  Array.from(element.childNodes).forEach(child => innerSpan.appendChild(child));\r\n  element.appendChild(innerSpan);\r\n  return innerSpan;\r\n}\r\nexport function GetClosestBlockElement(element) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n  if (element.nodeType !== 1) {\r\n    element = element.parentElement;\r\n  }\r\n  if (block_elments[element.nodeName]) return element;\r\n  let parentElement = element;\r\n  while (parentElement && window.getComputedStyle(parentElement).display === \"inline\") {\r\n    if (parentElement.parentElement) {\r\n      parentElement = parentElement.parentElement;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  if(parentElement  && block_elments[parentElement.nodeName]){\r\n    return parentElement;\r\n  }\r\n  return false;\r\n}\r\n//TODO:review\r\nexport function wrapRangeWithBlockElement(limitElement) {\r\n  const wrapElementWithBlock = (el) => {\r\n    let wEl = \"div\";\r\n    if (el.nodeName === \"SPAN\") {\r\n      wEl = \"p\";\r\n    }\r\n    const wrapper = document.createElement(wEl);\r\n    el.wrap(wrapper);\r\n    return wrapper;\r\n  }\r\n  const elements = [];\r\n  let nodes = wrapRangeWithElement();\r\n  nodes.forEach(el => {\r\n    const blockEl = GetClosestBlockElement(el);\r\n    if (blockEl) {\r\n      if (blockEl.ischildOf(limitElement)) {\r\n        const founded = elements.find(block => blockEl.ischildOf(block));\r\n        if (!founded)\r\n          elements.push(blockEl);\r\n      } else {\r\n        const _wrapper = wrapElementWithBlock(el);\r\n        elements.push(_wrapper);\r\n      }\r\n    } else {\r\n      const _wrapper = wrapElementWithBlock(el);\r\n      elements.push(_wrapper);\r\n\r\n    }\r\n  });\r\n  return {\r\n    nodes: nodes,\r\n    blocks: elements\r\n  }\r\n  return elements;\r\n}\r\nexport function wrapRangeWithElement(wrapTag) {\r\n  const ranges = getRanges();\r\n  return ranges.map(r => {\r\n    return wrapRangeText(wrapTag, r);\r\n  }).flat();\r\n}\r\nexport function getRanges() {\r\n  let ranges = [];\r\n\r\n  const sel = window.getSelection();\r\n\r\n  for (let i = 0; i < sel.rangeCount; i++) {\r\n    ranges[i] = sel.getRangeAt(i);\r\n  }\r\n  return ranges;\r\n}\r\n// return all text nodes that are contained within `el`\r\nexport function getTextNodes(el) {\r\n  el = el || document.body\r\n\r\n  var doc = el.ownerDocument || document,\r\n    walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false),\r\n    textNodes = [],\r\n    node = walker.nextNode();\r\n\r\n  while (node) {\r\n    textNodes.push(node);\r\n    node = walker.nextNode();\r\n  }\r\n  return textNodes\r\n}\r\nexport function rangesIntersect(rangeA, rangeB) {\r\n  return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 &&\r\n    rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1\r\n}\r\nexport function createRangeFromNode(node) {\r\n  var range = node.ownerDocument.createRange()\r\n  try {\r\n    range.selectNode(node)\r\n  } catch (e) {\r\n    range.selectNodeContents(node)\r\n  }\r\n  return range\r\n}\r\nexport function getCaretCharacterOffsetWithin(element) {\r\n  var caretOffset = 0;\r\n  var doc = element.ownerDocument || element.document;\r\n  var win = doc.defaultView || doc.parentWindow;\r\n  var sel;\r\n  if (typeof win.getSelection != \"undefined\") {\r\n    sel = win.getSelection();\r\n    if (sel.rangeCount > 0) {\r\n      var range = win.getSelection().getRangeAt(0);\r\n      var preCaretRange = range.cloneRange();\r\n      preCaretRange.selectNodeContents(element);\r\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n      caretOffset = preCaretRange.toString().length;\r\n    }\r\n  } else if ((sel = doc.selection) && sel.type != \"Control\") {\r\n    var textRange = sel.createRange();\r\n    var preCaretTextRange = doc.body.createTextRange();\r\n    preCaretTextRange.moveToElementText(element);\r\n    preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\r\n    caretOffset = preCaretTextRange.text.length;\r\n  }\r\n  return caretOffset;\r\n}\r\nexport function setCaretAt(element, charIndex = 0) {\r\n\r\n  var node = element;\r\n  node.focus();\r\n  var textNode = Array.from(node.childNodes).filter(child => child.nodeType === Node.TEXT_NODE);\r\n  if (textNode.length === 0) {\r\n    textNode = element;\r\n    while (textNode && textNode.firstChild && textNode.nodeType !== 3) {\r\n      textNode = textNode.firstChild;\r\n    }\r\n    if(textNode){\r\n      textNode = [textNode];\r\n    }\r\n  }\r\n\r\n  var range = document.createRange();\r\n  range.setStart(textNode[0], charIndex);\r\n  range.setEnd(textNode[0], charIndex);\r\n  range.collapse(true)\r\n  var sel = window.getSelection();\r\n  sel.removeAllRanges();\r\n  sel.addRange(range);\r\n\r\n}\r\nexport function pasteHtmlAtCaret(html) {\r\n  const selectedElement = getSelectedElement();\r\n  const contenteditable = selectedElement.closest(\"[contenteditable]\");\r\n  let isValid = true;\r\n  if (contenteditable) {\r\n    if (!contenteditable.contentEditable) {\r\n      isValid = false;\r\n    }\r\n  } else {\r\n    isValid = false;\r\n  }\r\n  if (!isValid) {\r\n    return null;\r\n  }\r\n  var sel, range;\r\n  if (window.getSelection) {\r\n    // IE9 and non-IE\r\n    sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      range = sel.getRangeAt(0);\r\n      range.deleteContents();\r\n\r\n      // Range.createContextualFragment() would be useful here but is\r\n      // only relatively rece ntly standardized and is not supported in\r\n      // some browsers (IE9, for one)\r\n      let el;\r\n      if (typeof (html) === \"string\") {\r\n        el = document.createElement(\"div\");\r\n        el.innerHTML = html;\r\n        var frag = document.createDocumentFragment(), node, lastNode;\r\n        while ((node = el.firstChild)) {\r\n          lastNode = frag.appendChild(node);\r\n        }\r\n        range.insertNode(frag);\r\n      }\r\n      else if (typeof (html) === \"object\") {\r\n        range.insertNode(html);\r\n\r\n      }\r\n\r\n    \r\n\r\n      // Preserve the selection\r\n      if (lastNode) {\r\n        range = range.cloneRange();\r\n        range.setStartAfter(lastNode);\r\n        range.collapse(true);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function rangeIntersectsNode(range, node) {\r\n  if (range.intersectsNode) {\r\n    return range.intersectsNode(node)\r\n  } else {\r\n    return rangesIntersect(range, createRangeFromNode(node))\r\n  }\r\n}\r\nexport function getRangeTextNodes(range) {\r\n  var container = range.commonAncestorContainer,\r\n    nodes = getTextNodes(container.parentNode || container)\r\n\r\n  return nodes.filter((node) => {\r\n    return rangeIntersectsNode(range, node) && isNonEmptyTextNode(node)\r\n  })\r\n}\r\nexport function isNonEmptyTextNode(node) {\r\n  return node.textContent.length > 0\r\n}\r\nexport function removeElement(el) {\r\n  if (el.parentNode) {\r\n    el.parentNode.removeChild(el)\r\n  }\r\n}\r\nexport function replaceNode(replacementNode, node) {\r\n  if (typeof node.parentNode !== \"undefined\") {\r\n    removeElement(replacementNode);\r\n    node.parentNode.insertBefore(replacementNode, node);\r\n    removeElement(node);\r\n  }\r\n}\r\nexport function selectText(node) {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(node);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(node);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } else {\r\n    console.warn(\"Could not select text in node: Unsupported browser.\");\r\n  }\r\n}\r\nexport function insertAfter(newNode, referenceNode) {\r\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n}\r\nexport function createWrapperFunction(wrapperEl, range) {\r\n  var startNode = range.startContainer,\r\n    endNode = range.endContainer,\r\n    startOffset = range.startOffset,\r\n    endOffset = range.endOffset\r\n\r\n  return function wrapNode(node) {\r\n    var currentRange = document.createRange(),\r\n      currentWrapper = wrapperEl.cloneNode()\r\n\r\n    currentRange.selectNodeContents(node);\r\n    if (node === startNode && startNode.nodeType === 3) {\r\n      currentRange.setStart(node, startOffset)\r\n      startNode = currentWrapper\r\n      startOffset = 0\r\n    }\r\n    if (node === endNode && endNode.nodeType === 3) {\r\n      currentRange.setEnd(node, endOffset)\r\n      endNode = currentWrapper;\r\n      endOffset = 1\r\n    }\r\n    currentRange.surroundContents(currentWrapper)\r\n    return currentWrapper\r\n  }\r\n}\r\nexport const querySelectorUnderSelection = (querySelector) => {\r\n  var selection = window.getSelection();\r\n  var range = selection.getRangeAt(0);\r\n  const elements = range.commonAncestorContainer.querySelectorAll(querySelector);\r\n  const allSelected = [];\r\n  for (var i = 0, el; el = elements[i]; i++) {\r\n    // The second parameter says to include the element \r\n    // even if it's not fully selected\r\n    if (selection.containsNode(el, true)) {\r\n        allSelected.push(el);\r\n    }\r\n}\r\nreturn allSelected;\r\n}\r\nexport function getAllNodes() {\r\n  var nodes, range;\r\n  if (typeof range === 'undefined') {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n  nodes = getRangeTextNodes(range)\r\n  nodes = nodes.map(node => {\r\n    if (node !== null) {\r\n      while (node.nodeType === 3) {\r\n        node = node.parentNode;\r\n      }\r\n      return node;\r\n    }\r\n    return null;\r\n  });\r\n  return nodes\r\n}\r\nexport function wrapRangeText(wrapperEl, range) {\r\n  var nodes, wrapNode;\r\n\r\n  if (typeof range === 'undefined') {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n\r\n  if (typeof wrapperEl === 'undefined') {\r\n    wrapperEl = 'span'\r\n  }\r\n\r\n  if (typeof wrapperEl === 'string') {\r\n    // assume it's a tagname\r\n    wrapperEl = document.createElement(wrapperEl);\r\n  }\r\n\r\n  wrapNode = createWrapperFunction(wrapperEl, range)\r\n\r\n  nodes = getRangeTextNodes(range)\r\n\r\n  nodes = nodes.map(wrapNode);\r\n  return nodes\r\n}\r\nexport function setSelectionBetweenTwoNodes(firstFlag, lastFlag, options = {}) {\r\n  const _options = { remove: true };\r\n  Object.assign(_options, options);\r\n  document.getSelection().setBaseAndExtent(firstFlag, 0, lastFlag, lastFlag.childNodes.length);\r\n  if (_options.remove) {\r\n    [firstFlag, lastFlag].forEach(e => e.unwrap());\r\n  }\r\n}\r\nexport function setSelectionFlags(firstElement, LastElement) {\r\n  const selection = window.getSelection();\r\n  const firstFlag = document.createElement('text-selection');\r\n  firstFlag.setAttribute('zero-space', firstElement.textContent.length === 0)\r\n  const lastFlag = document.createElement('text-selection');\r\n  lastFlag.setAttribute('zero-space', LastElement.textContent.length === 0)\r\n\r\n  firstElement.prepend(firstFlag); //Set flag the first\r\n  LastElement.appendChild(lastFlag); //Set Flag at last\r\n  return { firstFlag, lastFlag };\r\n}\r\nexport function getSelectedHTML() {\r\n  var range;\r\n  if (window.getSelection) {\r\n    var selection = window.getSelection();\r\n    if (selection.focusNode === null) return;\r\n    range = selection.getRangeAt(0);\r\n    if (range.collapsed) {\r\n      return;\r\n    }\r\n    var content = range.extractContents();\r\n    return {\r\n      content: content,\r\n      range: range\r\n    }\r\n  }\r\n}\r\nexport function saveSelection() {\r\n  if (window.getSelection) {\r\n    var sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      return sel.getRangeAt(0);\r\n    }\r\n  } else if (document.selection && document.selection.createRange) {\r\n    return document.selection.createRange();\r\n  }\r\n  return null;\r\n};\r\nexport function restoreSelection(range) {\r\n  if (range) {\r\n    if (window.getSelection) {\r\n      var sel = window.getSelection();\r\n      sel.removeAllRanges();\r\n      sel.addRange(range);\r\n    } else if (document.selection && range.select) {\r\n      range.select();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { block_elments } from \"../../constants/block_elms\";\r\nimport { void_elements } from \"../../constants/void_elms\";\r\nimport { splitHTML } from \"../../utilis/splitHTML\";\r\nimport { pasteHtmlAtCaret, setCaretAt } from \"../range.service\";\r\nimport { getInheirtCss, setStyles } from \"../style.service\";\r\nimport { getCleanText, normalizeElement } from \"../textEditor.service\";\r\n\r\n\r\nexport default class CopyPaste {\r\n\r\n  constructor(target, options) {\r\n    this.target = target;\r\n    this.stylesToPaste = typeof options.stylesToPaste === \"object\" ? options.stylesToPaste : null;\r\n    this.paste = this.paste.bind(this);\r\n    this.copy = this.copy.bind(this);\r\n    this.start();\r\n  }\r\n\r\n  copy(event) {\r\n    let html = \"\";\r\n    if (typeof window.getSelection) {\r\n      var sel = window.getSelection();\r\n      if (sel.rangeCount) {\r\n        const container = document.createElement(\"div\");\r\n        for (var i = 0, len = sel.rangeCount; i < len; ++i) {\r\n          let copiedNode = sel.getRangeAt(i).cloneContents();\r\n          container.appendChild(copiedNode);\r\n\r\n          Array.from(container.childNodes).forEach(n => {\r\n            if (n.nodeType === 3) {\r\n              const parentCopiedNode = sel.getRangeAt(i).startContainer.parentNode;\r\n              const collectedCSS = getInheirtCss(parentCopiedNode, this.target);\r\n              const span = document.createElement(\"span\");\r\n              span.textContent = copiedNode.textContent;\r\n              debugger\r\n              setStyles(span, collectedCSS);\r\n              n.wrap(span);\r\n\r\n            } else if (void_elements[n.nodeName] && n.nodeName !== \"BR\") {\r\n              n.parentElement.removeChild(n);\r\n            }\r\n          })\r\n\r\n        }\r\n        html = container;\r\n      }\r\n    } else if (typeof document.selection) {\r\n      if (document.selection.type === \"Text\") {\r\n        html = document.selection.createRange().htmlText;\r\n      }\r\n    }\r\n    event.preventDefault();\r\n    event.clipboardData.setData('styleit/html', html.innerHTML);\r\n    event.clipboardData.setData('text/plain', html.textContent);\r\n  }\r\n  paste(event) {\r\n    const isShifted = event.shiftKey;\r\n    if (isShifted) {\r\n      this.pastePlainText(event);\r\n    } else {\r\n      this.pasteWithStyles(event);\r\n    }\r\n\r\n  };\r\n\r\n  pastePlainText(event) {\r\n    const data = event.clipboardData || window.clipboardData;\r\n    event.preventDefault();\r\n    let copied = data.getData('text/plain').trim();\r\n    copied = copied.replace(/\\n/g, \"<br/>\")\r\n    if (!copied.trim()) {\r\n      return;\r\n    }\r\n    const p = document.createElement(\"p\");\r\n    p.innerHTML = copied;\r\n\r\n    pasteHtmlAtCaret(p);\r\n    setCaretAt(p);\r\n\r\n    if (p.parentElement !== this.target) {\r\n      p.unwrap();\r\n\r\n    }\r\n    Array.from(this.target.children).forEach(child => {\r\n      if (!child.textContent.trim()) {\r\n        this.target.removeChild(child);\r\n      }\r\n    })\r\n  }\r\n  pasteWithStyles(event) {\r\n    event.preventDefault();\r\n    const data = event.clipboardData || window.clipboardData;\r\n    const copied = data.getData('styleit/html').trim();\r\n    //on copied on the editor localy\r\n    if (copied) {\r\n      const pastedContainer = document.createElement(\"div\");\r\n      pastedContainer.innerHTML = copied;\r\n      pasteHtmlAtCaret(pastedContainer);\r\n      Array.from(pastedContainer.children).forEach(child => {\r\n        if (!getCleanText(child.textContent) && !void_elements[child.nodeName]) {\r\n          child.parentElement.removeChild(child);\r\n        }\r\n      });\r\n      Array.from(pastedContainer.children).forEach(child => {\r\n        const sameNode = child.parentElement.closest(\"h1,h2,h3,h4,h5,h6,p\");\r\n        if (sameNode && block_elments[child.nodeName] && getCleanText(sameNode.textContent) === getCleanText(pastedContainer.textContent)) {\r\n          sameNode.parentElement.insertBefore(child, sameNode);\r\n        }\r\n        else if (child.nodeType === 1 && block_elments[child.nodeName] && sameNode) {\r\n          if (pastedContainer.children.length > 1) {\r\n            child.insertAfter(document.createElement(\"BR\"));\r\n          }\r\n          child.unwrap();\r\n        }\r\n        else if (!getCleanText(child.textContent)) {\r\n          child.unwrap();\r\n        }\r\n      });\r\n      const block = pastedContainer.closest(\"h1,h2,h3,h4,h5,h6,p\");\r\n      if (block) {\r\n        const parts = splitHTML(pastedContainer, block, { tag: block.nodeName });\r\n        if (parts) {\r\n          parts.left.appendChild(parts.center);\r\n          parts.center.appendChild(parts.right);\r\n          parts.right.unwrap();\r\n          parts.center.unwrap();\r\n        }\r\n      }\r\n      normalizeElement(this.target);\r\n      setCaretAt(pastedContainer);\r\n      pastedContainer.unwrap();\r\n    } else {\r\n      this.pastePlainText(event);\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.target.addEventListener(\"paste\", this.paste);\r\n    this.target.addEventListener(\"copy\", this.copy);\r\n  }\r\n  destroy() {\r\n    this.target.removeEventListener(\"paste\", this.paste);\r\n    this.target.removeEventListener(\"copy\", this.copy);\r\n\r\n  }\r\n}\r\n\r\n","export const EVENTS = {\r\n  \r\n}","export   const TARGETS = {\r\n    _blank: \"_blank\",\r\n    _self: \"_self\",\r\n    _parent: \"_parent\",\r\n    _top: \"_top\"\r\n}\r\nexport  const resetURL = (src) => {\r\n    src = src.replace(/https:/g, '');\r\n    src = src.replace(/http:/g, '');\r\n    src = src.replace(/mailto:/g, '');\r\n    src = src.replace(/tel:/g, '');\r\n    src = src.replace(/\\//g, '');\r\n    return src;\r\n}\r\nexport   const createTempLinkElement = (href) => {\r\n    const Atag = document.createElement(\"a\");\r\n    Atag.href = href;\r\n    return Atag;\r\n}","\r\nimport { collectStyleFromSelectedElement } from '../style.service';\r\nimport { EVENTS } from '../events/events';\r\nimport { getSelectedElement } from '../elements.service';\r\nimport { resetURL } from '../link.service';\r\n\r\n//TODO: review\r\n//question: how can we expose the collectedStyle ? \r\n//question: should we use this ? https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\nexport default class Inpsector {\r\n    constructor(target, onInspect) {\r\n\r\n        if (!target) {\r\n            console.error('[-] Inpsector => target is null');\r\n            return null;\r\n        }\r\n        //TODO: use the validator\r\n        this.onInspect = onInspect;\r\n        this.target = target;\r\n\r\n        const launchInspect = () => {\r\n            const collectedStyle = collectStyleFromSelectedElement(this.target);\r\n            if (typeof (this.onInspect) === \"function\")\r\n                this.onInspect(collectedStyle);\r\n            if (typeof (EVENTS[\"inspect\"]) === \"function\") {\r\n                EVENTS[\"inspect\"](collectedStyle);\r\n            }\r\n            const selectedElement = getSelectedElement();\r\n            \r\n            if(selectedElement ){\r\n                const aTag = selectedElement.closest(\"a\");\r\n                if(aTag){\r\n                    if(typeof(EVENTS[\"inspectLink\"]) === \"function\"){\r\n                        EVENTS[\"inspectLink\"]({\r\n                            protocol:aTag.protocol,\r\n                            href:resetURL(aTag.href),\r\n                            target:aTag.getAttribute(\"target\") || \"\",\r\n                            element:aTag\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        this.onKeyDown = (e) => {\r\n            //TODO: review\r\n            if (e.keyCode === 8 && this.target.children.length <= 1 && !this.target.textContent) {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            launchInspect();\r\n        }\r\n        this.onClick = () => {\r\n            launchInspect();\r\n        }\r\n\r\n        this.target.addEventListener('click', this.onClick);\r\n        this.target.addEventListener('keydown', this.onKeyDown);\r\n\r\n        this.Destroy = () => {\r\n            this.target.removeEventListener('click', this.onClick);\r\n            this.target.removeEventListener('keydown', this.onKeyDown);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","import { wrapNakedTextNodes } from \"../elements.service\";\r\nimport { GetClosestBlockElement, insertAfter, pasteHtmlAtCaret, setCaretAt } from \"../range.service\";\r\nimport {void_elements} from '../../constants/void_elms';\r\nimport { getCleanText } from \"../textEditor.service\";\r\nexport default class KeyPress {\r\n\r\n    constructor(target, options = {}) {\r\n        if (!target) {\r\n            console.error('[-] keyPress => target is null');\r\n            return null;\r\n        }\r\n        if (typeof options.onKeyPress === \"function\") {\r\n            this.onKeyPress = options.onKeyPress;\r\n        }\r\n        this.target = target;\r\n\r\n\r\n        this.keypress = (e) => {\r\n            if (e.keyCode === 8) {\r\n                const target = e.target;\r\n                if (getCleanText(target.textContent) === \"\") {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n            else if (e.keyCode === 13) {\r\n                if (e.shiftKey) {\r\n                    pasteHtmlAtCaret(\"<br></br>\");\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                const range = document.createRange();\r\n                const selection = window.getSelection();\r\n                var blockElement = GetClosestBlockElement(selection.anchorNode);\r\n\r\n                if (blockElement === this.target || !blockElement) {\r\n                    return false\r\n                }\r\n                const range2extract = selection.getRangeAt(0);\r\n                range2extract.extractContents();\r\n                range.setStart(selection.anchorNode, selection.anchorOffset);\r\n                range.setEnd(blockElement, blockElement.childNodes.length);\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n                if (selection.isCollapsed) {\r\n                    if (blockElement && !this.target.textContent.trim()) {\r\n                        if (blockElement !== this.target) {\r\n                            Array.from(this.target.children).forEach(c => {\r\n                                if (c !== blockElement && !c.textContent.trim()) {\r\n                                    c.unwrap();\r\n                                }\r\n                            })\r\n                            blockElement.innerHTML = blockElement.innerHTML + \"&#8203;\";\r\n                            setCaretAt(blockElement);\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                    return false;\r\n                } else {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                const docFragment = range.extractContents();\r\n                Array.from(docFragment.children).forEach(child => {\r\n                    if (child.nodeType === 1 && !child.textContent.trim() && !void_elements[child.nodeName]) {\r\n                        child.unwrap();\r\n                    }\r\n                });\r\n\r\n                const el = document.createElement(blockElement.nodeName || \"p\");\r\n                el.appendChild(docFragment);\r\n                if (!el.textContent.trim()) {\r\n                    el.innerHTML = \"&#8203;\";\r\n                }\r\n                insertAfter(el, blockElement);\r\n                Array.from(el.previousSibling.attributes).forEach(attr=>{\r\n                    el.setAttribute(attr.name,attr.value);\r\n                })\r\n               \r\n                const br = document.createElement(\"br\");\r\n                blockElement.appendChild(br);\r\n\r\n\r\n                selection.removeAllRanges();\r\n                wrapNakedTextNodes(this.target, { expect: blockElement });\r\n                setCaretAt(el, 0);\r\n            }\r\n            else if (typeof this.onKeyPress === \"function\") {\r\n                this.onKeyPress(e);\r\n            }\r\n        }\r\n\r\n\r\n        this.target.addEventListener('keydown', this.keypress);\r\n\r\n        this.Destroy = () => {\r\n            this.target.removeEventListener('keydown', this.keypress);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","import DomUtilis from \"./utilis/DomUtilis\";\r\nimport CopyPaste from \"./services/copyPaste/copyPaste.service\";\r\nimport Inpsector from \"./services/Inspector/Inspector.service\";\r\nimport KeyPress from \"./services/keyPress/KeyPress\";\r\n\r\nimport { elementToJson, JsonToElement, wrapNakedTextNodes } from \"./services/elements.service\";\r\n\r\n//TODO:review\r\nexport default class Connector {\r\n    constructor() {\r\n    }\r\n\r\n    Connect(element, options) {\r\n        if (typeof element === \"string\") {\r\n            element = document.getElementById(element);\r\n            if (!element) {\r\n                //TODO: use the validator\r\n                console.error('[-] =>connectWith should be element id or dom element..');\r\n                return null;\r\n            }\r\n        } else if (DomUtilis.isElement(element)) {\r\n            // valid..\r\n        } else {\r\n            //TODO: use the validator\r\n            console.error('[-] =>connectWith should be element id or dom element..');\r\n            return null;\r\n        }\r\n        const RenderInnerHTML = (element) => {\r\n            const emptyElement = (node) => {\r\n                return new Promise((resolve) => {\r\n                    while (node.firstElementChild) {\r\n                        node.firstElementChild.remove();\r\n                    }\r\n                    resolve();\r\n                })\r\n            }\r\n            wrapNakedTextNodes(element);\r\n\r\n            const jsonContent = elementToJson(element);\r\n\r\n            const renderedElement = JsonToElement(jsonContent);\r\n\r\n            emptyElement(element).then(() => element.innerHTML = renderedElement.innerHTML);\r\n        }\r\n        const usePlugins = (element, options) => {\r\n            return {\r\n                copyPaste: new CopyPaste(element, options),\r\n                inspector: new Inpsector(element, options.onInspect),\r\n                keyPress: new KeyPress(element, options)\r\n            }\r\n        }\r\n        RenderInnerHTML(element);\r\n        // element.contentEditable = 'true';\r\n        this.plugins = usePlugins(element, options);\r\n        return element;\r\n    }\r\n    //TODO: destory events..\r\n    //question: how to use the events ? \r\n\r\n\r\n    Destroy() {\r\n        for (const key in this.plugins) {\r\n            if (this.plugins.hasOwnProperty(key)) {\r\n                const plugin = this.plugins[key];\r\n                plugin.Destroy();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    wrapRangeWithElement,\r\n    setSelectionFlags,\r\n    setSelectionBetweenTwoNodes,\r\n    getTextNodes,\r\n    createInnerWrapperElement,\r\n    setCaretAt,\r\n    GetClosestBlockElement\r\n} from \"./services/range.service\";\r\nimport Modes from './constants/Modes.json';\r\nimport { splitHTML } from \"./utilis/splitHTML\";\r\nimport { setStyle, toggleStyle, collectStyleFromSelectedElement } from \"./services/style.service\";\r\nimport { normalizeElement, removeZeroSpace } from \"./services/textEditor.service\";\r\nimport Connector from './connector';\r\nimport './components/custom/textSelected';\r\nimport { elementToJson, JsonToElement, getSelectedElement } from \"./services/elements.service\";\r\nimport {EVENTS} from './services/events/events';\r\nimport { createTempLinkElement, resetURL,TARGETS } from \"./services/link.service\";\r\nimport { void_elements } from \"./constants/void_elms\";\r\nimport { block_elments } from \"./constants/block_elms\";\r\n\r\nexport default class Core {\r\n\r\n    // *target => can be Id of Element that should contain Editor instance or the element itself..\r\n    // *config =>  configuration passed t   o Tool constructor\r\n    //TODO: add target validations..;\r\n    constructor(target, config) {\r\n        this.__config = {\r\n            onInspect: undefined,\r\n        };\r\n        \r\n        this.on = (key,callback)=>{\r\n            if(typeof(key) !== \"string\"){\r\n                console.error(\"key must be a string..\");\r\n            }\r\n            if(typeof(callback) !== \"function\"){\r\n                console.error(\"callback must be a function..\");\r\n            }\r\n            EVENTS[key]  = callback;\r\n        };\r\n        this.Connector = new Connector();\r\n        this.modeHandlers = {\r\n            [Modes.Toggle]: (v, key, value, options) => this.onToggle(v, key, value, options),\r\n            [Modes.Extend]: (v, key, value, options) => this.onExtend(v, key, value, options),\r\n        }\r\n        this.config = config ? Object.assign(this.__config, config) : this.__config;\r\n        this.events = {\r\n            styleChanged: this.config.onInspect,\r\n        }\r\n        this.connectedElement = this.Connector.Connect(target, this.config);\r\n    }\r\n    save() {\r\n        return elementToJson(this.connectedElement);\r\n    }\r\n    load(json) {\r\n        return JsonToElement(json, this.connectedElement);\r\n    }\r\n    destroy() {\r\n        this.Connector.Destroy();\r\n        const self = this;\r\n        for (const key in self) {\r\n            this[key] = null;\r\n            delete this[key];\r\n        }\r\n    }\r\n    //TODO: review.\r\n    //TODO: Create normalize..\r\n    //question: if text was selected, should we unwrap the selectiion only ? \r\n    unLink() {\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        const selection = window.getSelection();\r\n\r\n        if (selection && !selection.toString()) {\r\n            let elementToUnwrap;\r\n            const baseNode = selection.baseNode;\r\n            if (baseNode && baseNode.nodeType === 3 && baseNode.parentElement) {\r\n                elementToUnwrap = baseNode.parentElement;\r\n            }\r\n            if (baseNode && baseNode.nodeType === 1) {\r\n                elementToUnwrap = elementToUnwrap.closest(\"a\");\r\n            }\r\n            if (elementToUnwrap) {\r\n                elementToUnwrap.unwrap();\r\n            }\r\n            return null;\r\n        }\r\n        const linkElements = wrapRangeWithElement();\r\n        Array.from(linkElements).forEach(r => {\r\n            const closestATag = r.closest(\"a\");\r\n            if (closestATag) {\r\n                var a = splitHTML(r, closestATag, {\r\n                    tag: \"a\"\r\n                })\r\n                if (a) {\r\n                    a.center.unwrap();\r\n                }\r\n            }\r\n            Array.from(r.querySelectorAll(\"a\")).forEach(a => {\r\n                a.unwrap();\r\n            });\r\n            r.unwrap();\r\n        });\r\n        const { firstFlag, lastFlag } = setSelectionFlags(linkElements[0], linkElements[linkElements.length - 1]); //Set Flag at last\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n    }\r\n    //TODO: review\r\n    //TODO: merge a tags..\r\n    //TODO: remove a childs\r\n    //TODO: move function to Link.service.js\r\n    link(options = {}) {\r\n        if (!options || (options && !options.href) ||  !this.isValid()) {\r\n            return;\r\n        }\r\n     \r\n        if (window.getSelection && !window.getSelection().toString()) {\r\n            console.warn(\"no text selected..\");\r\n            return null;\r\n        }\r\n        const unwrapAtags = (linkElements) => {\r\n            linkElements.forEach(link => {\r\n                Array.from(link.querySelectorAll(\"a\")).forEach(aTag => aTag.unwrap());\r\n                const closestATag = link.parentElement ? link.parentElement.closest(\"a\") : null;\r\n                if (closestATag) {\r\n                    var a = splitHTML(link, closestATag, {\r\n                        tag: \"a\"\r\n                    });\r\n                    if (a) {\r\n                        a.center.unwrap();\r\n                    }\r\n                    // closestATag.unwrap();\r\n                }\r\n            });\r\n        }\r\n        const setTargetToTag = (linkElements, renderedLink, _target) => {\r\n            linkElements.forEach(aTag => {\r\n                aTag.href = renderedLink;\r\n                if (_target) {\r\n                    aTag.setAttribute(\"target\", _target);\r\n                }\r\n            });\r\n        }\r\n        const setProtocol = (_protocol, newURL) => {\r\n            _protocol = _protocol.replace(/:/g, \"\");\r\n            _protocol = _protocol.replace(/\\/\\//g, \"\");\r\n            _protocol += \":\";\r\n            if (_protocol.includes(\"http\")) {\r\n                _protocol += \"//\";\r\n            } else {\r\n            }\r\n            newURL.push(_protocol);\r\n            return _protocol;\r\n        }\r\n    \r\n\r\n        const { href = \"\", protocol = \"\", target = \"\" } = options;\r\n\r\n        const linkElements = wrapRangeWithElement(\"a\");\r\n        let newURL = [];\r\n        const Atag = createTempLinkElement(href);\r\n        let _href = resetURL(href.trim());\r\n\r\n        let _protocol = protocol.trim() || Atag.protocol;\r\n        let _target = null;\r\n        const testTarget = TARGETS[target.trim().toLowerCase()];\r\n        if (testTarget) {\r\n            _target = testTarget;\r\n        }\r\n        if (_protocol.trim()) {\r\n            _protocol = setProtocol(_protocol, newURL);\r\n        }\r\n        if (_href) {\r\n            newURL.push(_href);\r\n        }\r\n        const renderedLink = newURL.join(\"\");\r\n        unwrapAtags(linkElements);\r\n        setTargetToTag(linkElements, renderedLink, _target);\r\n        const { firstFlag, lastFlag } = setSelectionFlags(linkElements[0], linkElements[linkElements.length - 1]); //Set Flag at last\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        \r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible.. \r\n    }\r\n    //TODO: review\r\n    //question : we want to handle and toggle any attribute ? \r\n    toggleClass(className, options) {\r\n        //here\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        if (typeof (className) !== \"string\") {\r\n            console.warn(\"className must be a string..\");\r\n            return null;\r\n        }\r\n\r\n        const elements = wrapRangeWithElement();\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n        if (!options) options = {};\r\n        if (typeof (options.selection) !== \"boolean\") options.selection = true;\r\n        const isToggleOn = (typeof (options.isON) === \"boolean\") ? options.isON : elements[0].closest(`[class='${className}']`);\r\n        if (!isToggleOn) {\r\n            elements.forEach(el => el.classList.add(className));\r\n        } else {\r\n            elements.forEach(el => {\r\n                if (el.parentElement) {\r\n                    const closestClass = el.parentElement.closest(`[class='${className}']`);\r\n                    if (closestClass) {\r\n                        const split = splitHTML(el, closestClass);\r\n                        if (split) {\r\n                            split.center.removeClassName(className);\r\n                        }\r\n                    }\r\n                } else {\r\n                    el.removeClassName(className);\r\n                }\r\n            })\r\n        }\r\n        const { firstFlag, lastFlag } = options.selection ? setSelectionFlags(elements[0], elements[elements.length - 1]) : { firstFlag: null, lastFlag: null }; //Set Flag at last\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible..\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * @param {String} key - key of css \r\n    *  @param {String} value - value of css\r\n    *  @param {(Object | String)} Modes - mode from Modes => Extend or Toggle\r\n    *  @param {string} Modes.Extend - override style\r\n    *  @param {string} Modes.toggle - toggle style\r\n    *  @param {Object} [options] - options \r\n    */\r\n    execCmd(key, value, mode, options) {\r\n        if (!this.isValid() || !this.isVAlidKeyValue(key, value)) {\r\n            return;\r\n        }\r\n        this.connectedElement.normalize();\r\n        this.ELEMENTS = [];\r\n        mode = mode ? mode : Modes.Extend;\r\n        if (!options) options = {};\r\n        if (typeof (options.selection) !== \"boolean\") options.selection = true;\r\n   \r\n\r\n        //==============review===============//\r\n        this.ELEMENTS = wrapRangeWithElement();\r\n        if (!options.selection) {\r\n            const lastNode = this.ELEMENTS[this.ELEMENTS.length - 1];\r\n            if (lastNode)\r\n                this.caretHolder = this.createCaretPlacement(lastNode);\r\n        }\r\n\r\n        if (options.unWrap && Array.isArray(options.unWrap)) {\r\n            options.unWrap.forEach(selector => {\r\n                this.ELEMENTS.forEach(txtNode => {\r\n                    const closestElementToUnWrap = txtNode.closest(selector);\r\n                    if (closestElementToUnWrap) {\r\n                        closestElementToUnWrap.unwrap();\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        //This is how i make the text selection, i dont know if this is good way, but it works..\r\n        const { firstFlag, lastFlag } = options.selection ? setSelectionFlags(this.ELEMENTS[0], this.ELEMENTS[this.ELEMENTS.length - 1]) : { firstFlag: null, lastFlag: null }; //Set Flag at last\r\n        //======================================================================//\r\n        removeZeroSpace(getTextNodes(this.connectedElement));\r\n\r\n        let ToggleMode;//Declare toggle mode, The first element determines whether it is on or off\r\n\r\n        this.ELEMENTS.forEach((element, i) => {\r\n            options.onOff = ToggleMode;\r\n            const result = this.modeHandlers[mode](element, key, value, options);\r\n            if (mode === Modes.Toggle && typeof (ToggleMode) === 'undefined')\r\n                ToggleMode = result;\r\n        });\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible.. \r\n        //use the first and last flags to make the text selection and unwrap them..\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n            if (this.caretHolder) {\r\n                setCaretAt(this.caretHolder, this.caretHolder.textContent.length);\r\n                this.caretHolder.unwrap();\r\n                this.caretHolder = null;\r\n            }\r\n        }\r\n        const collectedStyles =  collectStyleFromSelectedElement(this.connectedElement);\r\n        if(typeof (EVENTS[\"inspect\"]) === \"function\"){\r\n            EVENTS[\"inspect\"](collectedStyles);\r\n        }\r\n        this.dispatchEvent('styleChanged', collectedStyles);\r\n    }\r\n    createCaretPlacement(atNode) {\r\n        if (!atNode) return null;\r\n        const caretHolder = document.createElement('text-selection');\r\n        caretHolder.setAttribute('zero-space', 'true');\r\n        atNode.appendChild(caretHolder);\r\n        return caretHolder;\r\n    }\r\n\r\n    dispatchEvent(event, payload) {\r\n        if (this.events[event])\r\n            this.events[event](payload);\r\n    }\r\n    onToggle(element, key, value, options) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            // detect if there is any parent with style to split.\r\n            //TODO: use the catch from options to detect more than one style or tag element.\r\n            let elementToSplit = element.closest(`[style*='${value}']`);\r\n            //TODO: tests\r\n            if (elementToSplit && block_elments[elementToSplit.nodeName]) {\r\n                let innerSpan = createInnerWrapperElement(elementToSplit);\r\n                elementToSplit.style[key] = null;\r\n                innerSpan.style[key] = value;\r\n                options.onOff = false;\r\n                return this.onToggle(element, key, value, options);\r\n            }\r\n            if (elementToSplit && elementToSplit !== element) {\r\n                if (typeof (options.onOff) === 'undefined')\r\n                    options.onOff = false;\r\n                //unbold\r\n                const splitElements = splitHTML(element, elementToSplit);\r\n                // if there is no split elements, its error!\r\n                if (splitElements) {\r\n                    toggleStyle(splitElements.center, key, value, options.onOff);\r\n                } else {\r\n                    console.error('splitHTML return null');\r\n                }\r\n            }\r\n            else {\r\n                if (typeof (options.onOff) === 'undefined' && elementToSplit) {\r\n                    options.onOff = false;\r\n                } else if (typeof (options.onOff) === 'undefined') {\r\n                    options.onOff = true;\r\n                }\r\n                toggleStyle(element, key, value, options.onOff);\r\n                normalizeElement(element);\r\n            }\r\n\r\n            return options.onOff;\r\n        }\r\n\r\n    }\r\n    onExtend(element, key, value, options) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            const elementToSplit = element.closest(`[style*='${key}']`);\r\n            if (elementToSplit) {\r\n                const splitBlocks = splitHTML(element, elementToSplit);\r\n                if (splitBlocks) {\r\n                    setStyle(splitBlocks.center, key, value);\r\n                }\r\n                else if (options.target === \"block\") {\r\n                    elementToSplit.style[key] = value;\r\n                }\r\n                else if (options.target !== \"block\") {\r\n                    let innerSpan = createInnerWrapperElement(elementToSplit, { el: 'span' });\r\n                    setStyle(innerSpan, key, value);\r\n                    elementToSplit.style[key] = null;\r\n                    return this.onExtend(element, key, value);\r\n\r\n                }\r\n                else if (elementToSplit !== element) {\r\n                    const splitElements = splitHTML(element, elementToSplit);\r\n                    if (splitElements) {\r\n                        setStyle(splitElements.center, key, value);\r\n                    } else {\r\n                        console.error('splitHTML return null');\r\n                    }\r\n                }\r\n\r\n            } else if (window.getComputedStyle(element).display !== \"block\" && options.target === \"block\") {\r\n                const blockElement = GetClosestBlockElement(element);\r\n                if (blockElement && blockElement.ischildOf(this.connectedElement)) {\r\n                    setStyle(parentElement, key, value);\r\n                } else {\r\n                    const wrapper = document.createElement(\"div\");\r\n                    parentElement.wrap(wrapper);\r\n                    setStyle(wrapper, key, value);\r\n                }\r\n            } else {\r\n                setStyle(element, key, value);\r\n            }\r\n        }\r\n\r\n    }\r\n    createBlockStyle(options, element, key, value) {\r\n      \r\n        if (options.as === \"inline\") {\r\n            let blockElement = GetClosestBlockElement(element);\r\n            if (blockElement) {\r\n                const wrapTextNodeWithAppendStyle = (node) => {\r\n                    const span = document.createElement(\"span\");\r\n                    span.style[key] = value;\r\n                    node.wrap(span);\r\n                };  \r\n                const createInlineStyle = (parentNode) => {\r\n                    //TODO: tests\r\n                    parentNode.style[key] = null;\r\n                    Array.from(parentNode.childNodes).forEach(node => {\r\n                        if (node.nodeType === 3) {\r\n                            wrapTextNodeWithAppendStyle(node);\r\n                        } else if (node.nodeType === 1 && !void_elements[node.nodeName]) {\r\n                                createInlineStyle(node);\r\n                        }\r\n                        else {\r\n                            node.style[key] = value;\r\n                        }\r\n                    });\r\n                };\r\n                createInlineStyle(blockElement);\r\n                // Array.from(blockElement.querySelectorAll(\"span\")).forEach(el=>el.style[key] = value);\r\n            } else {\r\n                this.createBlockElAndStyleIt(key, value, element);\r\n            }\r\n\r\n        } else {\r\n            let blockElement = GetClosestBlockElement(element);\r\n            if (blockElement) {\r\n                blockElement.style[key] = value;\r\n                Array.from(blockElement.querySelectorAll(`[style*='${key}']`)).forEach(el => el.style[key] = null);\r\n            } else {\r\n                this.createBlockElAndStyleIt(key, value, element);\r\n            }\r\n        }\r\n    }\r\n\r\n    createBlockElAndStyleIt(key, value, element) {\r\n        const pargh = document.createElement(\"p\");\r\n        pargh.style[key] = value;\r\n        element.wrap(pargh);\r\n    }\r\n    isVAlidKeyValue(key,value){\r\n        return !!(typeof key === \"string\" && typeof value === \"string\"); \r\n    }\r\n    isValid() {\r\n        if (!this.connectedElement) {\r\n            console.error('please create new instance..')\r\n            return false;\r\n        };\r\n        if (this.connectedElement.contentEditable === \"false\") {\r\n            return false;\r\n        }\r\n        var selectedElement = getSelectedElement();\r\n        if (selectedElement && (selectedElement.ischildOf(this.connectedElement) || selectedElement === this.connectedElement)) {\r\n            return true;\r\n        }\r\n        ;\r\n    }\r\n}","import Core from './StyleIt/index';\r\nimport  MODES  from './StyleIt/constants/Modes.json';\r\n\r\n/**\r\n * Create a new instance of StyleIt\r\n *\r\n * @param {HTMLElement} target\r\n  * @param {object} config\r\n * @public\r\n */\r\nexport default class StyleIt {\r\n  //expose only the relevant methods..\r\n  constructor(target, config) {\r\n    //TODO: validate target & config..\r\n    const styleIt = new Core(target, config);\r\n    if (styleIt) {  \r\n      this.execCmd = styleIt.execCmd;\r\n      this.toggleClass = styleIt.toggleClass;\r\n      this.link = styleIt.link;\r\n      this.unLink = styleIt.unLink;\r\n      this.save = styleIt.save;\r\n      this.load = styleIt.load;\r\n      this.destroy = styleIt.destroy;\r\n      this.on = styleIt.on;\r\n      this.MODES = MODES;\r\n      //========================================//\r\n      this.toggleClass = this.toggleClass.bind(styleIt);\r\n      this.execCmd = this.execCmd.bind(styleIt);\r\n      this.on = this.on.bind(styleIt);\r\n      this.link = this.link.bind(styleIt);\r\n      this.unLink = this.unLink.bind(styleIt);\r\n      this.save = this.save.bind(styleIt);\r\n      this.load = this.load.bind(styleIt);\r\n      this.destroy = this.destroy.bind(styleIt);\r\n    }\r\n  }\r\n}"],"sourceRoot":""}