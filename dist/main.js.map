{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/StyleIt/components/custom/textSelected.js","webpack:///./src/StyleIt/services/range.service.js","webpack:///./src/StyleIt/constants/Modes.js","webpack:///./src/StyleIt/utilis/DomUtilis.js","webpack:///./src/StyleIt/services/className.service.js","webpack:///./src/StyleIt/services/attr.service.js","webpack:///./src/StyleIt/utilis/merger.js","webpack:///./src/StyleIt/services/textEditor.service.js","webpack:///./src/StyleIt/constants/elementTypes.js","webpack:///./src/StyleIt/services/elements.service.js","webpack:///./src/StyleIt/services/style.service.js","webpack:///./src/StyleIt/rules/rules.js","webpack:///./src/StyleIt/utilis/splitHTML.js","webpack:///./src/StyleIt/services/copyPaste/copyPaste.service.js","webpack:///./src/StyleIt/services/Inspector/Inspector.service.js","webpack:///./src/StyleIt/connector.js","webpack:///./src/StyleIt/index.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","default","TextSelection","innerHTML","HTMLElement","customElements","wrapRangeWithElement","ranges","sel","window","getSelection","rangeCount","getRangeAt","getRanges","map","wrapperEl","range","wrapNode","isCollapsed","document","createElement","startNode","startContainer","endNode","endContainer","startOffset","endOffset","node","currentRange","createRange","currentWrapper","cloneNode","selectNodeContents","nodeType","setStart","setEnd","surroundContents","createWrapperFunction","getRangeTextNodes","wrapRangeText","undefined","flat","getTextNodes","el","walker","body","ownerDocument","createTreeWalker","NodeFilter","SHOW_TEXT","textNodes","nextNode","push","rangeIntersectsNode","intersectsNode","rangeA","rangeB","selectNode","e","createRangeFromNode","compareBoundaryPoints","Range","END_TO_START","START_TO_END","container","commonAncestorContainer","parentNode","filter","textContent","length","isNonEmptyTextNode","setSelectionBetweenTwoNodes","firstFlag","lastFlag","setBaseAndExtent","childNodes","forEach","unwrap","setSelectionFlags","firstElement","LastElement","prepend","appendChild","Modes","obj","style","wrapper","elements","parents","Array","isArray","_","insertBefore","_el","getClasses","element","from","classList","normalizeClassName","removeEmptyClass","className","removeAttribute","querySelectorAll","concat","child","remove","clear","getAttributes","getAll","attributes","attrs","Document","getSelectedElement","anchorNode","Element","wrap","createSelection","createTextRange","moveToElementText","select","selection","removeAllRanges","addRange","ischildOf","parent","insertAfter","newNode","nextSibling","replaceNode","replacementNode","extraContents","extractContents","removeClassName","mergeNodeContect","DomUtilis","isElement","nodeName","Node","ELEMENT_NODE","firstChild","firstElementChild","_elementProps","getStyle","classes","styleValue","trim","attr","normalizeStyle","attrValue","setAttribute","add","normalizeElement","parentElement","mergeTwoNodes","elementOne","elementTwo","_elementsData","commoncLasses","classes1","classes2","c1","c2","includes","commonStyles","style1","style2","commmonStyles","style1Values","style2Values","clearElementClasses","clearElementStyles","children","recurse","_normalize","mergeNodesStyles","merged","nextElement","mergeNodesContent","mergedContent","normalize","unwrapped","Types","ancNode","JsonToElement","jsonObject","createHtmlElement","jsElement","isShouldRenderAttrs","tag","createTextNode","A","href","target","SPAN","DIV","P","BR","collectedStyle","styles","collectStyles","join","JsonObjectToStyleString","renderAttrs","type","Levels","jsChild","htmlElement","elementToJson","level","json","isValid","replace","keys","cn","v","getInheirtCss","fromElement","toElement","intailStyle","currectElement","toggleStyle","isOn","setStyle","data","textDecoration","closest","splits","splitHTML","center","rule","collectStyleFromSelectedElement","connectecElement","getAttribute","split","keyValue","setAttrs","getInheirtAttributes","_parent","findIndex","getInheirtClassNames","template","centerTemplate","leftTemplate","leftRange","rightTemplate","rightRange","left","right","CopyPaste","uniqeID","onPaste","str","clip","clipboardData","getData","isLocalElement","DOMParser","parseFromString","querySelector","html","deleteContents","lastNode","frag","createDocumentFragment","insertNode","cloneRange","setStartAfter","collapse","pasteHtmlAtCaret","outerHTML","pastedElement","foundedEl","flag","paste","deleteFromDocument","preventDefault","onCopy","nodes","jsonStyle","setStyles","we","reduce","filtered","setData","addEventListener","removeEventListener","Inpsector","onInspect","launchInspect","onKeyDown","keyCode","onClick","Destroy","Connector","options","getElementById","RenderInnerHTML","plugins","usePlugins","copyPaste","inspector","renderedElement","Promise","resolve","then","Core","config","__config","modeHandlers","Toggle","OnOff","onToggle","Extend","onExtend","assign","events","styleChanged","connectedElement","Connect","isON","closestClass","ELEMENTS","ToggleMode","TEXT_NODE","result","dispatchEvent","event","payload","elementToSplit","splitElements","charIndex","focus","textNode","caret","setCaretAt","contentEditable","selectedElement","StyleIt","styleIt","ExecCmd","execCmd","ToggleClass","Save","Load"],"mappings":"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","file":"styleit.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"styleit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"styleit\"] = factory();\n\telse\n\t\troot[\"styleit\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require('./src').default;\r\n","\r\nclass TextSelection extends HTMLElement {\r\n    constructor(props) {\r\n      super();\r\n    }\r\n    connectedCallback(){\r\n      this.innerHTML = \"&#8203;\";\r\n    }\r\n  }\r\n  customElements.define('text-selection', TextSelection); ","\r\nexport function wrapRangeWithElement() {\r\n  const ranges = getRanges();\r\n  return ranges.map(r => {\r\n    return wrapRangeText(undefined, r);\r\n  }).flat();\r\n}\r\nexport function getRanges() {\r\n  let ranges = [];\r\n\r\n  const sel = window.getSelection();\r\n\r\n  for (let i = 0; i < sel.rangeCount; i++) {\r\n    ranges[i] = sel.getRangeAt(i);\r\n  }\r\n  return ranges;\r\n}\r\n// return all text nodes that are contained within `el`\r\nexport function getTextNodes(el) {\r\n  el = el || document.body\r\n\r\n  var doc = el.ownerDocument || document,\r\n    walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false),\r\n    textNodes = [],\r\n    node = walker.nextNode();\r\n\r\n  while (node) {\r\n    textNodes.push(node);\r\n    node = walker.nextNode();\r\n  }\r\n  return textNodes\r\n}\r\nexport function rangesIntersect(rangeA, rangeB) {\r\n  return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 &&\r\n    rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1\r\n}\r\nexport function createRangeFromNode(node) {\r\n  var range = node.ownerDocument.createRange()\r\n  try {\r\n    range.selectNode(node)\r\n  } catch (e) {\r\n    range.selectNodeContents(node)\r\n  }\r\n  return range\r\n}\r\nexport function setCaretAt(element, charIndex) {\r\n  var node = element;\r\n  node.focus();\r\n  var textNode = Array.from(node.childNodes).filter(child => child.nodeType === Node.TEXT_NODE);\r\n  var caret = charIndex;\r\n  var range = document.createRange();\r\n  range.setStart(textNode[0], caret);\r\n  range.setEnd(textNode[0], caret);\r\n  var sel = window.getSelection();\r\n  sel.removeAllRanges();\r\n  sel.addRange(range);\r\n}\r\nexport function pasteHtmlAtCaret(html) {\r\n  var sel, range;\r\n  if (window.getSelection) {\r\n    // IE9 and non-IE\r\n    sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      range = sel.getRangeAt(0);\r\n      range.deleteContents();\r\n\r\n      // Range.createContextualFragment() would be useful here but is\r\n      // only relatively recently standardized and is not supported in\r\n      // some browsers (IE9, for one)\r\n      var el = document.createElement(\"div\");\r\n      el.innerHTML = html;\r\n      var frag = document.createDocumentFragment(), node, lastNode;\r\n      while ((node = el.firstChild)) {\r\n        lastNode = frag.appendChild(node);\r\n      }\r\n      range.insertNode(frag);\r\n\r\n      // Preserve the selection\r\n      if (lastNode) {\r\n        range = range.cloneRange();\r\n        range.setStartAfter(lastNode);\r\n        range.collapse(true);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function rangeIntersectsNode(range, node) {\r\n  if (range.intersectsNode) {\r\n    return range.intersectsNode(node)\r\n  } else {\r\n    return rangesIntersect(range, createRangeFromNode(node))\r\n  }\r\n}\r\nexport function getRangeTextNodes(range) {\r\n  var container = range.commonAncestorContainer,\r\n    nodes = getTextNodes(container.parentNode || container)\r\n\r\n  return nodes.filter((node) => {\r\n    return rangeIntersectsNode(range, node) && isNonEmptyTextNode(node)\r\n  })\r\n}\r\nexport function isNonEmptyTextNode(node) {\r\n  return node.textContent.length > 0\r\n}\r\nexport function removeElement(el) {\r\n  if (el.parentNode) {\r\n    el.parentNode.removeChild(el)\r\n  }\r\n}\r\nexport function replaceNode(replacementNode, node) {\r\n  if (typeof node.parentNode !== \"undefined\") {\r\n    removeElement(replacementNode);\r\n    node.parentNode.insertBefore(replacementNode, node);\r\n    removeElement(node);\r\n  }\r\n}\r\nexport function selectText(node) {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(node);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(node);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } else {\r\n    console.warn(\"Could not select text in node: Unsupported browser.\");\r\n  }\r\n}\r\nexport function insertAfter(newNode, referenceNode) {\r\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n}\r\nexport function createWrapperFunction(wrapperEl, range) {\r\n  var startNode = range.startContainer,\r\n    endNode = range.endContainer,\r\n    startOffset = range.startOffset,\r\n    endOffset = range.endOffset\r\n\r\n  return function wrapNode(node) {\r\n    var currentRange = document.createRange(),\r\n      currentWrapper = wrapperEl.cloneNode()\r\n\r\n    currentRange.selectNodeContents(node);\r\n    if (node === startNode && startNode.nodeType === 3) {\r\n      currentRange.setStart(node, startOffset)\r\n      startNode = currentWrapper\r\n      startOffset = 0\r\n    }\r\n    if (node === endNode && endNode.nodeType === 3) {\r\n      currentRange.setEnd(node, endOffset)\r\n      endNode = currentWrapper;\r\n      endOffset = 1\r\n    }\r\n    currentRange.surroundContents(currentWrapper)    \r\n    return currentWrapper\r\n  }\r\n}\r\nexport function getAllNodes() {\r\n  var nodes, range;\r\n  if (typeof range === 'undefined') {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n  nodes = getRangeTextNodes(range)\r\n  nodes = nodes.map(node => {\r\n    if (node !== null) {\r\n      while (node.nodeType === 3) {\r\n        node = node.parentNode;\r\n      }\r\n      return node;\r\n    }\r\n    return null;\r\n  });\r\n  return nodes\r\n}\r\nexport function wrapRangeText(wrapperEl, range) {\r\n  var nodes, wrapNode;\r\n\r\n  if (typeof range === 'undefined') {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n\r\n  if (typeof wrapperEl === 'undefined') {\r\n    wrapperEl = 'span'\r\n  }\r\n\r\n  if (typeof wrapperEl === 'string') {\r\n    // assume it's a tagname\r\n    wrapperEl = document.createElement(wrapperEl);\r\n  }\r\n\r\n  wrapNode = createWrapperFunction(wrapperEl, range)\r\n\r\n  nodes = getRangeTextNodes(range)\r\n  \r\n  nodes = nodes.map(wrapNode);\r\n  return nodes\r\n}\r\nexport function setSelectionBetweenTwoNodes(firstFlag, lastFlag) {\r\n  document.getSelection().setBaseAndExtent(firstFlag, 0, lastFlag, lastFlag.childNodes.length);\r\n  [firstFlag, lastFlag].forEach(e => e.unwrap());\r\n}\r\nexport function setSelectionFlags(firstElement, LastElement) {\r\n  const firstFlag = document.createElement('text-selection');\r\n  const lastFlag = document.createElement('text-selection');\r\n  firstElement.prepend(firstFlag); //Set flag the first\r\n  LastElement.appendChild(lastFlag); //Set Flag at last\r\n  return { firstFlag, lastFlag };\r\n}\r\nexport function getSelectedHTML() {\r\n  var range;\r\n  if (window.getSelection) {\r\n    var selection = window.getSelection();\r\n    if (selection.focusNode === null) return;\r\n    range = selection.getRangeAt(0);\r\n    if (range.collapsed) {\r\n      return;\r\n    }\r\n    var content = range.extractContents();\r\n    return {\r\n      content: content,\r\n      range: range\r\n    }\r\n  }\r\n}\r\nexport function saveSelection() {\r\n  if (window.getSelection) {\r\n    var sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      return sel.getRangeAt(0);\r\n    }\r\n  } else if (document.selection && document.selection.createRange) {\r\n    return document.selection.createRange();\r\n  }\r\n  return null;\r\n};\r\nexport function restoreSelection(range) {\r\n  if (range) {\r\n    if (window.getSelection) {\r\n      var sel = window.getSelection();\r\n      sel.removeAllRanges();\r\n      sel.addRange(range);\r\n    } else if (document.selection && range.select) {\r\n      range.select();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","export const Modes ={\r\n    \"Toggle\":\"toggle\",\r\n    \"Extend\":\"extend\",\r\n    \"Tag\":\"Tag\"\r\n}       ","class DomUtilis {\r\n\r\n\r\n  isElement(obj) {\r\n    try {\r\n      return obj instanceof HTMLElement;\r\n    }\r\n    catch (e) {\r\n      return (typeof obj === \"object\") &&\r\n        (obj.nodeType === 1) && (typeof obj.style === \"object\") &&\r\n        (typeof obj.ownerDocument === \"object\");\r\n    }\r\n  }\r\n  \r\n  wrap(el, wrapper) {\r\n    //el should be array\r\n    let elements = [];\r\n    if (Array.isArray(el)) {\r\n      elements = el;\r\n    } else {\r\n      elements = [el];\r\n    }\r\n\r\n    const parents = elements.map(e => e.parentNode);\r\n    var parentsDiff = parents.filter((p, _, self) => { return self[0] !== p });\r\n    if (parentsDiff.length !== 0) {\r\n      console.log(`[wrap] found ${parentsDiff.length} different parents 😅`);\r\n      return;\r\n    }\r\n    parents[0].insertBefore(wrapper, elements[0])\r\n    elements.forEach(_el => wrapper.appendChild(_el))\r\n\r\n    return true;\r\n  }\r\n}\r\nexport default new DomUtilis(); \r\n\r\nDocument.prototype.getSelectedElement=function(){var e=document.getSelection();if(null!==e){var t=e.anchorNode;if(null!==t){for(;3===t.nodeType;)t=t.parentNode;return t}return null}}\r\nElement.prototype.wrap = ( wrapper) => {\r\n  if (typeof wrapper === \"string\") wrapper = document.createElement(wrapper);\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nElement.prototype.createSelection = function() {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(this);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(this);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } \r\n}\r\nElement.prototype.ischildOf = function(parent) {\r\n  if (!parent) return false;\r\n  let node = this.parentNode;\r\n  while (node != null) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\nElement.prototype.wrap = function(wrapper) {\r\n  if (!this.parentNode) return false;\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return true;\r\n}\r\nElement.prototype.insertAfter = function (newNode) {\r\n  this.parentNode.insertBefore(newNode, this.nextSibling);\r\n}\r\nElement.prototype.replaceNode = function(replacementNode) {\r\n  if (this.parentNode) {\r\n    this.parentNode.insertBefore(replacementNode, this)\r\n    this.remove();\r\n    return replacementNode;\r\n  }\r\n}\r\nElement.prototype.unwrap = function() {\r\n  var range = document.createRange()\r\n  range.selectNodeContents(this)\r\n  var extraContents = range.extractContents();\r\n  this.replaceNode(extraContents)\r\n  return extraContents;\r\n}\r\n","\r\nexport function getInheirtClassNames(fromElement, toElement) {\r\n    var classes = [];\r\n    var _parent = fromElement;\r\n    while (_parent && _parent.ischildOf(toElement.parentElement)) {\r\n        let map = _parent.classList;\r\n        Array.from(map).forEach(name => {\r\n            if (classes.findIndex(c => c === name) < 0) {\r\n                classes.push(name);\r\n            }\r\n        })\r\n        _parent = _parent.parentElement;\r\n    }\r\n    return classes;\r\n}\r\nexport function getClasses(element) {\r\n    return Array.from(element.classList);\r\n}\r\n\r\n//TODO: review\r\n//question: is expensive too much? \r\nexport function normalizeClassName(element) {\r\n    function removeEmptyClass(element){\r\n        if (!element.className) {\r\n            element.removeAttribute('class');\r\n        }\r\n    }\r\n    function clear(element) {\r\n        removeEmptyClass(element);\r\n        Array.from(element.classList).forEach(c => {\r\n            Array.from(element.querySelectorAll(`[class='${c}']`)).forEach(node =>{\r\n                node.classList.remove(c)\r\n                removeEmptyClass(node)\r\n            });\r\n        })\r\n    }\r\n    \r\n    const elements = Array.from(element.querySelectorAll('span[class]')).concat(element);\r\n    elements.forEach(child => clear(child));\r\n}\r\n//TODO: review\r\n//question: how about this name ? \r\nElement.prototype.removeClassName = function(className){\r\nconst nodes = Array.from(this.querySelectorAll(`[class='${className}']`)).concat(this);\r\nnodes.forEach(node=>node.classList.remove(className));\r\n}","\r\n\r\n//class and style not includes yet..\r\nexport function getInheirtAttributes(fromElement, toElement) {\r\n    var attributes = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        var attrs = currectElement.attributes;\r\n        for(var i = attrs.length - 1; i >= 0; i--) {\r\n            if(attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\"){\r\n                if(!attributes[attrs[i].name ]){\r\n                    attributes[attrs[i].name ] = attrs[i].value;\r\n                }\r\n            }\r\n          }\r\n      currectElement = currectElement.parentElement;\r\n    }\r\n    return attributes;\r\n  }\r\n  export function getAttributes(element,getAll){\r\n    var attributes = {};\r\n    var attrs = element.attributes;\r\n    for(var i = attrs.length - 1; i >= 0; i--) {\r\n        if(getAll  || (!getAll && attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\")){\r\n            if(!attributes[attrs[i].name ]){\r\n                attributes[attrs[i].name ] = attrs[i].value;\r\n            }\r\n        }\r\n      }\r\n      return attributes;\r\n  }","import DomUtilis from \"./DomUtilis\"\r\nimport { getStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { getClasses, normalizeClassName } from \"../services/className.service\";\r\nimport { getAttributes } from \"../services/attr.service\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\nimport Config from '../_app.config.json';\r\n\r\n\r\n\r\n/**\r\n *  * Returns the new merge element\r\n * @param {Element} DomElement - element to merge with his first child\r\n */\r\nexport const mergeNodeContect = node => {\r\n\r\n    if (!DomUtilis.isElement(node)) {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (node.nodeName !== \"SPAN\" || node.nodeType !== Node.ELEMENT_NODE) {\r\n        console.error('[mergeNodeContect] node is not a span');\r\n        return null;\r\n    }\r\n\r\n    const firstChild = node.firstElementChild;\r\n    if (!firstChild) {\r\n        console.error('[mergeNodeContect] first child not found');\r\n        return null;\r\n    }\r\n    if (firstChild.nodeName !== \"SPAN\" || firstChild.nodeType !== Node.ELEMENT_NODE) {\r\n        console.error('[mergeNodeContect] firstChild is not a span');\r\n        return null;\r\n    }\r\n    if (node.textContent !== firstChild.textContent) {\r\n        console.error('[mergeNodeContect] text content is different');\r\n        return null;\r\n    }\r\n    const _elementProps = {\r\n        style: getStyle(node),\r\n        classes: getClasses(node),\r\n        attrs: getAttributes(node)\r\n    }\r\n    for (const style in _elementProps.style) {\r\n        const styleValue = _elementProps.style[style];\r\n        firstChild.style[style] = (firstChild.style[style] + \" \" + styleValue).trim();\r\n    }\r\n    normalizeStyle(firstChild);\r\n\r\n    for (const attr in _elementProps.attrs) {\r\n        const attrValue = _elementProps.attrs[attr];\r\n        firstChild.setAttribute(attr, attrValue);\r\n    }\r\n    firstChild.classList.add(..._elementProps.classes);\r\n    normalizeClassName(firstChild);\r\n    normalizeElement(firstChild);\r\n    if(firstChild.parentElement)\r\n    firstChild.parentElement.unwrap();\r\n    return firstChild;\r\n};\r\nexport function mergeTwoNodes(elementOne, elementTwo) {\r\n    console.log('[mergeTwoNodes] START');\r\n    if (!DomUtilis.isElement(elementOne) || !DomUtilis.isElement(elementTwo)) {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (elementOne.nodeName !== \"SPAN\" || elementTwo.nodeName !== \"SPAN\") {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    const _elementsData = [{\r\n        style: getStyle(elementOne),\r\n        classes: getClasses(elementOne),\r\n        attrs: getAttributes(elementOne)\r\n    },\r\n    {\r\n        style: getStyle(elementTwo),\r\n        classes: getClasses(elementTwo),\r\n        attrs: getAttributes(elementTwo)\r\n    }]\r\n    const getCommonClasses = (classes1, classes2) => {\r\n        if (!classes1 || !classes2)\r\n            return [];\r\n        const c1 = [...classes1];\r\n        const c2 = [...classes2];\r\n        return c1.filter(c => c2.includes(c));\r\n    }\r\n    const getCommonStyles = (style1, style2) => {\r\n        const commmonStyles = {};\r\n        for (const s in style1) {\r\n            if (!style2[s])\r\n                continue;\r\n\r\n            const style1Values = style1[s];\r\n            const style2Values = style2[s];\r\n            if (style2Values === style1Values) {\r\n                commmonStyles[s] = style2Values;\r\n            }\r\n        }\r\n        return commmonStyles;\r\n    };\r\n    const commoncLasses = getCommonClasses(_elementsData[0].classes, _elementsData[1].classes);\r\n    console.log('commonClassses',commoncLasses,elementOne,elementTwo,_elementsData)\r\n\r\n    const commonStyles = getCommonStyles(_elementsData[0].style, _elementsData[1].style);\r\n    const buildWrappingElement = (commonStyles, commoncLasses) => {\r\n        const wrapper = document.createElement('span');\r\n        // handle styles\r\n        for (const s in commonStyles)\r\n            wrapper.style[s] = commonStyles[s];\r\n            \r\n\r\n        // handle classes\r\n        if (commoncLasses.length > 0) {\r\n            wrapper.classList.add(...commoncLasses);\r\n        }\r\n        if (wrapper.attributes.length === 0) {\r\n            wrapper.unwrap();\r\n            return null;\r\n        }\r\n        return wrapper;\r\n    }\r\n    const wrapper = buildWrappingElement(commonStyles, commoncLasses);\r\n    if (!wrapper) {\r\n        console.error('wrapper is null')\r\n        return null;\r\n    }\r\n\r\n    const clearElementClasses = (node, commoncLasses) => {\r\n        node.classList.remove(...commoncLasses);\r\n        normalizeClassName(node);\r\n    }\r\n    const clearElementStyles = (node, commonStyles) => {\r\n        for (const s in commonStyles)\r\n            node.style[s] = null;\r\n    }\r\n    const elements = [elementOne, elementTwo];\r\n    elements.forEach(e => {\r\n        clearElementClasses(e, commoncLasses);\r\n        clearElementStyles(e, commonStyles);\r\n    })\r\n\r\n    DomUtilis.wrap(elements, wrapper);\r\n    [...wrapper.children].forEach(c => {\r\n        normalizeElement(c)\r\n    })\r\n    return wrapper;\r\n};\r\n\r\n\r\nexport function mergeCommonValuesObject(obj1, obj2) {\r\n    let commonValues = {};\r\n    for (const key in obj1) {\r\n        if (obj2[key] && obj2[key] === obj1[key]) {\r\n            commonValues[key] = obj1[key]\r\n        }\r\n    }\r\n    return commonValues;\r\n}\r\n\r\nexport function mergeCommonArrays(arr1, arr2) {\r\n    const mergeArr = [];\r\n    Array.from(arr1).forEach(item => {\r\n        if (arr2.findIndex(i => i === item) > 0) {\r\n            mergeArr.push(item);\r\n        }\r\n    })\r\n    return mergeArr;\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { normalizeStyle } from \"./style.service\";\r\nimport { mergeNodeContect, mergeTwoNodes } from \"../utilis/merger\";\r\n\r\n/**\r\n * @param {Element} DomElement - element to normalize\r\n */\r\nexport function normalizeElement(el) {\r\n    const recurse = (element) => {\r\n        Array.from(element.children).forEach((child) => {\r\n            recurse(child);\r\n            _normalize(child);\r\n        })\r\n        const mergeNodesStyles = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((element) => {\r\n                let wrapper = element;\r\n                while (wrapper !== null) {\r\n                    const nextElement = wrapper.nextSibling;\r\n                    if (!nextElement)\r\n                        break;\r\n                    wrapper = mergeTwoNodes(wrapper, nextElement);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n\r\n        const mergeNodesContent = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((child) => {\r\n                let wrapper = child;\r\n                while (wrapper !== null) {\r\n                    wrapper = mergeNodeContect(wrapper);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n        let mergedStyles = false;\r\n        let mergedContent = false;\r\n        do {\r\n            _normalize(element);\r\n            mergedStyles = mergeNodesStyles(element);\r\n            mergedContent = mergeNodesContent(element);\r\n        } while (mergedContent);\r\n    }\r\n    el.normalize();\r\n    recurse(el);\r\n\r\n    function _normalize(element) {\r\n        element.normalize();\r\n        normalizeClassName(element);\r\n        normalizeStyle(element);\r\n        //TODO: normalizr attributes (no:style,className)\r\n        if (element && element.nodeName === \"SPAN\" && (!element.textContent.trim() || element.attributes.length === 0)) {\r\n            const unwrapped = element.unwrap();\r\n            unwrapped.normalize();\r\n            //TODO: check the return;\r\n            return unwrapped.parentElement;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {Array} textNodes - textnode to remove the zero space like : u200B\r\n */\r\nexport function removeZeroSpace(textNodes) {\r\n    if (!Array.isArray(textNodes)) {\r\n        textNodes = [textNodes];\r\n    }\r\n    textNodes.forEach(el => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.parentElement && el.parentElement.nodeName !== \"TEXT-SELECTION\") {\r\n            el.textContent = el.textContent.replace(/\\u200B/g, '');\r\n        }\r\n    })\r\n}\r\n","export const Types = {\r\n    '#text': '#text',\r\n    'P': 'P',\r\n    'SPAN': 'SPAN',\r\n    'A': 'A',\r\n    'DIV':'DIV',\r\n    'BR': 'BR'  \r\n}","import { getStyle, JsonObjectToStyleString } from \"./style.service\";\r\nimport { Types } from '../constants/elementTypes';\r\nimport Levels from '../constants/Levels.json';\r\n\r\nexport function  getSelectedElement(){\r\n    var node = document.getSelection();\r\n    if (node !== null) {\r\n      var ancNode = node.anchorNode;\r\n      if (ancNode !== null) {\r\n        while (ancNode.nodeType === 3) {\r\n          ancNode = ancNode.parentNode;\r\n        }\r\n        // const el = (ancNode.nodeType === 3 ? ancNode.parentNode : node);\r\n        return ancNode;\r\n      }\r\n      return null;\r\n    }\r\n  }\r\nexport function JsonToElement(jsonObject, parentElement) {\r\n    //TODO: create parentelement and jsonobject validation   \r\n    const renderAttrs = (jsElement, element) => {\r\n        if (jsElement.classList) {\r\n            element.classList = [...jsElement.classList];\r\n        }\r\n        if (jsElement.style) {\r\n            const collectedStyle = JsonObjectToStyleString(jsElement.style);\r\n            element.style = collectedStyle;\r\n        }\r\n        //TODO: other attrs...\r\n    }\r\n    const createHtmlElement = (jsElement) => {\r\n        const nodeType = Types[jsElement.tag];\r\n        let element;\r\n        let isShouldRenderAttrs;\r\n        switch (nodeType) {\r\n            case Types[\"#text\"]:\r\n                element = document.createTextNode(jsElement.textContent);\r\n                break;\r\n            case Types.A:\r\n                element = document.createElement(nodeType);\r\n                element.href = jsElement.href;\r\n                element.target = jsElement.target;\r\n                break;\r\n            case Types.SPAN:\r\n            case Types.DIV:\r\n            case Types.P:\r\n                element = document.createElement(nodeType);\r\n                isShouldRenderAttrs = true;\r\n                break;\r\n            case Types.BR:\r\n                element = document.createElement(nodeType);\r\n                break;\r\n            default:\r\n                console.log(\"this tag element is not on the valids elements\", nodeType)\r\n                break;\r\n        }\r\n        if (isShouldRenderAttrs && element) {\r\n            renderAttrs(jsElement, element);\r\n        }\r\n        return element;\r\n    }\r\n    if(!parentElement && jsonObject.type === Levels['0']) {\r\n        parentElement = createHtmlElement(jsonObject);\r\n    }\r\n     if (Array.isArray(jsonObject.children)) {\r\n        jsonObject.children.forEach(jsChild => {\r\n            const htmlElement = createHtmlElement(jsChild);\r\n            if (htmlElement) {\r\n                parentElement.appendChild(htmlElement);\r\n                JsonToElement(jsChild, htmlElement);\r\n            } else {\r\n                console.error('cant create dom element from json', jsChild);\r\n            }\r\n        });\r\n    }\r\n    return parentElement;\r\n}\r\nexport function elementToJson(node, level) {\r\n    if (typeof (level) !== \"number\") level = 0;\r\n    const nodeType = Types[node.nodeName];\r\n\r\n    let json = {};\r\n    let isValid = true;\r\n\r\n    if (Levels[level]) {\r\n        json.type = Levels[level];\r\n        level++;\r\n    }\r\n\r\n    switch (nodeType) {\r\n        case Types[\"#text\"]:\r\n            json.tag = nodeType;\r\n            json.textContent = node.textContent.replace(/\\u200B/g,'');\r\n            //question: replace \\n ?\r\n            if(!json.textContent.trim()) isValid = false;\r\n            break;\r\n        case Types.A:\r\n            json.tag = nodeType;\r\n            json.href = node.href;\r\n            json.target = node.target;\r\n            break;\r\n        case Types.DIV:\r\n        case Types.SPAN:\r\n        case Types.BR:\r\n        case Types.P:\r\n            json.tag = nodeType;\r\n            break;\r\n        default:\r\n            console.log(\"this tag element is not on the valids elements\", node.nodeName)\r\n            //TODO: should we unwrap this node ? \r\n            break;\r\n    }\r\n    if(!isValid) return null;\r\n    //TODO: get attrs \r\n    const style = getStyle(node);\r\n    if (Object.keys(style).length > 0) {\r\n        json.style = style;\r\n    }\r\n    if (node.classList && node.classList.length > 0)\r\n        json.classList = [...node.classList];\r\n\r\n    if (node.childNodes && node.childNodes.length > 0)\r\n        json.children = [...node.childNodes].map((cn) => elementToJson(cn, level)).filter(v=>v);\r\n    return json;\r\n\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { UseRules } from \"../rules/rules\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\n\r\nexport function getInheirtCss(fromElement, toElement) {\r\n    var intailStyle = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        let map = getStyle(currectElement);\r\n        for (const style in map) {\r\n            if (map.hasOwnProperty(style)) {\r\n                const value = map[style];\r\n                // text-decoration  could be twice like underline and strike therough.. \r\n                if (!intailStyle[style])\r\n                    intailStyle[style] = value;\r\n            }\r\n        }\r\n        currectElement = currectElement.parentElement;\r\n    }\r\n    return intailStyle;\r\n}\r\nexport function removeStyle(element, key, value) {\r\n    element.style[key] = element.style[key].replace(value, \"\");\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = el.style[key].replace(value, \"\");\r\n    })\r\n}\r\n//TOGGLE\r\nexport function toggleStyle(element, key, value, isOn) {\r\n    if (isOn) {\r\n        element.style[key] = element.style[key] + \" \" + value;\r\n    } else {\r\n        element.style[key] = element.style[key].replace(value, \"\");\r\n    }\r\n    normalizeStyle(element);\r\n    normalizeClassName(element);\r\n    Array.from(element.querySelectorAll(`[style*='${value}']`)).forEach(child => {\r\n        child.style[key] = child.style[key].replace(value, \"\");\r\n        normalizeStyle(child);\r\n        normalizeClassName(child);\r\n    })\r\n}\r\n//EXTEND\r\n//TODO: fix name\r\nexport function setStyles(element, jsonStyle) {\r\n    for (const key in jsonStyle) {\r\n        if (jsonStyle.hasOwnProperty(key)) {\r\n            const style = jsonStyle[key];\r\n            element.style[key] = style;\r\n        }\r\n    }\r\n}\r\n//TOGGLE\r\n//TODO: fix name\r\nexport function setStyle(element, key, value) {\r\n    element.style[key] = value;\r\n    if(key === \"color\"){\r\n        UseRules({element:element,key:'color',value:value});\r\n    }\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = null;\r\n        normalizeStyle(el);\r\n    });\r\n    //experimental: style the text decorations with color..\r\n    //TODO:review\r\n    // UseRules({element:element,key:key,value:value});\r\n}\r\nexport const collectStyleFromSelectedElement = (connectecElement) =>{   \r\n    const selectedElement = getSelectedElement();                \r\n    return getInheirtCss(selectedElement,connectecElement);\r\n}\r\n\r\nexport function normalizeStyle(element) {\r\n    if(!element) return null;\r\n    //TODO:review\r\n    const style = element.getAttribute('style');\r\n    if (!style) {\r\n        element.removeAttribute('style');\r\n    } else {\r\n        const collectStyles = getStyle(element);\r\n        for (const key in collectStyles) {\r\n            if (collectStyles.hasOwnProperty(key)) {\r\n                Array.from(element.querySelectorAll(`[style*='${collectStyles[key]}']`)).forEach(el => {\r\n                    el.style[key] = null;\r\n                    normalizeStyle(el);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function JsonObjectToStyleString(styles) {\r\n    let collectStyles = [];\r\n    for (const key in styles) {\r\n        if (styles.hasOwnProperty(key)) {\r\n            const style = styles[key];\r\n            collectStyles.push(`${key}:${style}`);\r\n        }\r\n    }\r\n    return collectStyles.join(';');\r\n}\r\nexport function getStyle(el) {\r\n    if (!el || !el.style) return {};\r\n    let styles = {};\r\n    let style = el.getAttribute('style');\r\n    if (style) {\r\n        let collectStyles = style.split(';');\r\n        if (Array.isArray(collectStyles)) {\r\n            collectStyles.forEach(style => {\r\n\r\n                const keyValue = style.split(':');\r\n                if (keyValue[1] && keyValue[0])\r\n                    styles[keyValue[0].trim()] = keyValue[1].trim();\r\n            })\r\n        }\r\n\r\n    }\r\n    return styles;\r\n}","import { setStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { splitHTML } from \"../utilis/splitHTML\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\n\r\n//TODO:review\r\n//question: should i add all the rules in one array or dispatch by css keys..\r\nexport function UseRules(data) {\r\n    const ColorTextDecorationRule = (data) => {\r\n        if (data.key === \"color\") {\r\n            const textDecoration = data.element.closest(`[style*='text-decoration']`);\r\n            if (textDecoration) {\r\n                const splits = splitHTML(data.element, textDecoration);\r\n                if (splits) {\r\n                    normalizeStyle();\r\n                    setStyle(splits.center, 'text-decoration-color', `${data.value}`);\r\n                    for (const key in splits) {\r\n                        const element = splits[key];\r\n                        normalizeElement(element);\r\n                    }\r\n                } else {\r\n                    setStyle(textDecoration, 'text-decoration-color', `${data.value}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const Rules = [\r\n        ColorTextDecorationRule\r\n    ]\r\n    Rules.forEach(rule => rule(data));\r\n}","import DomUtilis from \"./DomUtilis\"\r\nimport { getInheirtCss } from \"../services/style.service\";\r\nimport { getInheirtAttributes } from \"../services/attr.service\";\r\nimport { getInheirtClassNames } from \"../services/className.service\";\r\n\r\n\r\nexport function splitHTML(fromElement, toElement) {\r\n\r\n    if (!fromElement.ischildOf(toElement)) {\r\n        console.error('fromElement must be child of toElement')\r\n        return null;\r\n    }\r\n    if (!DomUtilis.isElement(fromElement) || !DomUtilis.isElement(toElement)) {\r\n        console.error('fromElement && toElement must be dom elements..');\r\n        return null;\r\n    }\r\n    const setAttrs = (fromElement, toElement) => {\r\n        const styles = getInheirtCss(fromElement, toElement);\r\n        const attrs = getInheirtAttributes(fromElement, toElement);\r\n        const className = getInheirtClassNames(fromElement, toElement);\r\n        const template = document.createElement('span');\r\n        template.className = className.join(\" \");\r\n        for (const style in styles) {\r\n            const value = styles[style];\r\n            template.style[style] = value;\r\n        }\r\n        for (const attr in attrs) {\r\n            const value = attrs[attr];\r\n            template.setAttribute(attr, value);\r\n        }\r\n        return template;\r\n    }\r\n    fromElement.createSelection();\r\n    const centerElement = document.getSelectedElement();\r\n    const centerTemplate = setAttrs(centerElement, toElement);\r\n    //center\r\n    centerTemplate.appendChild(fromElement);\r\n    var sel = window.getSelection();\r\n    var range = sel.getRangeAt(0);\r\n    //left\r\n    range.setStart(toElement, 0);\r\n    const leftElement = document.getSelectedElement();\r\n    const leftTemplate = setAttrs(leftElement, toElement);\r\n    var leftRange = range.extractContents();\r\n    leftTemplate.appendChild(leftRange);\r\n    //right\r\n    range.setEnd(toElement, toElement.childNodes.length);\r\n    const rightElement = document.getSelectedElement();\r\n    const rightTemplate = setAttrs(rightElement, toElement);\r\n    var rightRange = range.extractContents();\r\n    rightTemplate.appendChild(rightRange);\r\n    const split = {\r\n        left: leftTemplate,\r\n        center: centerTemplate,\r\n        right: rightTemplate\r\n    }\r\n    toElement.innerHTML = \"\";\r\n    for (const el in split) {\r\n        const element = split[el];\r\n        toElement.appendChild(element);\r\n    }\r\n    toElement.unwrap();\r\n    return split;\r\n\r\n}","\r\nimport { wrapRangeWithElement, setSelectionFlags, setSelectionBetweenTwoNodes, pasteHtmlAtCaret} from '../range.service';\r\nimport { normalizeElement } from '../textEditor.service';\r\nimport { getInheirtCss, setStyles, getStyle, normalizeStyle } from '../style.service';\r\n// import { elementToJson } from '../elements.service';\r\nimport { splitHTML } from '../../utilis/splitHTML';\r\n\r\n//TODO:review\r\n//should we use the clipboard as string ? or pass in other way as json ? \r\nexport default class CopyPaste {\r\n    constructor(target) {\r\n        this.uniqeID = 'styleit-copy-paste-on-action';\r\n        if (!target) {\r\n            //TODO: use the validator\r\n            console.error('[-] Copy Paste => target is null');\r\n            return null;\r\n        }\r\n        this.target = target;\r\n        this.onPaste = (e) => {\r\n            const stringToHTML = function (str) {\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(str, 'text/html');\r\n                return doc.body;\r\n            };\r\n            const clip = e.clipboardData.getData('text/html');\r\n            const markup = stringToHTML(clip);\r\n            const isLocalElement = markup.querySelector(`.${this.uniqeID}`);\r\n            if (isLocalElement) {\r\n                // review: should we create new on every paste ?\r\n                pasteHtmlAtCaret(isLocalElement.outerHTML);\r\n                let pastedElement = this.target.querySelector(`.${this.uniqeID}`);\r\n                if (pastedElement) {\r\n                    Array.from(pastedElement.querySelectorAll('span')).forEach(child => {\r\n                        const style = getStyle(child);\r\n                        normalizeStyle(child);\r\n                        for (const key in style) {\r\n                            if (style.hasOwnProperty(key)) {\r\n                                const foundedEl = child.parentElement.closest(`[style*='${key}']`);\r\n                                if (foundedEl) {\r\n                                    splitHTML(child, foundedEl);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                    Array.from(this.target.querySelectorAll(`.${this.uniqeID}`)).forEach(flag => flag.classList.remove(this.uniqeID));\r\n                    normalizeElement(this.target);\r\n                }\r\n\r\n            }\r\n            else {\r\n                let paste = (e.clipboardData || window.clipboardData).getData('text');\r\n                const selection = window.getSelection();\r\n                if (!selection.rangeCount) return false;\r\n                selection.deleteFromDocument();\r\n                selection.getRangeAt(0).insertNode(document.createTextNode(paste));\r\n            }\r\n            e.preventDefault();\r\n        }\r\n        this.onCopy = (e) => {\r\n            //review: what should we can do here... it always array of one element..\r\n            const ranges = wrapRangeWithElement();\r\n            if(ranges.length === 0){\r\n                console.warn('no selected elements..');\r\n            }\r\n            // set flags to keep text selection..\r\n            let nodes = ranges.map(el => {\r\n                //clone the nodes and unwrap the wrapped textnodes on the dom..\r\n                const collectStyle = getInheirtCss(el, this.target);\r\n                setStyles(el, collectStyle);\r\n                return el.cloneNode(true);\r\n            });\r\n            \r\n            const { firstFlag, lastFlag } = setSelectionFlags(ranges[0], ranges[ranges.length - 1]);\r\n            ranges.forEach(we => we.unwrap());\r\n            \r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n            this.target.normalize();\r\n\r\n            const element = document.createElement('span');\r\n\r\n            nodes = nodes.reduce(function(filtered, node) {\r\n                //TODO: filtered by the valid tags..\r\n                if (node.nodeName === \"SPAN\") {\r\n                   filtered.push(node.outerHTML);\r\n                }\r\n                return filtered;\r\n              }, []);\r\n              element.innerHTML = nodes.join(\"\");\r\n            element.className = this.uniqeID;\r\n            // this.savedJson = elementToJson(element);\r\n            e.clipboardData.setData('text/html', element.outerHTML);\r\n            e.preventDefault();\r\n        }\r\n\r\n        this.target.addEventListener('paste', this.onPaste);\r\n        this.target.addEventListener('copy', this.onCopy);\r\n    }\r\n    Destroy() {\r\n        this.target.removeEventListener('paste', this.onPaste);\r\n        this.target.removeEventListener('copy', this.onCopy);\r\n        this.target = null;\r\n    }\r\n}","\r\nimport { collectStyleFromSelectedElement } from '../style.service';\r\n\r\n\r\n//TODO: review\r\n//question: how can we expose the collectedStyle ? \r\n//question: should we use this ? https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\nexport default class Inpsector {\r\n    constructor(target, onInspect) {\r\n\r\n        if (!target) {\r\n            console.error('[-] Inpsector => target is null');\r\n            return null;\r\n        }\r\n        //TODO: use the validator\r\n        this.onInspect = onInspect;\r\n        this.target = target;\r\n\r\n        const launchInspect = () => {\r\n            const collectedStyle = collectStyleFromSelectedElement(this.target);\r\n            if (typeof (this.onInspect) === \"function\")\r\n                this.onInspect(collectedStyle);\r\n        }\r\n        this.onKeyDown = (e) => {\r\n            //TODO: review\r\n            if (e.keyCode === 8 && this.target.children.length <= 1 && !this.target.textContent) {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            launchInspect();\r\n        }\r\n        this.onClick = () => {\r\n            launchInspect();\r\n        }\r\n\r\n        this.target.addEventListener('click', this.onClick);\r\n        this.target.addEventListener('keydown', this.onKeyDown);\r\n\r\n        this.Destroy = () => {\r\n            this.target.removeEventListener('click', this.onClick);\r\n            this.target.removeEventListener('keydown', this.onKeyDown);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","import DomUtilis from \"./utilis/DomUtilis\";\r\nimport CopyPaste from \"./services/copyPaste/copyPaste.service\";\r\nimport Inpsector from \"./services/Inspector/Inspector.service\";\r\nimport { elementToJson, JsonToElement } from \"./services/elements.service\";\r\n\r\n//TODO:review\r\nexport default class Connector {\r\n    constructor() {\r\n    }\r\n\r\n    Connect(element, options) {\r\n        if (typeof element === \"string\") {\r\n            element = document.getElementById(element);\r\n            if (!element) {\r\n                //TODO: use the validator\r\n                console.error('[-] =>connectWith should be element id or dom element..');\r\n                return null;\r\n            }\r\n        } else if (DomUtilis.isElement(element)) {\r\n            // valid..\r\n        } else {\r\n            //TODO: use the validator\r\n            console.error('[-] =>connectWith should be element id or dom element..');\r\n            return null;\r\n        }\r\n        this.RenderInnerHTML(element);\r\n        // element.contentEditable = 'true';\r\n        this.plugins = this.usePlugins(element, options);\r\n        return element;\r\n    }\r\n    //TODO: destory events..\r\n    //question: how to use the events ? \r\n    usePlugins(element, options) {\r\n        return {\r\n            copyPaste: new CopyPaste(element),\r\n            inspector: new Inpsector(element, options.onInspect)\r\n        }\r\n    }\r\n    RenderInnerHTML(element) {\r\n        const emptyElement = (node) => {\r\n            return new Promise((resolve) => {\r\n                while (node.firstElementChild) {\r\n                    node.firstElementChild.remove();\r\n                }\r\n                resolve();\r\n            })\r\n        }\r\n        const jsonContent = elementToJson(element);\r\n        \r\n        const renderedElement = JsonToElement(jsonContent);\r\n        \r\n        emptyElement(element).then(() => element.innerHTML = renderedElement.innerHTML);\r\n    }\r\n    Destroy(){\r\n      for (const key in this.plugins) {\r\n          if (this.plugins.hasOwnProperty(key)) {\r\n              const plugin = this.plugins[key];\r\n              debugger\r\n              plugin.Destroy();   \r\n          }\r\n      }  \r\n    }\r\n}\r\n\r\n","import { Ranger, wrapRangeWithElement, setSelectionFlags, setSelectionBetweenTwoNodes, setCaretAt, getTextNodes, getRanges } from \"./services/range.service\";\r\nimport { Modes } from './constants/Modes';\r\nimport { splitHTML } from \"./utilis/splitHTML\";\r\nimport { setStyle, toggleStyle, collectStyleFromSelectedElement } from \"./services/style.service\";\r\nimport { normalizeElement, removeZeroSpace } from \"./services/textEditor.service\";\r\nimport Connector from './connector';\r\nimport './components/custom/textSelected';\r\nimport { elementToJson, JsonToElement, getSelectedElement } from \"./services/elements.service\";\r\nexport default class Core {\r\n\r\n    // *target => can be Id of Element that should contain Editor instance or the element itself..\r\n    // *config =>  configuration passed t   o Tool constructor\r\n    //TODO: add target validations..;\r\n    constructor(target, config) {\r\n        this.__config = {\r\n            onInspect: undefined\r\n        };\r\n   \r\n        this.Connector = new Connector();\r\n        this.modeHandlers = {\r\n            [Modes.Toggle]: (v, key, value, OnOff) => this.onToggle(v, key, value, OnOff),\r\n            [Modes.Extend]: (v, key, value) => this.onExtend(v, key, value),\r\n        }\r\n        this.config = config ? Object.assign(this.__config, config) : this.__config;\r\n        this.events = {\r\n            styleChanged:  this.config.onInspect,\r\n        }\r\n        this.connectedElement = this.Connector.Connect(target, this.config);\r\n    }\r\n\r\n\r\n    Save() {\r\n        return elementToJson(this.connectedElement);\r\n    }\r\n    Load(json) {\r\n        return JsonToElement(json, this.connectedElement);\r\n    }\r\n    Destroy() {\r\n        this.Connector.Destroy();\r\n        const self = this;\r\n        for (const key in self) {\r\n            const instance = this[key];\r\n            instance = null;\r\n        }\r\n        this.connectedElement = null;\r\n    }\r\n    //TODO: review\r\n    //question : we want to handle and toggle any attribute ? \r\n    ToggleClass(className, isON) {\r\n        //here\r\n        if (typeof (className) !== \"string\") {\r\n            console.warn(\"className must be a string..\");\r\n            return null;\r\n        }\r\n\r\n        const elements = wrapRangeWithElement();\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n        const isToggleOn = (typeof (isON) === \"boolean\") ? isON : elements[0].closest(`[class='${className}']`);\r\n        if (!isToggleOn) {\r\n            elements.forEach(el => el.classList.add(className));\r\n        } else {\r\n            elements.forEach(el => {\r\n                if (el.parentElement) {\r\n                    const closestClass = el.parentElement.closest(`[class='${className}']`);\r\n                    if (closestClass) {\r\n                        const split = splitHTML(el, closestClass);\r\n                        if (split) {\r\n                            split.center.removeClassName(className);\r\n                        }\r\n                    }\r\n                } else {\r\n                    el.removeClassName(className);\r\n                }\r\n            })\r\n        }\r\n\r\n        //This is how i make the text selection, i dont know if this is good way, but it works..\r\n        const { firstFlag, lastFlag } = setSelectionFlags(elements[0], elements[elements.length - 1]); //Set Flag at last\r\n\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible..\r\n\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n    }\r\n    /**\r\n        * @param {String} key - key of css \r\n        *  @param {String} value - value of css\r\n        *  @param {(Object | String)} Modes - mode from Modes => Extend or Toggle\r\n        *  @param {string} Modes.Extend - override style\r\n        *  @param {string} Modes.toggle - toggle style\r\n        *  @param {Object} [options] - options \r\n        */\r\n    execCmd(key, value, mode, options) {\r\n        this.connectedElement.normalize();\r\n        const txtNodes = getTextNodes(this.connectedElement);\r\n\r\n        mode = mode ? mode : Modes.Extend;\r\n        this.options = typeof options === 'object' ? options : {};\r\n        if (!this.isValid(key, value)) {\r\n            return;\r\n        }\r\n\r\n        this.ELEMENTS = wrapRangeWithElement();\r\n\r\n        //This is how i make the text selection, i dont know if this is good way, but it works..\r\n\r\n        const { firstFlag, lastFlag } = setSelectionFlags(this.ELEMENTS[0], this.ELEMENTS[this.ELEMENTS.length - 1]); //Set Flag at last\r\n        //======================================================================//\r\n        removeZeroSpace(getTextNodes(this.connectedElement));\r\n\r\n        let ToggleMode;//Declare toggle mode, The first element determines whether it is on or off\r\n\r\n        this.ELEMENTS.forEach((element, i) => {\r\n            const result = this.modeHandlers[mode](element, key, value, ToggleMode);\r\n            if (mode === Modes.Toggle && typeof (ToggleMode) === 'undefined')\r\n                ToggleMode = result;\r\n        });\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible.. \r\n        //use the first and last flags to make the text selection and unwrap them..\r\n\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        this.dispatchEvent('styleChanged', collectStyleFromSelectedElement(this.connectedElement));\r\n    }\r\n    dispatchEvent(event, payload) {\r\n        if (this.events[event])\r\n            this.events[event](payload);\r\n    }\r\n    onToggle(element, key, value, OnOff) {\r\n        // detect if there is any parent with style to split.\r\n        //TODO: use the catch from options to detect more than one style or tag element.\r\n        const elementToSplit = element.closest(`[style*='${value}']`);\r\n        if (elementToSplit) {\r\n            if (typeof (OnOff) === 'undefined')\r\n                OnOff = false;\r\n            //unbold\r\n            const splitElements = splitHTML(element, elementToSplit);\r\n            // if there is no split elements, its error!\r\n            if (splitElements) {\r\n                toggleStyle(splitElements.center, key, value, OnOff);\r\n                if (this.ELEMENTS.length === 1 && !this.ELEMENTS[0].textContent.trim()) {\r\n                    splitElements.center.innerHTML += \"&#8203;\"\r\n                    const s = document.createElement(\"span\");\r\n                    s.innerHTML = \"&#8203;\"\r\n                    splitElements.center.appendChild(s);\r\n                    setCaretAt(s);\r\n                }\r\n\r\n            } else {\r\n                console.error('splitHTML return null');\r\n            }\r\n        }\r\n        else {\r\n            if (typeof (OnOff) === 'undefined')\r\n                OnOff = true;\r\n            //bold\r\n            toggleStyle(element, key, value, OnOff);\r\n            normalizeElement(element);\r\n        }\r\n\r\n        return OnOff;\r\n    }\r\n    onExtend(element, key, value) {\r\n        const elementToSplit = element.closest(`[style*='${key}']`);;\r\n        if (elementToSplit) {\r\n            const splitElements = splitHTML(element, elementToSplit);\r\n            if (splitElements) {\r\n                setStyle(splitElements.center, key, value);\r\n            } else {\r\n                console.error('splitHTML return null');\r\n            }\r\n        }\r\n        else {\r\n            setStyle(element, key, value);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    isValid(key, value) {\r\n        if (!this.connectedElement) {\r\n            console.error('please use connectWith method')\r\n            return false;\r\n        };\r\n        if (this.connectedElement.contentEditable !== \"true\") {\r\n            return false;\r\n        }\r\n        if (typeof key !== \"string\" && typeof value !== \"string\") {\r\n            return false;\r\n        }\r\n        var selectedElement = getSelectedElement();\r\n        if (selectedElement && (selectedElement.ischildOf(this.connectedElement) || selectedElement === this.connectedElement)) {\r\n            return true;\r\n        }\r\n        ;\r\n    }\r\n}","import Core from './StyleIt/index';\r\nimport { Modes } from './StyleIt/constants/Modes';\r\n\r\nexport default class StyleIt {\r\n  //expose only the relevant methods..\r\n  constructor(target, config) {\r\n    //TODO: validate target & config..\r\n    const styleIt = new Core(target, config);\r\n    if (styleIt) {  \r\n      this.ExecCmd = styleIt.execCmd;\r\n      this.ToggleClass = styleIt.ToggleClass;\r\n      this.Save = styleIt.Save;\r\n      this.Load = styleIt.Load;\r\n      this.Destroy = styleIt.Destroy;\r\n      this.Modes = Modes;\r\n      //========================================//\r\n      this.ToggleClass = this.ToggleClass.bind(styleIt);\r\n      this.ExecCmd = this.ExecCmd.bind(styleIt);\r\n      this.Save = this.Save.bind(styleIt);\r\n      this.Load = this.Load.bind(styleIt);\r\n      this.Destroy = this.Destroy.bind(styleIt);\r\n    }\r\n  }\r\n}"],"sourceRoot":""}