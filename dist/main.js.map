{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/StyleIt/components/custom/textSelected.js","webpack:///./src/StyleIt/services/range.service.js","webpack:///./src/StyleIt/utilis/DomUtilis.js","webpack:///./src/StyleIt/services/className.service.js","webpack:///./src/StyleIt/services/attr.service.js","webpack:///./src/StyleIt/utilis/merger.js","webpack:///./src/StyleIt/services/textEditor.service.js","webpack:///./src/StyleIt/services/elements.service.js","webpack:///./src/StyleIt/services/style.service.js","webpack:///./src/StyleIt/rules/rules.js","webpack:///./src/StyleIt/utilis/splitHTML.js","webpack:///./src/StyleIt/services/copyPaste/copyPaste.service.js","webpack:///./src/StyleIt/services/Inspector/Inspector.service.js","webpack:///./src/StyleIt/services/keyPress/KeyPress.js","webpack:///./src/StyleIt/connector.js","webpack:///./src/StyleIt/index.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","default","TextSelection","getAttribute","innerHTML","HTMLElement","customElements","createInnerWrapperElement","element","options","innerSpan","document","createElement","el","Array","from","childNodes","forEach","child","appendChild","GetClosestBlockElement","window","getComputedStyle","display","parentElement","wrapRangeWithElement","ranges","sel","getSelection","rangeCount","getRangeAt","getRanges","map","wrapperEl","range","wrapNode","isCollapsed","startNode","startContainer","endNode","endContainer","startOffset","endOffset","node","currentRange","createRange","currentWrapper","cloneNode","selectNodeContents","nodeType","setStart","setEnd","surroundContents","createWrapperFunction","getRangeTextNodes","wrapRangeText","undefined","flat","getTextNodes","walker","body","ownerDocument","createTreeWalker","NodeFilter","SHOW_TEXT","textNodes","nextNode","push","rangeIntersectsNode","intersectsNode","rangeA","rangeB","selectNode","e","createRangeFromNode","compareBoundaryPoints","Range","END_TO_START","START_TO_END","container","commonAncestorContainer","parentNode","filter","textContent","length","isNonEmptyTextNode","setSelectionBetweenTwoNodes","firstFlag","lastFlag","_options","remove","assign","setBaseAndExtent","unwrap","setSelectionFlags","firstElement","LastElement","setAttribute","prepend","obj","style","wrapper","elements","parents","isArray","_","insertBefore","_el","Document","getSelectedElement","anchorNode","Element","wrap","createSelection","createTextRange","moveToElementText","select","selection","removeAllRanges","addRange","ischildOf","parent","_wrap","getClasses","classList","normalizeClassName","removeEmptyClass","className","removeAttribute","querySelectorAll","concat","clear","getAttributes","getAll","attributes","attrs","Text","insertAfter","newNode","nextSibling","replaceNode","replacementNode","extraContents","extractContents","removeClassName","mergeNodeContect","DomUtilis","isElement","nodeName","Node","ELEMENT_NODE","firstChild","firstElementChild","_elementProps","getStyle","classes","styleValue","trim","attr","normalizeStyle","attrValue","add","normalizeElement","mergeTwoNodes","elementOne","elementTwo","_elementsData","commoncLasses","classes1","classes2","c1","c2","includes","commonStyles","style1","style2","commmonStyles","style1Values","style2Values","clearElementClasses","clearElementStyles","children","recurse","_normalize","mergeNodesStyles","merged","nextElement","mergeNodesContent","mergedContent","normalize","unwrapped","ancNode","extentNode","JsonToElement","jsonObject","createHtmlElement","jsElement","isShouldRenderAttrs","tag","createTextNode","href","target","collectedStyle","styles","collectStyles","join","JsonObjectToStyleString","renderAttrs","type","Levels","jsChild","htmlElement","elementToJson","level","json","isValid","replace","keys","cn","v","getInheirtCss","fromElement","toElement","intailStyle","currectElement","toggleStyle","isOn","setStyle","data","textDecoration","closest","splits","splitHTML","center","rule","collectStyleFromSelectedElement","connectecElement","split","keyValue","setAttrs","getInheirtAttributes","_parent","findIndex","getInheirtClassNames","template","centerTemplate","leftTemplate","leftRange","rightTemplate","rightRange","left","right","CopyPaste","uniqeID","onPaste","event","id","clipboardData","clip","getData","markup","rep","temp","nodes","notValid","walkTheDOM","func","rendered","newEl","br","arr","index","preventDefault","html","deleteContents","lastNode","frag","createDocumentFragment","insertNode","cloneRange","setStartAfter","collapse","pasteHtmlAtCaret","addEventListener","onCopy","removeEventListener","Inpsector","onInspect","launchInspect","onKeyDown","keyCode","onClick","Destroy","KeyPress","keypress","ctrlKey","Connector","getElementById","RenderInnerHTML","plugins","usePlugins","copyPaste","inspector","keyPress","onKeyPress","renderedElement","Promise","resolve","then","Core","config","__config","modeHandlers","Modes","Toggle","onToggle","Extend","onExtend","events","styleChanged","connectedElement","Connect","isON","closestClass","ELEMENTS","caretHolder","createCaretPlacement","unWrap","selector","txtNode","closestElementToUnWrap","ToggleMode","TEXT_NODE","onOff","result","charIndex","focus","textNode","setCaretAt","dispatchEvent","atNode","payload","elementToSplit","splitElements","createBlockStyle","splitBlocks","blockElement","findBlock","computed","as","createInlineStyle","span","wrapTextNodeWithAppendStyle","createBlockElAndStyleIt","pargh","contentEditable","selectedElement","StyleIt","styleIt","ExecCmd","execCmd","ToggleClass","Save","Load"],"mappings":"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","file":"styleit-api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"styleit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"styleit\"] = factory();\n\telse\n\t\troot[\"styleit\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = require('./src').default;\r\n","\r\nclass TextSelection extends HTMLElement {\r\n    constructor(props) {\r\n      super();\r\n    }\r\n    connectedCallback(){\r\n      const createZeroSpace = this.getAttribute('zero-space');\r\n      if(createZeroSpace === \"true\"){\r\n        this.innerHTML = \"&#8203;\";\r\n\r\n      }\r\n    }\r\n  }\r\n  customElements.define('text-selection', TextSelection); ","\r\nexport function createInnerWrapperElement(element, options) {\r\n  if (typeof (options) !== \"object\") options = {};\r\n  let innerSpan = document.createElement(options.el || \"span\");\r\n  Array.from(element.childNodes).forEach(child => innerSpan.appendChild(child));\r\n  element.appendChild(innerSpan);\r\n  return innerSpan;\r\n}\r\nexport function GetClosestBlockElement(element) {\r\n  if (window.getComputedStyle(element).display === \"block\") return element;\r\n  let parentElement = element.parentElement;\r\n  while (parentElement && window.getComputedStyle(parentElement).display !== \"block\") {\r\n    if (parentElement.parentElement) {\r\n      parentElement = parentElement.parentElement;\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return parentElement;\r\n}\r\n//TODO:review\r\n  export function wrapRangeWithBlockElement(limitElement) {\r\n    const wrapElementWithBlock = (el) =>{\r\n      let wEl = \"div\";\r\n      if(el.nodeName === \"SPAN\"){\r\n        wEl = \"p\";\r\n      }\r\n      const wrapper = document.createElement(wEl);\r\n      el.wrap(wrapper);\r\n      return wrapper;\r\n    }\r\n    const elements = [];\r\n    let nodes = wrapRangeWithElement();\r\n    nodes.forEach(el => {\r\n      const blockEl = GetClosestBlockElement(el);\r\n      if (blockEl) {\r\n        if( blockEl.ischildOf(limitElement)){\r\n          const founded = elements.find(block=>blockEl.ischildOf(block));\r\n          if(!founded)\r\n          elements.push(blockEl);\r\n        }else{\r\n          const _wrapper = wrapElementWithBlock(el);\r\n          elements.push(_wrapper);\r\n        }\r\n      } else {\r\n       const _wrapper = wrapElementWithBlock(el);\r\n        elements.push(_wrapper);\r\n\r\n      }\r\n    });\r\n    return {\r\n      nodes: nodes,\r\n      blocks: elements\r\n    }\r\n    return elements;\r\n  }\r\n  export function wrapRangeWithElement() {\r\n    const ranges = getRanges();\r\n    return ranges.map(r => {\r\n      return wrapRangeText(undefined, r);\r\n    }).flat();\r\n  }\r\n  export function getRanges() {\r\n    let ranges = [];\r\n\r\n    const sel = window.getSelection();\r\n\r\n    for (let i = 0; i < sel.rangeCount; i++) {\r\n      ranges[i] = sel.getRangeAt(i);\r\n    }\r\n    return ranges;\r\n  }\r\n  // return all text nodes that are contained within `el`\r\n  export function getTextNodes(el) {\r\n    el = el || document.body\r\n\r\n    var doc = el.ownerDocument || document,\r\n      walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false),\r\n      textNodes = [],\r\n      node = walker.nextNode();\r\n\r\n    while (node) {\r\n      textNodes.push(node);\r\n      node = walker.nextNode();\r\n    }\r\n    return textNodes\r\n  }\r\n  export function rangesIntersect(rangeA, rangeB) {\r\n    return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 &&\r\n      rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1\r\n  }\r\n  export function createRangeFromNode(node) {\r\n    var range = node.ownerDocument.createRange()\r\n    try {\r\n      range.selectNode(node)\r\n    } catch (e) {\r\n      range.selectNodeContents(node)\r\n    }\r\n    return range\r\n  }\r\n  export function getCaretCharacterOffsetWithin(element) {\r\n    var caretOffset = 0;\r\n    var doc = element.ownerDocument || element.document;\r\n    var win = doc.defaultView || doc.parentWindow;\r\n    var sel;\r\n    if (typeof win.getSelection != \"undefined\") {\r\n      sel = win.getSelection();\r\n      if (sel.rangeCount > 0) {\r\n        var range = win.getSelection().getRangeAt(0);\r\n        var preCaretRange = range.cloneRange();\r\n        preCaretRange.selectNodeContents(element);\r\n        preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n        caretOffset = preCaretRange.toString().length;\r\n      }\r\n    } else if ((sel = doc.selection) && sel.type != \"Control\") {\r\n      var textRange = sel.createRange();\r\n      var preCaretTextRange = doc.body.createTextRange();\r\n      preCaretTextRange.moveToElementText(element);\r\n      preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\r\n      caretOffset = preCaretTextRange.text.length;\r\n    }\r\n    return caretOffset;\r\n  }\r\n  export function setCaretAt(element, charIndex) {\r\n    var node = element;\r\n    node.focus();\r\n    var textNode = Array.from(node.childNodes).filter(child => child.nodeType === Node.TEXT_NODE);\r\n    var range = document.createRange();\r\n    range.setStart(textNode[0], charIndex);\r\n    range.setEnd(textNode[0], charIndex);\r\n    var sel = window.getSelection();\r\n    sel.removeAllRanges();\r\n    sel.addRange(range);\r\n  }\r\n  export function pasteHtmlAtCaret(html) {\r\n    var sel, range;\r\n    if (window.getSelection) {\r\n      // IE9 and non-IE\r\n      sel = window.getSelection();\r\n      if (sel.getRangeAt && sel.rangeCount) {\r\n        range = sel.getRangeAt(0);\r\n        range.deleteContents();\r\n\r\n        // Range.createContextualFragment() would be useful here but is\r\n        // only relatively recently standardized and is not supported in\r\n        // some browsers (IE9, for one)\r\n        let el;\r\n        if (typeof (html) === \"string\") {\r\n          el = document.createElement(\"div\");\r\n          el.innerHTML = html;\r\n        }\r\n        else if (typeof (html) === \"object\") {\r\n          el = html;\r\n        }\r\n\r\n        var frag = document.createDocumentFragment(), node, lastNode;\r\n        while ((node = el.firstChild)) {\r\n          lastNode = frag.appendChild(node);\r\n        }\r\n        range.insertNode(frag);\r\n\r\n        // Preserve the selection\r\n        if (lastNode) {\r\n          range = range.cloneRange();\r\n          range.setStartAfter(lastNode);\r\n          range.collapse(true);\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  export function rangeIntersectsNode(range, node) {\r\n    if (range.intersectsNode) {\r\n      return range.intersectsNode(node)\r\n    } else {\r\n      return rangesIntersect(range, createRangeFromNode(node))\r\n    }\r\n  }\r\n  export function getRangeTextNodes(range) {\r\n    var container = range.commonAncestorContainer,\r\n      nodes = getTextNodes(container.parentNode || container)\r\n\r\n    return nodes.filter((node) => {\r\n      return rangeIntersectsNode(range, node) && isNonEmptyTextNode(node)\r\n    })\r\n  }\r\n  export function isNonEmptyTextNode(node) {\r\n    return node.textContent.length > 0\r\n  }\r\n  export function removeElement(el) {\r\n    if (el.parentNode) {\r\n      el.parentNode.removeChild(el)\r\n    }\r\n  }\r\n  export function replaceNode(replacementNode, node) {\r\n    if (typeof node.parentNode !== \"undefined\") {\r\n      removeElement(replacementNode);\r\n      node.parentNode.insertBefore(replacementNode, node);\r\n      removeElement(node);\r\n    }\r\n  }\r\n  export function selectText(node) {\r\n    if (document.body.createTextRange) {\r\n      const range = document.body.createTextRange();\r\n      range.moveToElementText(node);\r\n      range.select();\r\n    } else if (window.getSelection) {\r\n      const selection = window.getSelection();\r\n      const range = document.createRange();\r\n      range.selectNodeContents(node);\r\n      selection.removeAllRanges();\r\n      selection.addRange(range);\r\n    } else {\r\n      console.warn(\"Could not select text in node: Unsupported browser.\");\r\n    }\r\n  }\r\n  export function insertAfter(newNode, referenceNode) {\r\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n  }\r\n  export function createWrapperFunction(wrapperEl, range) {\r\n    var startNode = range.startContainer,\r\n      endNode = range.endContainer,\r\n      startOffset = range.startOffset,\r\n      endOffset = range.endOffset\r\n\r\n    return function wrapNode(node) {\r\n      var currentRange = document.createRange(),\r\n        currentWrapper = wrapperEl.cloneNode()\r\n\r\n      currentRange.selectNodeContents(node);\r\n      if (node === startNode && startNode.nodeType === 3) {\r\n        currentRange.setStart(node, startOffset)\r\n        startNode = currentWrapper\r\n        startOffset = 0\r\n      }\r\n      if (node === endNode && endNode.nodeType === 3) {\r\n        currentRange.setEnd(node, endOffset)\r\n        endNode = currentWrapper;\r\n        endOffset = 1\r\n      }\r\n      currentRange.surroundContents(currentWrapper)\r\n      return currentWrapper\r\n    }\r\n  }\r\n  export function getAllNodes() {\r\n    var nodes, range;\r\n    if (typeof range === 'undefined') {\r\n      // get the current selection if no range is specified\r\n      range = window.getSelection().getRangeAt(0)\r\n    }\r\n    if (range.isCollapsed) {\r\n      // nothing to wrap\r\n      return []\r\n    }\r\n    nodes = getRangeTextNodes(range)\r\n    nodes = nodes.map(node => {\r\n      if (node !== null) {\r\n        while (node.nodeType === 3) {\r\n          node = node.parentNode;\r\n        }\r\n        return node;\r\n      }\r\n      return null;\r\n    });\r\n    return nodes\r\n  }\r\n  export function wrapRangeText(wrapperEl, range) {\r\n    var nodes, wrapNode;\r\n\r\n    if (typeof range === 'undefined') {\r\n      // get the current selection if no range is specified\r\n      range = window.getSelection().getRangeAt(0)\r\n    }\r\n\r\n    if (range.isCollapsed) {\r\n      // nothing to wrap\r\n      return []\r\n    }\r\n\r\n    if (typeof wrapperEl === 'undefined') {\r\n      wrapperEl = 'span'\r\n    }\r\n\r\n    if (typeof wrapperEl === 'string') {\r\n      // assume it's a tagname\r\n      wrapperEl = document.createElement(wrapperEl);\r\n    }\r\n\r\n    wrapNode = createWrapperFunction(wrapperEl, range)\r\n\r\n    nodes = getRangeTextNodes(range)\r\n\r\n    nodes = nodes.map(wrapNode);\r\n    return nodes\r\n  }\r\n  export function setSelectionBetweenTwoNodes(firstFlag, lastFlag,options = {}) {\r\n     const _options = {remove:true};\r\n     Object.assign(_options,options);\r\n        document.getSelection().setBaseAndExtent(firstFlag, 0, lastFlag, lastFlag.childNodes.length);\r\n        if(_options.remove){\r\n          [firstFlag, lastFlag].forEach(e => e.unwrap());\r\n        }\r\n  }\r\n  export function setSelectionFlags(firstElement, LastElement) {\r\n    const selection = window.getSelection();\r\n    const firstFlag = document.createElement('text-selection');\r\n    firstFlag.setAttribute('zero-space', firstElement.textContent.length === 0)\r\n    const lastFlag = document.createElement('text-selection');\r\n    lastFlag.setAttribute('zero-space', LastElement.textContent.length === 0)\r\n\r\n    firstElement.prepend(firstFlag); //Set flag the first\r\n    LastElement.appendChild(lastFlag); //Set Flag at last\r\n    return { firstFlag, lastFlag };\r\n  }\r\n  export function getSelectedHTML() {\r\n    var range;\r\n    if (window.getSelection) {\r\n      var selection = window.getSelection();\r\n      if (selection.focusNode === null) return;\r\n      range = selection.getRangeAt(0);\r\n      if (range.collapsed) {\r\n        return;\r\n      }\r\n      var content = range.extractContents();\r\n      return {\r\n        content: content,\r\n        range: range\r\n      }\r\n    }\r\n  }\r\n  export function saveSelection() {\r\n    if (window.getSelection) {\r\n      var sel = window.getSelection();\r\n      if (sel.getRangeAt && sel.rangeCount) {\r\n        return sel.getRangeAt(0);\r\n      }\r\n    } else if (document.selection && document.selection.createRange) {\r\n      return document.selection.createRange();\r\n    }\r\n    return null;\r\n  };\r\n  export function restoreSelection(range) {\r\n    if (range) {\r\n      if (window.getSelection) {\r\n        var sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n      } else if (document.selection && range.select) {\r\n        range.select();\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n","class DomUtilis {\r\n\r\n\r\n  isElement(obj) {\r\n    try {\r\n      return obj instanceof HTMLElement;\r\n    }\r\n    catch (e) {\r\n      return (typeof obj === \"object\") &&\r\n        (obj.nodeType === 1) && (typeof obj.style === \"object\") &&\r\n        (typeof obj.ownerDocument === \"object\");\r\n    }\r\n  }\r\n  \r\n  wrap(el, wrapper) {\r\n    //el should be array\r\n    let elements = [];\r\n    if (Array.isArray(el)) {\r\n      elements = el;\r\n    } else {\r\n      elements = [el];\r\n    }\r\n\r\n    const parents = elements.map(e => e.parentNode);\r\n    var parentsDiff = parents.filter((p, _, self) => { return self[0] !== p });\r\n    if (parentsDiff.length !== 0) {\r\n      console.log(`[wrap] found ${parentsDiff.length} different parents 😅`);\r\n      return;\r\n    }\r\n    parents[0].insertBefore(wrapper, elements[0])\r\n    elements.forEach(_el => wrapper.appendChild(_el))\r\n\r\n    return true;\r\n  }\r\n}\r\nexport default new DomUtilis(); \r\n\r\nDocument.prototype.getSelectedElement=function(){var e=document.getSelection();if(null!==e){var t=e.anchorNode;if(null!==t){for(;3===t.nodeType;)t=t.parentNode;return t}return null}}\r\nElement.prototype.wrap = ( wrapper) => {\r\n  if (typeof wrapper === \"string\") wrapper = document.createElement(wrapper);\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nElement.prototype.createSelection = function() {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(this);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(this);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } \r\n}\r\nElement.prototype.ischildOf = function(parent) {\r\n  if (!parent) return false;\r\n  let node = this.parentNode;\r\n  while (node != null) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\nconst _wrap = function(wrapper) {\r\n  if (!this.parentNode) return false;\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nText.prototype.wrap = _wrap;\r\nElement.prototype.wrap = _wrap;\r\nElement.prototype.insertAfter = function (newNode) {\r\n  this.parentNode.insertBefore(newNode, this.nextSibling);\r\n}\r\nElement.prototype.replaceNode = function(replacementNode) {\r\n  if (this.parentNode) {\r\n    this.parentNode.insertBefore(replacementNode, this)\r\n    this.remove();\r\n    return replacementNode;\r\n  }\r\n}\r\nElement.prototype.unwrap = function() {\r\n  var range = document.createRange()\r\n  range.selectNodeContents(this)\r\n  var extraContents = range.extractContents();\r\n  this.replaceNode(extraContents)\r\n  return extraContents;\r\n}\r\n","\r\nexport function getInheirtClassNames(fromElement, toElement) {\r\n    var classes = [];\r\n    var _parent = fromElement;\r\n    while (_parent && _parent.ischildOf(toElement.parentElement)) {\r\n        let map = _parent.classList;\r\n        Array.from(map).forEach(name => {\r\n            if (classes.findIndex(c => c === name) < 0) {\r\n                classes.push(name);\r\n            }\r\n        })\r\n        _parent = _parent.parentElement;\r\n    }\r\n    return classes;\r\n}\r\nexport function getClasses(element) {\r\n    return Array.from(element.classList);\r\n}\r\n\r\n//TODO: review\r\n//question: is expensive too much? \r\nexport function normalizeClassName(element) {\r\n    function removeEmptyClass(element){\r\n        if (!element.className) {\r\n            element.removeAttribute('class');\r\n        }\r\n    }\r\n    function clear(element) {\r\n        removeEmptyClass(element);\r\n        Array.from(element.classList).forEach(c => {\r\n            Array.from(element.querySelectorAll(`[class='${c}']`)).forEach(node =>{\r\n                node.classList.remove(c)\r\n                removeEmptyClass(node)\r\n            });\r\n        })\r\n    }\r\n    \r\n    const elements = Array.from(element.querySelectorAll('span[class]')).concat(element);\r\n    elements.forEach(child => clear(child));\r\n}\r\n//TODO: review\r\n//question: how about this name ? \r\nElement.prototype.removeClassName = function(className){\r\nconst nodes = Array.from(this.querySelectorAll(`[class='${className}']`)).concat(this);\r\nnodes.forEach(node=>node.classList.remove(className));\r\n}","\r\n\r\n//class and style not includes yet..\r\nexport function getInheirtAttributes(fromElement, toElement) {\r\n    var attributes = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        var attrs = currectElement.attributes;\r\n        for(var i = attrs.length - 1; i >= 0; i--) {\r\n            if(attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\"){\r\n                if(!attributes[attrs[i].name ]){\r\n                    attributes[attrs[i].name ] = attrs[i].value;\r\n                }\r\n            }\r\n          }\r\n      currectElement = currectElement.parentElement;\r\n    }\r\n    return attributes;\r\n  }\r\n  export function getAttributes(element,getAll){\r\n    var attributes = {};\r\n    var attrs = element.attributes;\r\n    for(var i = attrs.length - 1; i >= 0; i--) {\r\n        if(getAll  || (!getAll && attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\")){\r\n            if(!attributes[attrs[i].name ]){\r\n                attributes[attrs[i].name ] = attrs[i].value;\r\n            }\r\n        }\r\n      }\r\n      return attributes;\r\n  }","import DomUtilis from \"./DomUtilis\"\r\nimport { getStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { getClasses, normalizeClassName } from \"../services/className.service\";\r\nimport { getAttributes } from \"../services/attr.service\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\nimport Config from '../_app.config.json';\r\n\r\n\r\n\r\n/**\r\n *  * Returns the new merge element\r\n * @param {Element} DomElement - element to merge with his first child\r\n */\r\nexport const mergeNodeContect = node => {\r\n\r\n    if (!DomUtilis.isElement(node)) {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (node.nodeName !== \"SPAN\" || node.nodeType !== Node.ELEMENT_NODE) {\r\n        console.error('[mergeNodeContect] node is not a span');\r\n        return null;\r\n    }\r\n\r\n    const firstChild = node.firstElementChild;\r\n    if (!firstChild) {\r\n        console.error('[mergeNodeContect] first child not found');\r\n        return null;\r\n    }\r\n    if (firstChild.nodeName !== \"SPAN\" || firstChild.nodeType !== Node.ELEMENT_NODE) {\r\n        console.error('[mergeNodeContect] firstChild is not a span');\r\n        return null;\r\n    }\r\n    if (node.textContent !== firstChild.textContent) {\r\n        console.error('[mergeNodeContect] text content is different');\r\n        return null;\r\n    }\r\n    const _elementProps = {\r\n        style: getStyle(node),\r\n        classes: getClasses(node),\r\n        attrs: getAttributes(node)\r\n    }\r\n    for (const style in _elementProps.style) {\r\n        const styleValue = _elementProps.style[style];\r\n        firstChild.style[style] = (firstChild.style[style] + \" \" + styleValue).trim();\r\n    }\r\n    normalizeStyle(firstChild);\r\n\r\n    for (const attr in _elementProps.attrs) {\r\n        const attrValue = _elementProps.attrs[attr];\r\n        firstChild.setAttribute(attr, attrValue);\r\n    }\r\n    firstChild.classList.add(..._elementProps.classes);\r\n    normalizeClassName(firstChild);\r\n    normalizeElement(firstChild);\r\n    if(firstChild.parentElement)\r\n    firstChild.parentElement.unwrap();\r\n    return firstChild;\r\n};\r\nexport function mergeTwoNodes(elementOne, elementTwo) {\r\n    console.log('[mergeTwoNodes] START');\r\n    if (!DomUtilis.isElement(elementOne) || !DomUtilis.isElement(elementTwo)) {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (elementOne.nodeName !== \"SPAN\" || elementTwo.nodeName !== \"SPAN\") {\r\n        console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    const _elementsData = [{\r\n        style: getStyle(elementOne),\r\n        classes: getClasses(elementOne),\r\n        attrs: getAttributes(elementOne)\r\n    },\r\n    {\r\n        style: getStyle(elementTwo),\r\n        classes: getClasses(elementTwo),\r\n        attrs: getAttributes(elementTwo)\r\n    }]\r\n    const getCommonClasses = (classes1, classes2) => {\r\n        if (!classes1 || !classes2)\r\n            return [];\r\n        const c1 = [...classes1];\r\n        const c2 = [...classes2];\r\n        return c1.filter(c => c2.includes(c));\r\n    }\r\n    const getCommonStyles = (style1, style2) => {\r\n        const commmonStyles = {};\r\n        for (const s in style1) {\r\n            if (!style2[s])\r\n                continue;\r\n\r\n            const style1Values = style1[s];\r\n            const style2Values = style2[s];\r\n            if (style2Values === style1Values) {\r\n                commmonStyles[s] = style2Values;\r\n            }\r\n        }\r\n        return commmonStyles;\r\n    };\r\n    const commoncLasses = getCommonClasses(_elementsData[0].classes, _elementsData[1].classes);\r\n    console.log('commonClassses',commoncLasses,elementOne,elementTwo,_elementsData)\r\n\r\n    const commonStyles = getCommonStyles(_elementsData[0].style, _elementsData[1].style);\r\n    const buildWrappingElement = (commonStyles, commoncLasses) => {\r\n        const wrapper = document.createElement('span');\r\n        // handle styles\r\n        for (const s in commonStyles)\r\n            wrapper.style[s] = commonStyles[s];\r\n            \r\n\r\n        // handle classes\r\n        if (commoncLasses.length > 0) {\r\n            wrapper.classList.add(...commoncLasses);\r\n        }\r\n        if (wrapper.attributes.length === 0) {\r\n            wrapper.unwrap();\r\n            return null;\r\n        }\r\n        return wrapper;\r\n    }\r\n    const wrapper = buildWrappingElement(commonStyles, commoncLasses);\r\n    if (!wrapper) {\r\n        console.error('wrapper is null')\r\n        return null;\r\n    }\r\n\r\n    const clearElementClasses = (node, commoncLasses) => {\r\n        node.classList.remove(...commoncLasses);\r\n        normalizeClassName(node);\r\n    }\r\n    const clearElementStyles = (node, commonStyles) => {\r\n        for (const s in commonStyles)\r\n            node.style[s] = null;\r\n    }\r\n    const elements = [elementOne, elementTwo];\r\n    elements.forEach(e => {\r\n        clearElementClasses(e, commoncLasses);\r\n        clearElementStyles(e, commonStyles);\r\n    })\r\n\r\n    DomUtilis.wrap(elements, wrapper);\r\n    [...wrapper.children].forEach(c => {\r\n        normalizeElement(c)\r\n    })\r\n    return wrapper;\r\n};\r\n\r\n\r\nexport function mergeCommonValuesObject(obj1, obj2) {\r\n    let commonValues = {};\r\n    for (const key in obj1) {\r\n        if (obj2[key] && obj2[key] === obj1[key]) {\r\n            commonValues[key] = obj1[key]\r\n        }\r\n    }\r\n    return commonValues;\r\n}\r\n\r\nexport function mergeCommonArrays(arr1, arr2) {\r\n    const mergeArr = [];\r\n    Array.from(arr1).forEach(item => {\r\n        if (arr2.findIndex(i => i === item) > 0) {\r\n            mergeArr.push(item);\r\n        }\r\n    })\r\n    return mergeArr;\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { normalizeStyle } from \"./style.service\";\r\nimport { mergeNodeContect, mergeTwoNodes } from \"../utilis/merger\";\r\n\r\n/**\r\n * @param {Element} DomElement - element to normalize\r\n */\r\nexport function normalizeElement(el) {\r\n    const recurse = (element) => {\r\n        Array.from(element.children).forEach((child) => {\r\n            recurse(child);\r\n            _normalize(child);\r\n        })\r\n        const mergeNodesStyles = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((element) => {\r\n                let wrapper = element;\r\n                while (wrapper !== null) {\r\n                    const nextElement = wrapper.nextSibling;\r\n                    if (!nextElement)\r\n                        break;\r\n                    wrapper = mergeTwoNodes(wrapper, nextElement);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n\r\n        const mergeNodesContent = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((child) => {\r\n                let wrapper = child;\r\n                while (wrapper !== null) {\r\n                    wrapper = mergeNodeContect(wrapper);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n        let mergedStyles = false;\r\n        let mergedContent = false;\r\n        do {\r\n            _normalize(element);\r\n            mergedStyles = mergeNodesStyles(element);\r\n            mergedContent = mergeNodesContent(element);\r\n        } while (mergedContent);\r\n    }\r\n    el.normalize();\r\n    recurse(el);\r\n\r\n    function _normalize(element) {\r\n        element.normalize();\r\n        normalizeClassName(element);\r\n        normalizeStyle(element);\r\n        //TODO: normalizr attributes (no:style,className)\r\n        if (element && element.nodeName === \"SPAN\" && (!element.textContent.trim() || element.attributes.length === 0)) {\r\n            const unwrapped = element.unwrap();\r\n            unwrapped.normalize();\r\n            //TODO: check the return;\r\n            return unwrapped.parentElement;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {Array} textNodes - textnode to remove the zero space like : u200B\r\n */\r\nexport function removeZeroSpace(textNodes) {\r\n    if (!Array.isArray(textNodes)) {\r\n        textNodes = [textNodes];\r\n    }\r\n    textNodes.forEach(el => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.parentElement && el.parentElement.nodeName !== \"TEXT-SELECTION\") {\r\n            el.textContent = el.textContent.replace(/\\u200B/g, '');\r\n        }\r\n    })\r\n}\r\n","import { getStyle, JsonObjectToStyleString } from \"./style.service\";\r\nimport Levels from '../constants/Levels.json';\r\n\r\nexport function getSelectedElement() {\r\n    var node = document.getSelection();\r\n    if (node !== null) {\r\n        var ancNode = node.extentNode;\r\n        if (ancNode !== null) {\r\n            while (ancNode.nodeType === 3) {\r\n                ancNode = ancNode.parentNode;\r\n            }\r\n            // const el = (ancNode.nodeType === 3 ? ancNode.parentNode : node);\r\n            return ancNode;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexport function JsonToElement(jsonObject, parentElement) {\r\n    //TODO: create parentelement and jsonobject validation   \r\n    const renderAttrs = (jsElement, element) => {\r\n        if (jsElement.classList) {\r\n            element.classList = [...jsElement.classList];\r\n        }\r\n        if (jsElement.style) {\r\n            const collectedStyle = JsonObjectToStyleString(jsElement.style);\r\n            element.style = collectedStyle;\r\n        }\r\n        //TODO: other attrs...\r\n    }\r\n    const createHtmlElement = (jsElement) => {\r\n        const nodeType = jsElement.tag;\r\n        let element;\r\n        let isShouldRenderAttrs;\r\n        switch (nodeType) {\r\n            case \"#text\":\r\n                element = document.createTextNode(jsElement.textContent);\r\n                break;\r\n            case \"A\":\r\n                element = document.createElement(nodeType);\r\n                element.href = jsElement.href;\r\n                element.target = jsElement.target;\r\n                break;\r\n            default:\r\n                element = document.createElement(nodeType);\r\n                isShouldRenderAttrs = true;\r\n                break;\r\n        }\r\n        if (isShouldRenderAttrs && element) {\r\n            renderAttrs(jsElement, element);\r\n        }\r\n        return element;\r\n    }\r\n    if (!parentElement && jsonObject.type === Levels['0']) {\r\n        parentElement = createHtmlElement(jsonObject);\r\n    }\r\n    if (Array.isArray(jsonObject.children)) {\r\n        jsonObject.children.forEach(jsChild => {\r\n            const htmlElement = createHtmlElement(jsChild);\r\n            if (htmlElement) {\r\n                parentElement.appendChild(htmlElement);\r\n                JsonToElement(jsChild, htmlElement);\r\n            } else {\r\n                console.error('cant create dom element from json', jsChild);\r\n            }\r\n        });\r\n    }\r\n    return parentElement;\r\n}\r\nexport function elementToJson(node, level) {\r\n    \r\n    if (typeof (level) !== \"number\") level = 0;\r\n    const nodeType = node.nodeName;\r\n    let isShouldRenderAttrs = true;\r\n    let json = {};\r\n    let isValid = true;\r\n\r\n    if (Levels[level]) {\r\n        json.type = Levels[level];\r\n        level++;\r\n    }\r\n\r\n    switch (nodeType) {\r\n        case \"#text\":\r\n            json.tag = nodeType;\r\n            json.textContent = node.textContent.replace(/\\u200B/g, '');\r\n            isShouldRenderAttrs = false;\r\n            //question: replace \\n ?\r\n            if (!json.textContent.trim()) isValid = false;\r\n            break;\r\n        case \"A\":\r\n            json.tag = nodeType;\r\n            json.href = node.href;\r\n            json.target = node.target;\r\n            break;\r\n        default:\r\n            json.tag = nodeType;\r\n            //TODO: should we unwrap this node ? \r\n            break;\r\n    }\r\n    if (!isValid) return null;\r\n    if (isShouldRenderAttrs) {\r\n        //TODO: get attrs \r\n        const style = getStyle(node);\r\n        if (Object.keys(style).length > 0) {\r\n            json.style = style;\r\n        }\r\n        if (node.classList && node.classList.length > 0)\r\n            json.classList = [...node.classList];\r\n\r\n        if (node.childNodes && node.childNodes.length > 0)\r\n            json.children = [...node.childNodes].map((cn) => elementToJson(cn, level)).filter(v => v);\r\n    }\r\n\r\n    return json;\r\n\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { UseRules } from \"../rules/rules\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\n\r\nexport function getInheirtCss(fromElement, toElement) {\r\n    var intailStyle = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        let map = getStyle(currectElement);\r\n        for (const style in map) {\r\n            if (map.hasOwnProperty(style)) {\r\n                const value = map[style];\r\n                // text-decoration  could be twice like underline and strike therough.. \r\n                if (!intailStyle[style])\r\n                    intailStyle[style] = value;\r\n            }\r\n        }\r\n        currectElement = currectElement.parentElement;\r\n    }\r\n    return intailStyle;\r\n}\r\nexport function removeStyle(element, key, value) {\r\n    element.style[key] = element.style[key].replace(value, \"\");\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = el.style[key].replace(value, \"\");\r\n    })\r\n}\r\n//TOGGLE\r\nexport function toggleStyle(element, key, value, isOn) {\r\n    if (isOn) {\r\n        element.style[key] = element.style[key] + \" \" + value;\r\n    } else {\r\n        element.style[key] = element.style[key].replace(value, \"\");\r\n    }\r\n    normalizeStyle(element);\r\n    normalizeClassName(element);\r\n    Array.from(element.querySelectorAll(`[style*='${value}']`)).forEach(child => {\r\n        child.style[key] = child.style[key].replace(value, \"\");\r\n        normalizeStyle(child);\r\n        normalizeClassName(child);\r\n    })\r\n}\r\n//EXTEND\r\n//TODO: fix name\r\nexport function setStyles(element, jsonStyle) {\r\n    for (const key in jsonStyle) {\r\n        if (jsonStyle.hasOwnProperty(key)) {\r\n            const style = jsonStyle[key];\r\n            element.style[key] = style;\r\n        }\r\n    }\r\n}\r\n//TOGGLE\r\n//TODO: fix name\r\nexport function setStyle(element, key, value) {\r\n    element.style[key] = value;\r\n    if(key === \"color\"){\r\n        UseRules({element:element,key:'color',value:value});\r\n    }\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = null;\r\n        normalizeStyle(el);\r\n    });\r\n    //experimental: style the text decorations with color..\r\n    //TODO:review\r\n    // UseRules({element:element,key:key,value:value});\r\n}\r\nexport const collectStyleFromSelectedElement = (connectecElement) =>{   \r\n    const selectedElement = getSelectedElement();                \r\n    return getInheirtCss(selectedElement,connectecElement);\r\n}\r\n\r\nexport function normalizeStyle(element) {\r\n    if(!element) return null;\r\n    //TODO:review\r\n    const style = element.getAttribute('style');\r\n    if (!style) {\r\n        element.removeAttribute('style');\r\n    } else {\r\n        const collectStyles = getStyle(element);\r\n        for (const key in collectStyles) {\r\n            if (collectStyles.hasOwnProperty(key)) {\r\n                Array.from(element.querySelectorAll(`[style*='${collectStyles[key]}']`)).forEach(el => {\r\n                    el.style[key] = null;\r\n                    normalizeStyle(el);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function JsonObjectToStyleString(styles) {\r\n    let collectStyles = [];\r\n    for (const key in styles) {\r\n        if (styles.hasOwnProperty(key)) {\r\n            const style = styles[key];\r\n            collectStyles.push(`${key}:${style}`);\r\n        }\r\n    }\r\n    return collectStyles.join(';');\r\n}\r\nexport function getStyle(el) {\r\n    if (!el || !el.style) return {};\r\n    let styles = {};\r\n    let style = el.getAttribute('style');\r\n    if (style) {\r\n        let collectStyles = style.split(';');\r\n        if (Array.isArray(collectStyles)) {\r\n            collectStyles.forEach(style => {\r\n\r\n                const keyValue = style.split(':');\r\n                if (keyValue[1] && keyValue[0])\r\n                    styles[keyValue[0].trim()] = keyValue[1].trim();\r\n            })\r\n        }\r\n\r\n    }\r\n    return styles;\r\n}","import { setStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { splitHTML } from \"../utilis/splitHTML\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\n\r\n//TODO:review\r\nexport function UseRules(data) {\r\n    const ColorTextDecorationRule = (data) => {\r\n        if (data.key === \"color\") {\r\n            const textDecoration = data.element.closest(`[style*='text-decoration']`);\r\n            if (textDecoration) {\r\n                const splits = splitHTML(data.element, textDecoration);\r\n                if (splits) {\r\n                    normalizeStyle();\r\n                    setStyle(splits.center, 'text-decoration-color', `${data.value}`);\r\n                    for (const key in splits) {\r\n                        const element = splits[key];\r\n                        normalizeElement(element);\r\n                    }\r\n                } else {\r\n                    setStyle(textDecoration, 'text-decoration-color', `${data.value}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const Rules = [\r\n        ColorTextDecorationRule\r\n    ]\r\n    Rules.forEach(rule => rule(data));\r\n}","import DomUtilis from \"./DomUtilis\"\r\nimport { getInheirtCss } from \"../services/style.service\";\r\nimport { getInheirtAttributes } from \"../services/attr.service\";\r\nimport { getInheirtClassNames } from \"../services/className.service\";\r\n\r\n\r\nexport function splitHTML(fromElement, toElement) {\r\n\r\n    if (!fromElement.ischildOf(toElement)) {\r\n        console.error('fromElement must be child of toElement')\r\n        return null;\r\n    }\r\n    if (!DomUtilis.isElement(fromElement) || !DomUtilis.isElement(toElement)) {\r\n        console.error('fromElement && toElement must be dom elements..');\r\n        return null;\r\n    }\r\n    const setAttrs = (fromElement, toElement) => {\r\n        const styles = getInheirtCss(fromElement, toElement);\r\n        const attrs = getInheirtAttributes(fromElement, toElement);\r\n        const className = getInheirtClassNames(fromElement, toElement);\r\n        const template = document.createElement('span');\r\n        template.className = className.join(\" \");\r\n        for (const style in styles) {\r\n            const value = styles[style];\r\n            template.style[style] = value;\r\n        }\r\n        for (const attr in attrs) {\r\n            const value = attrs[attr];\r\n            template.setAttribute(attr, value);\r\n        }\r\n        return template;\r\n    }\r\n    fromElement.createSelection();\r\n    const centerElement = document.getSelectedElement();\r\n    const centerTemplate = setAttrs(centerElement, toElement);\r\n    //center\r\n    centerTemplate.appendChild(fromElement);\r\n    var sel = window.getSelection();\r\n    var range = sel.getRangeAt(0);\r\n    //left\r\n    range.setStart(toElement, 0);\r\n    const leftElement = document.getSelectedElement();\r\n    const leftTemplate = setAttrs(leftElement, toElement);\r\n    var leftRange = range.extractContents();\r\n    leftTemplate.appendChild(leftRange);\r\n    //right\r\n    range.setEnd(toElement, toElement.childNodes.length);\r\n    const rightElement = document.getSelectedElement();\r\n    const rightTemplate = setAttrs(rightElement, toElement);\r\n    var rightRange = range.extractContents();\r\n    rightTemplate.appendChild(rightRange);\r\n    const split = {\r\n        left: leftTemplate,\r\n        center: centerTemplate,\r\n        right: rightTemplate\r\n    }\r\n    toElement.innerHTML = \"\";\r\n    for (const el in split) {\r\n        const element = split[el];\r\n        toElement.appendChild(element);\r\n    }\r\n    toElement.unwrap();\r\n    return split;\r\n\r\n}","\r\nimport { wrapRangeWithElement, setSelectionFlags, setSelectionBetweenTwoNodes, pasteHtmlAtCaret} from '../range.service';\r\nimport { normalizeElement } from '../textEditor.service';\r\nimport { getInheirtCss, setStyles, getStyle, normalizeStyle } from '../style.service';\r\n// import { elementToJson } from '../elements.service';\r\nimport { splitHTML } from '../../utilis/splitHTML';\r\n\r\n//TODO:review\r\n//should we use the clipboard as string ? or pass in other way as json ? \r\nexport default class CopyPaste {\r\n    constructor(target) {\r\n        this.uniqeID = 'styleit-copy-paste-on-action';\r\n        if (!target) {\r\n            //TODO: use the validator\r\n            console.error('[-] Copy Paste => target is null');\r\n            return null;\r\n        }\r\n        this.target = target;\r\n        this.onPaste = (event) =>{\r\n            debugger\r\n            function walkTheDOM(node, func) {\r\n                func(node);\r\n                node = node.firstChild;\r\n                while (node) {\r\n                  walkTheDOM(node, func);\r\n                  node = node.nextSibling;\r\n                }\r\n              }\r\n            \r\n              const target = event.target;\r\n              const block = target.closest(`#${this.target.id}`);\r\n              if (block) {\r\n                const data = event.clipboardData || window.clipboardData;\r\n                let clip = data.getData('text/html').trim();\r\n                if (!clip) {\r\n                  clip = data.getData('text/plain').trim();    \r\n                  clip = clip.replace(/\\n/g, \"<br/>\")  \r\n                }\r\n                //TODO: regex all togheter!\r\n                let markup = clip;\r\n                [\"<html>\", \"<body>\", \"<!--StartFragment-->\", \"<!--EndFragment-->\", \"</body>\", \"</html>\"].\r\n                  forEach(rep => markup = markup.replace(rep, \"\"));\r\n                const temp = document.createElement(\"div\");\r\n                temp.innerHTML = markup.replace(/<!--([\\s\\S]*?)-->/g, \"\");\r\n            \r\n                const nodes = [];\r\n                // Example usage: Process all Text nodes on the page\r\n                const notValid = [\"META\", \"LINK\", \"SCRIPT\", \"TCXSPAN\", \"O:P\", \"STYLE\"];\r\n                // walkTheDOM(temp, function (node) {\r\n                //   if(node.nodeType === 8) {\r\n                //     node.remove();\r\n                //   }else if(node.nodeName ===\"STYLE\"){\r\n                //     node.remove();\r\n                //   }\r\n                // });\r\n                walkTheDOM(temp, function (node) {\r\n                  if (!notValid.includes(node.nodeName)) {\r\n                    nodes.push(node);\r\n                  }\r\n                });\r\n                \r\n                const rendered = document.createElement(\"div\");\r\n                document.body.appendChild(rendered);\r\n              \r\n                nodes.forEach((newEl,index) => {\r\n                  rendered.appendChild(newEl);\r\n                  if (newEl.textContent && newEl.nodeType === 1 && newEl.nodeName !== \"br\") {\r\n                    const computed = window.getComputedStyle(newEl);\r\n                    if (computed.display === \"block\") {\r\n                      const br = document.createElement(\"br\");\r\n                      newEl.insertAfter(br);\r\n                    }\r\n                  }\r\n                  if (newEl.nodeType !== 3 && newEl.nodeName !== \"BR\") {\r\n                    newEl.remove();\r\n                  }\r\n                });\r\n                const arr = Array.from(rendered.childNodes);\r\n                for (let index = 0; index < arr.length; index++) {\r\n                  const element = arr[index];\r\n                  if(!element.textContent.trim()){\r\n                    element.remove();\r\n                  }else{\r\n                    if(!arr[arr.length -1 ].textContent.trim()){\r\n                      arr[arr.length -1 ].remove();\r\n                    }\r\n                    break;\r\n                  }\r\n                }\r\n                event.preventDefault();\r\n                \r\n                pasteHtmlAtCaret(rendered);\r\n                  rendered.remove();\r\n              }\r\n        } \r\n        // this.onPaste = (e) => {\r\n        //     const stringToHTML = function (str) {\r\n        //         const parser = new DOMParser();\r\n        //         const doc = parser.parseFromString(str, 'text/html');\r\n        //         return doc.body;\r\n        //     };\r\n        //     const clip = e.clipboardData.getData('text/html');\r\n        //     const markup = stringToHTML(clip);\r\n        //     const isLocalElement = markup.querySelector(`.${this.uniqeID}`);\r\n        //     if (isLocalElement) {\r\n        //         pasteHtmlAtCaret(isLocalElement.outerHTML);\r\n        //         let pastedElement = this.target.querySelector(`.${this.uniqeID}`);\r\n        //         if (pastedElement) {\r\n        //             Array.from(pastedElement.querySelectorAll('span')).forEach(child => {\r\n        //                 const style = getStyle(child);\r\n        //                 normalizeStyle(child);\r\n        //                 for (const key in style) {\r\n        //                     if (style.hasOwnProperty(key)) {\r\n        //                         const foundedEl = child.parentElement.closest(`[style*='${key}']`);\r\n        //                         if (foundedEl) {\r\n        //                             splitHTML(child, foundedEl);\r\n        //                         }\r\n        //                     }\r\n        //                 }\r\n        //             });\r\n        //             Array.from(this.target.querySelectorAll(`.${this.uniqeID}`)).forEach(flag => flag.classList.remove(this.uniqeID));\r\n        //             normalizeElement(this.target);\r\n        //         }\r\n\r\n        //     }\r\n        //     else {\r\n        //         let paste = (e.clipboardData || window.clipboardData).getData('text');\r\n        //         const selection = window.getSelection();\r\n        //         if (!selection.rangeCount) return false;\r\n        //         selection.deleteFromDocument();\r\n        //         selection.getRangeAt(0).insertNode(document.createTextNode(paste));\r\n        //     }\r\n        //     e.preventDefault();\r\n        // }\r\n        // this.onCopy = (e) => {\r\n        //     //review: what should we can do here... it always array of one element..\r\n        //     const ranges = wrapRangeWithElement();\r\n        //     if(ranges.length === 0){\r\n        //         console.warn('no selected elements..');\r\n        //     }\r\n        //     // set flags to keep text selection..\r\n        //     let nodes = ranges.map(el => {\r\n        //         //clone the nodes and unwrap the wrapped textnodes on the dom..\r\n        //         const collectStyle = getInheirtCss(el, this.target);\r\n        //         setStyles(el, collectStyle);\r\n        //         return el.cloneNode(true);\r\n        //     });\r\n            \r\n        //     const { firstFlag, lastFlag } = setSelectionFlags(ranges[0], ranges[ranges.length - 1]);\r\n        //     ranges.forEach(we => we.unwrap());\r\n            \r\n        //     setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        //     this.target.normalize();\r\n\r\n        //     const element = document.createElement('span');\r\n\r\n        //     nodes = nodes.reduce(function(filtered, node) {\r\n        //         //TODO: filtered by the valid tags..\r\n        //         if (node.nodeName === \"SPAN\") {\r\n        //            filtered.push(node.outerHTML);\r\n        //         }\r\n        //         return filtered;\r\n        //       }, []);\r\n        //       element.innerHTML = nodes.join(\"\");\r\n        //     element.className = this.uniqeID;\r\n        //     // this.savedJson = elementToJson(element);\r\n        //     e.clipboardData.setData('text/html', element.outerHTML);\r\n        //     e.preventDefault();\r\n        // }\r\n\r\n        this.target.addEventListener('paste', this.onPaste);\r\n        this.target.addEventListener('copy', this.onCopy);\r\n    }\r\n    Destroy() {\r\n        this.target.removeEventListener('paste', this.onPaste);\r\n        this.target.removeEventListener('copy', this.onCopy);\r\n        this.target = null;\r\n    }\r\n}","\r\nimport { collectStyleFromSelectedElement } from '../style.service';\r\n\r\n\r\n//TODO: review\r\n//question: how can we expose the collectedStyle ? \r\n//question: should we use this ? https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\nexport default class Inpsector {\r\n    constructor(target, onInspect) {\r\n\r\n        if (!target) {\r\n            console.error('[-] Inpsector => target is null');\r\n            return null;\r\n        }\r\n        //TODO: use the validator\r\n        this.onInspect = onInspect;\r\n        this.target = target;\r\n\r\n        const launchInspect = () => {\r\n            const collectedStyle = collectStyleFromSelectedElement(this.target);\r\n            if (typeof (this.onInspect) === \"function\")\r\n                this.onInspect(collectedStyle);\r\n        }\r\n        this.onKeyDown = (e) => {\r\n            //TODO: review\r\n            if (e.keyCode === 8 && this.target.children.length <= 1 && !this.target.textContent) {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            launchInspect();\r\n        }\r\n        this.onClick = () => {\r\n            launchInspect();\r\n        }\r\n\r\n        this.target.addEventListener('click', this.onClick);\r\n        this.target.addEventListener('keydown', this.onKeyDown);\r\n\r\n        this.Destroy = () => {\r\n            this.target.removeEventListener('click', this.onClick);\r\n            this.target.removeEventListener('keydown', this.onKeyDown);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","\r\n\r\nexport default class KeyPress {\r\n    constructor(target, keys) {\r\n\r\n        if (!target) {\r\n            console.error('[-] keyPress => target is null');\r\n            return null;\r\n        }\r\n        if (!Array.isArray(keys)) {\r\n            console.error(\"[-] keyPress => keys must be an array\");\r\n            return null;\r\n        }\r\n        this.keys = keys;\r\n        this.target = target;\r\n\r\n\r\n        this.keypress = (e) => {\r\n            if (e.ctrlKey && e.key !== \"Control\") {\r\n                this.keys.forEach(key => {\r\n                    if (Array.isArray(key) && key.length === 2 && key[0] === e.key) {\r\n                        e.preventDefault();\r\n                        key[1]();\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n\r\n        this.target.addEventListener('keydown', this.keypress);\r\n\r\n        this.Destroy = () => {\r\n            this.target.removeEventListener('keydown', this.keypress);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","import DomUtilis from \"./utilis/DomUtilis\";\r\nimport CopyPaste from \"./services/copyPaste/copyPaste.service\";\r\nimport Inpsector from \"./services/Inspector/Inspector.service\";\r\nimport KeyPress from \"./services/keyPress/KeyPress\";\r\n\r\nimport { elementToJson, JsonToElement } from \"./services/elements.service\";\r\n\r\n//TODO:review\r\nexport default class Connector {\r\n    constructor() {\r\n    }\r\n\r\n    Connect(element, options) {\r\n        if (typeof element === \"string\") {\r\n            element = document.getElementById(element);\r\n            if (!element) {\r\n                //TODO: use the validator\r\n                console.error('[-] =>connectWith should be element id or dom element..');\r\n                return null;\r\n            }\r\n        } else if (DomUtilis.isElement(element)) {\r\n            // valid..\r\n        } else {\r\n            //TODO: use the validator\r\n            console.error('[-] =>connectWith should be element id or dom element..');\r\n            return null;\r\n        }\r\n        this.RenderInnerHTML(element);\r\n        // element.contentEditable = 'true';\r\n        this.plugins = this.usePlugins(element, options);\r\n        return element;\r\n    }\r\n    //TODO: destory events..\r\n    //question: how to use the events ? \r\n    usePlugins(element, options) {\r\n        return {\r\n            copyPaste: new CopyPaste(element),\r\n            inspector: new Inpsector(element, options.onInspect),\r\n            keyPress: new KeyPress(element, options.onKeyPress)\r\n        }\r\n    }\r\n    RenderInnerHTML(element) {\r\n        const emptyElement = (node) => {\r\n            return new Promise((resolve) => {\r\n                while (node.firstElementChild) {\r\n                    node.firstElementChild.remove();\r\n                }\r\n                resolve();\r\n            })\r\n        }\r\n        const jsonContent = elementToJson(element);\r\n\r\n        const renderedElement = JsonToElement(jsonContent);\r\n\r\n        emptyElement(element).then(() => element.innerHTML = renderedElement.innerHTML);\r\n    }\r\n    Destroy() {\r\n        for (const key in this.plugins) {\r\n            if (this.plugins.hasOwnProperty(key)) {\r\n                const plugin = this.plugins[key];\r\n                plugin.Destroy();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    wrapRangeWithElement,\r\n    setSelectionFlags,\r\n    setSelectionBetweenTwoNodes,\r\n    getTextNodes,\r\n    createInnerWrapperElement,\r\n    wrapRangeWithBlockElement,\r\n    setCaretAt,\r\n    GetClosestBlockElement\r\n} from \"./services/range.service\";\r\nimport Modes from './constants/Modes.json';\r\nimport { splitHTML } from \"./utilis/splitHTML\";\r\nimport { setStyle, toggleStyle, collectStyleFromSelectedElement } from \"./services/style.service\";\r\nimport { normalizeElement, removeZeroSpace } from \"./services/textEditor.service\";\r\nimport Connector from './connector';\r\nimport './components/custom/textSelected';\r\nimport { elementToJson, JsonToElement, getSelectedElement } from \"./services/elements.service\";\r\n\r\nexport default class Core {\r\n\r\n    // *target => can be Id of Element that should contain Editor instance or the element itself..\r\n    // *config =>  configuration passed t   o Tool constructor\r\n    //TODO: add target validations..;\r\n    constructor(target, config) {\r\n        this.__config = {\r\n            onInspect: undefined,\r\n        };\r\n\r\n        this.Connector = new Connector();\r\n        this.modeHandlers = {\r\n            [Modes.Toggle]: (v, key, value, options) => this.onToggle(v, key, value, options),\r\n            [Modes.Extend]: (v, key, value, options) => this.onExtend(v, key, value, options),\r\n        }\r\n        this.config = config ? Object.assign(this.__config, config) : this.__config;\r\n        this.events = {\r\n            styleChanged: this.config.onInspect,\r\n        }\r\n        this.connectedElement = this.Connector.Connect(target, this.config);\r\n    }\r\n    Save() {\r\n        return elementToJson(this.connectedElement);\r\n    }\r\n    Load(json) {\r\n        return JsonToElement(json, this.connectedElement);\r\n    }\r\n    Destroy() {\r\n        this.Connector.Destroy();\r\n        const self = this;\r\n        for (const key in self) {\r\n            const instance = this[key];\r\n            instance = null;\r\n        }\r\n        this.connectedElement = null;\r\n    }\r\n    //TODO: review\r\n    //question : we want to handle and toggle any attribute ? \r\n    ToggleClass(className, options) {\r\n        //here\r\n        if (typeof (className) !== \"string\") {\r\n            console.warn(\"className must be a string..\");\r\n            return null;\r\n        }\r\n\r\n        const elements = wrapRangeWithElement();\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n        if (!options) options = {};\r\n        if (typeof (options.selection) !== \"boolean\") options.selection = true;\r\n        const isToggleOn = (typeof (options.isON) === \"boolean\") ? options.isON : elements[0].closest(`[class='${className}']`);\r\n        if (!isToggleOn) {\r\n            elements.forEach(el => el.classList.add(className));\r\n        } else {\r\n            elements.forEach(el => {\r\n                if (el.parentElement) {\r\n                    const closestClass = el.parentElement.closest(`[class='${className}']`);\r\n                    if (closestClass) {\r\n                        const split = splitHTML(el, closestClass);\r\n                        if (split) {\r\n                            split.center.removeClassName(className);\r\n                        }\r\n                    }\r\n                } else {\r\n                    el.removeClassName(className);\r\n                }\r\n            })\r\n        }\r\n        const { firstFlag, lastFlag } = options.selection ? setSelectionFlags(elements[0], elements[elements.length - 1]) : { firstFlag: null, lastFlag: null }; //Set Flag at last\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible..\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * @param {String} key - key of css \r\n    *  @param {String} value - value of css\r\n    *  @param {(Object | String)} Modes - mode from Modes => Extend or Toggle\r\n    *  @param {string} Modes.Extend - override style\r\n    *  @param {string} Modes.toggle - toggle style\r\n    *  @param {Object} [options] - options \r\n    */\r\n    execCmd(key, value, mode, options) {\r\n\r\n        this.connectedElement.normalize();\r\n        this.ELEMENTS = [];\r\n        mode = mode ? mode : Modes.Extend;\r\n        if (!options) options = {};\r\n        if (typeof (options.selection) !== \"boolean\") options.selection = true;\r\n        if (!this.isValid(key, value)) {\r\n            return;\r\n        }\r\n      \r\n        //==============review===============//\r\n        this.ELEMENTS = wrapRangeWithElement();\r\n        if (!options.selection) {\r\n            const lastNode = this.ELEMENTS[this.ELEMENTS.length - 1];\r\n            if (lastNode)\r\n                this.caretHolder = this.createCaretPlacement(lastNode);\r\n        }\r\n\r\n        if (options.unWrap && Array.isArray(options.unWrap)) {\r\n            options.unWrap.forEach(selector=>{\r\n                this.ELEMENTS.forEach(txtNode=>{\r\n                    const closestElementToUnWrap = txtNode.closest(selector);\r\n                    if(closestElementToUnWrap){\r\n                        closestElementToUnWrap.unwrap();\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        //This is how i make the text selection, i dont know if this is good way, but it works..\r\n        const { firstFlag, lastFlag } = options.selection ? setSelectionFlags(this.ELEMENTS[0], this.ELEMENTS[this.ELEMENTS.length - 1]) : { firstFlag: null, lastFlag: null }; //Set Flag at last\r\n        //======================================================================//\r\n        removeZeroSpace(getTextNodes(this.connectedElement));\r\n\r\n        let ToggleMode;//Declare toggle mode, The first element determines whether it is on or off\r\n\r\n        this.ELEMENTS.forEach((element, i) => {\r\n            options.onOff = ToggleMode;\r\n            const result = this.modeHandlers[mode](element, key, value, options);\r\n            if (mode === Modes.Toggle && typeof (ToggleMode) === 'undefined')\r\n                ToggleMode = result;\r\n        });\r\n        normalizeElement(this.connectedElement);// merge siblings and parents with child as possible.. \r\n        //use the first and last flags to make the text selection and unwrap them..\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n            if (this.caretHolder) {\r\n                setCaretAt(this.caretHolder, this.caretHolder.textContent.length);\r\n                this.caretHolder.unwrap();\r\n                this.caretHolder = null;\r\n            }\r\n        }\r\n        this.dispatchEvent('styleChanged', collectStyleFromSelectedElement(this.connectedElement));\r\n    }\r\n    createCaretPlacement(atNode) {\r\n        if (!atNode) return null;\r\n        const caretHolder = document.createElement('text-selection');\r\n        caretHolder.setAttribute('zero-space', 'true');\r\n        atNode.appendChild(caretHolder);\r\n        return caretHolder;\r\n    }\r\n\r\n    dispatchEvent(event, payload) {\r\n        if (this.events[event])\r\n            this.events[event](payload);\r\n    }\r\n    onToggle(element, key, value, options) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            // detect if there is any parent with style to split.\r\n            //TODO: use the catch from options to detect more than one style or tag element.\r\n            let elementToSplit = element.closest(`[style*='${value}']`);\r\n            if (elementToSplit && window.getComputedStyle(elementToSplit).display === \"block\") {\r\n                let innerSpan = createInnerWrapperElement(elementToSplit);\r\n                elementToSplit.style[key] = null;\r\n                innerSpan.style[key] = value;\r\n                options.onOff = false;\r\n                return this.onToggle(element, key, value, options);\r\n            }\r\n            if (elementToSplit && elementToSplit !== element) {\r\n                if (typeof (options.onOff) === 'undefined')\r\n                    options.onOff = false;\r\n                //unbold\r\n                const splitElements = splitHTML(element, elementToSplit);\r\n                // if there is no split elements, its error!\r\n                if (splitElements) {\r\n                    toggleStyle(splitElements.center, key, value, options.onOff);\r\n                } else {\r\n                    console.error('splitHTML return null');\r\n                }\r\n            }\r\n            else {\r\n                if (typeof (options.onOff) === 'undefined' && elementToSplit) {\r\n                    options.onOff = false;\r\n                } else if (typeof (options.onOff) === 'undefined') {\r\n                    options.onOff = true;\r\n                }\r\n                toggleStyle(element, key, value, options.onOff);\r\n                normalizeElement(element);\r\n            }\r\n\r\n            return options.onOff;\r\n        }\r\n\r\n    }\r\n    onExtend(element, key, value, options) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            const elementToSplit = element.closest(`[style*='${key}']`);\r\n            if (elementToSplit) {\r\n                const splitBlocks = splitHTML(element, elementToSplit);\r\n                if (splitBlocks) {\r\n                    setStyle(splitBlocks.center, key, value);\r\n                }\r\n                else if (options.target === \"block\") {\r\n                    elementToSplit.style[key] = value;\r\n                }\r\n                else if (options.target !== \"block\") {\r\n                    let innerSpan = createInnerWrapperElement(elementToSplit, { el: 'span' });\r\n                    setStyle(innerSpan, key, value);\r\n                    elementToSplit.style[key] = null;\r\n                    return this.onExtend(element, key, value);\r\n\r\n                }\r\n                else if (elementToSplit !== element) {\r\n                    const splitElements = splitHTML(element, elementToSplit);\r\n                    if (splitElements) {\r\n                        setStyle(splitElements.center, key, value);\r\n                    } else {\r\n                        console.error('splitHTML return null');\r\n                    }\r\n                }\r\n\r\n            } else if (window.getComputedStyle(element).display !== \"block\" && options.target === \"block\") {\r\n                const blockElement = GetClosestBlockElement(element);\r\n                if (blockElement && blockElement.ischildOf(this.connectedElement)) {\r\n                    setStyle(parentElement, key, value);\r\n                } else {\r\n                    const wrapper = document.createElement(\"div\");\r\n                    parentElement.wrap(wrapper);\r\n                    setStyle(wrapper, key, value);\r\n                }\r\n            } else {\r\n                setStyle(element, key, value);\r\n            }\r\n        }\r\n\r\n    }\r\n    createBlockStyle(options, element, key, value) {\r\n        const findBlock = (element) => {\r\n            const computed = window.getComputedStyle(element);\r\n            if (computed && computed.display === \"block\") {\r\n                return element;\r\n            } else if (element.parentNode && element.parentNode !== this.connectedElement) {\r\n                return findBlock(element.parentNode);\r\n            }\r\n        };\r\n        if (options.as === \"inline\") {\r\n            let blockElement = findBlock(element);\r\n            if (blockElement) {\r\n                const wrapTextNodeWithAppendStyle = (node) => {\r\n                    const span = document.createElement(\"span\");\r\n                    span.style[key] = value;\r\n                    node.wrap(span);\r\n                };\r\n                const createInlineStyle = (parentNode) => {\r\n                    parentNode.style[key] = null;\r\n                    Array.from(parentNode.childNodes).forEach(node => {\r\n                        if (node.nodeType === 3) {\r\n                            wrapTextNodeWithAppendStyle(node);\r\n                        } else if (node.nodeType === 1 && node.nodeName !== \"BR\") {\r\n                            const computed = window.getComputedStyle(node);\r\n                            if (computed.display !== \"inline\") {\r\n                                createInlineStyle(node);\r\n                            } else {\r\n                                node.style[key] = value;\r\n                            }\r\n                        }\r\n                    });\r\n                };\r\n                createInlineStyle(blockElement);\r\n                // Array.from(blockElement.querySelectorAll(\"span\")).forEach(el=>el.style[key] = value);\r\n            } else {\r\n                this.createBlockElAndStyleIt(key, value, element);\r\n            }\r\n\r\n        } else {\r\n            let blockElement = findBlock(element);\r\n            if (blockElement) {\r\n                blockElement.style[key] = value;\r\n                Array.from(blockElement.querySelectorAll(`[style*='${key}']`)).forEach(el => el.style[key] = null);\r\n            } else {\r\n                this.createBlockElAndStyleIt(key, value, element);\r\n            }\r\n        }\r\n    }\r\n\r\n    createBlockElAndStyleIt(key, value, element) {\r\n        const pargh = document.createElement(\"p\");\r\n        pargh.style[key] = value;\r\n        element.wrap(pargh);\r\n    }\r\n\r\n    isValid(key, value) {\r\n        if (!this.connectedElement) {\r\n            console.error('please use connectWith method')\r\n            return false;\r\n        };\r\n        if (this.connectedElement.contentEditable !== \"true\") {\r\n            return false;\r\n        }\r\n        if (typeof key !== \"string\" && typeof value !== \"string\") {\r\n            return false;\r\n        }\r\n        var selectedElement = getSelectedElement();\r\n        if (selectedElement && (selectedElement.ischildOf(this.connectedElement) || selectedElement === this.connectedElement)) {\r\n            return true;\r\n        }\r\n        ;\r\n    }\r\n}","import Core from './StyleIt/index';\r\nimport  Modes  from './StyleIt/constants/Modes.json';\r\n\r\nexport default class StyleIt {\r\n  //expose only the relevant methods..\r\n  constructor(target, config) {\r\n    //TODO: validate target & config..\r\n    const styleIt = new Core(target, config);\r\n    if (styleIt) {  \r\n      this.ExecCmd = styleIt.execCmd;\r\n      this.ToggleClass = styleIt.ToggleClass;\r\n      this.Save = styleIt.Save;\r\n      this.Load = styleIt.Load;\r\n      this.Destroy = styleIt.Destroy;\r\n      this.Modes = Modes;\r\n      //========================================//\r\n      this.ToggleClass = this.ToggleClass.bind(styleIt);\r\n      this.ExecCmd = this.ExecCmd.bind(styleIt);\r\n      this.Save = this.Save.bind(styleIt);\r\n      this.Load = this.Load.bind(styleIt);\r\n      this.Destroy = this.Destroy.bind(styleIt);\r\n    }\r\n  }\r\n}"],"sourceRoot":""}