{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/StyleIt/components/custom/textSelected.js","webpack:///./src/StyleIt/constants/block_elms.js","webpack:///./src/StyleIt/services/className.service.js","webpack:///./src/StyleIt/utilis/DomUtilis.js","webpack:///./src/StyleIt/services/attr.service.js","webpack:///./src/StyleIt/utilis/splitHTML.js","webpack:///./src/StyleIt/utilis/merger.js","webpack:///./src/StyleIt/services/textEditor.service.js","webpack:///./src/StyleIt/services/style.service.js","webpack:///./src/StyleIt/rules/rules.js","webpack:///./src/StyleIt/constants/void_elms.js","webpack:///./src/StyleIt/constants/inline_elems.js","webpack:///./src/StyleIt/services/elements.service.js","webpack:///./src/StyleIt/services/range.service.js","webpack:///./src/StyleIt/services/copyPaste/copyPaste.service.js","webpack:///./src/StyleIt/services/events/events.js","webpack:///./src/StyleIt/services/link.service.js","webpack:///./src/StyleIt/services/Inspector/Inspector.service.js","webpack:///./src/StyleIt/services/keyPress/KeyPress.js","webpack:///./src/StyleIt/connector.js","webpack:///./src/StyleIt/index.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","default","TextSelection","getAttribute","innerHTML","HTMLElement","customElements","block_elments","block_elments_queryString","getInheirtClassNames","fromElement","toElement","classes","_parent","ischildOf","parentElement","map","classList","Array","from","forEach","findIndex","push","getClasses","element","normalizeClassName","removeEmptyClass","className","removeAttribute","querySelectorAll","concat","child","node","remove","clear","Element","removeClassName","obj","e","nodeType","style","ownerDocument","el","wrapper","elements","parents","isArray","parentNode","filter","_","length","insertBefore","_el","appendChild","Document","getSelectedElement","document","getSelection","anchorNode","wrap","createElement","createSelection","body","createTextRange","range","moveToElementText","select","window","selection","createRange","selectNodeContents","removeAllRanges","addRange","__closest","ancestor","documentElement","contains","matches","isContentEditable","nodeName","parent","_wrap","getInheirtAttributes","attributes","currectElement","attrs","getAttributes","getAll","splitHTML","options","tag","DomUtilis","isElement","setAttrs","styles","getInheirtCss","template","join","attr","setAttribute","centerElement","centerTemplate","sel","getRangeAt","setStart","leftElement","leftTemplate","leftRange","extractContents","setEnd","childNodes","rightElement","rightTemplate","rightRange","split","left","center","right","unwrap","Text","insertAfter","newNode","nextSibling","replaceNode","replacementNode","extraContents","mergeNodeContect","Node","ELEMENT_NODE","firstChild","firstElementChild","textContent","_elementProps","getStyle","styleValue","trim","normalizeStyle","attrValue","add","normalizeElement","mergeTwoNodes","elementOne","elementTwo","_elementsData","commoncLasses","classes1","classes2","c1","c2","includes","commonStyles","style1","style2","commmonStyles","style1Values","style2Values","normalize","clearElementClasses","clearElementStyles","children","recurse","_normalize","mergeNodesStyles","merged","nextElement","mergeNodesContent","mergedContent","getCleanText","text","replace","intailStyle","toggleStyle","isOn","setStyle","data","textDecoration","closest","splits","rule","collectStyleFromSelectedElement","connectecElement","collectStyles","keyValue","findBlockAndStyleIt","blockElement","GetClosestBlockElement","void_elements","inline_elements","wrapNakedTextNodes","target","removeElement","ancNode","focusNode","JsonToElement","jsonObject","createHtmlElement","jsElement","isShouldRenderAttrs","createTextNode","createComment","href","collectedStyle","JsonObjectToStyleString","renderAttrs","jsChild","htmlElement","createInnerWrapperElement","innerSpan","wrapRangeWithElement","wrapTag","wrapperEl","wrapNode","isCollapsed","startNode","startContainer","endNode","endContainer","startOffset","endOffset","currentRange","currentWrapper","cloneNode","surroundContents","parentEl","createWrapperFunction","getRangeTextNodes","wrapRangeText","setCaretAt","charIndex","focus","textNode","TEXT_NODE","collapse","pasteHtmlAtCaret","html","contenteditable","isValid","rangeCount","deleteContents","lastNode","frag","createDocumentFragment","insertNode","cloneRange","setStartAfter","rangeIntersectsNode","intersectsNode","rangeA","rangeB","selectNode","createRangeFromNode","compareBoundaryPoints","Range","END_TO_START","START_TO_END","container","commonAncestorContainer","walker","createTreeWalker","NodeFilter","SHOW_TEXT","textNodes","nextNode","getTextNodes","isNonEmptyTextNode","removeChild","referenceNode","setSelectionBetweenTwoNodes","firstFlag","lastFlag","_options","assign","setBaseAndExtent","setSelectionFlags","firstElement","LastElement","prepend","CopyPaste","plugins","copyPaste","stylesToPaste","paste","copy","destroy","start","event","copiedNode","cloneContents","type","collectedCSS","span","jsonStyle","setStyles","len","htmlText","preventDefault","clipboardData","setData","shiftKey","pastePlainText","pasteWithStyles","copied","getData","pastedContainer","sameNode","block","parts","addEventListener","removeEventListener","EVENTS","TARGETS","_blank","_self","_top","resetURL","src","createTempLinkElement","Atag","Inpsector","onInspect","launchInspect","selectedElement","aTag","protocol","onKeyDown","keyCode","onClick","KeyPress","keyPress","onKeyPress","keypress","anchorOffset","docFragment","previousSibling","br","Connector","getElementById","execCommand","editable","createDefaultStyle","inspector","usePlugins","head","plugin","Core","config","__config","undefined","on","callback","modeHandlers","Modes","Toggle","v","onToggle","Extend","onExtend","events","styleChanged","connectedElement","Connect","elementToJson","json","keys","cn","Destroy","toString","elementToUnwrap","baseNode","linkElements","closestATag","a","setProtocol","_protocol","newURL","_href","_target","testTarget","toLowerCase","renderedLink","link","tagName","toUpperCase","Error","querySelector","allSelected","containsNode","selected","closestElement","querySelectorUnderSelection","ranges","isON","closestClass","isVAlidKeyValue","ELEMENTS","ToggleMode","onOff","result","normalizedParents","caretHolder","collectedStyles","dispatchEvent","atNode","payload","elementToSplit","splitElements","createBlockStyle","splitBlocks","getComputedStyle","display","as","createInlineStyle","wrapTextNodeWithAppendStyle","isSuccess","contentEditable","StyleIt","styleIt","execCmd","toggleClass","unLink","formatBlock","save","load","MODES"],"mappings":"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","file":"styleit-api.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"styleit\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"styleit\"] = factory();\n\telse\n\t\troot[\"styleit\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require('./src').default;\r\n","\r\nclass TextSelection extends HTMLElement {\r\n    constructor() {\r\n      super();\r\n    }\r\n    connectedCallback(){\r\n      const createZeroSpace = this.getAttribute('zero-space');\r\n      if(createZeroSpace === \"true\"){\r\n        this.innerHTML = \"&#8203;\";\r\n\r\n      }\r\n    }\r\n  }\r\n  if(!customElements.get('text-selection')){\r\n    customElements.define('text-selection', TextSelection); \r\n  }\r\n","export const block_elments = {\r\n    \"H1\":\"H1\",\r\n    \"H2\":\"H2\",\r\n    \"H3\":\"H3\",\r\n    \"H4\":\"H4\",\r\n    \"H5\":\"H5\",\r\n    \"H6\":\"H6\",\r\n    \"P\":\"P\",\r\n    \"LI\":\"LI\",\r\n    \"OL\":\"OL\",\r\n    \"ADDRESS\":\"ADDRESS\",\r\n    \"PRE\":\"PRE\",\r\n    \"TD\":\"TD\"\r\n}   \r\nexport const block_elments_queryString = \"h1,h2,h3,h4,h5,h6,p,pre,ol,li,address,td\";","\r\nexport function getInheirtClassNames(fromElement, toElement) {\r\n    var classes = [];\r\n    var _parent = fromElement;\r\n    while (_parent && _parent.ischildOf(toElement.parentElement)) {\r\n        let map = _parent.classList;\r\n        Array.from(map).forEach(name => {\r\n            if (classes.findIndex(c => c === name) < 0) {\r\n                classes.push(name);\r\n            }\r\n        })\r\n        _parent = _parent.parentElement;\r\n    }\r\n    return classes;\r\n}\r\nexport function getClasses(element) {\r\n    return Array.from(element.classList);\r\n}\r\n\r\n//TODO: review\r\n//question: is expensive too much? \r\nexport function normalizeClassName(element) {\r\n    function removeEmptyClass(element){\r\n        if (!element.className) {\r\n            element.removeAttribute('class');\r\n        }\r\n    }\r\n    function clear(element) {\r\n        removeEmptyClass(element);\r\n        Array.from(element.classList).forEach(c => {\r\n            Array.from(element.querySelectorAll(`[class='${c}']`)).forEach(node =>{\r\n                node.classList.remove(c)\r\n                removeEmptyClass(node)\r\n            });\r\n        })\r\n    }\r\n    \r\n    const elements = Array.from(element.querySelectorAll('span[class]')).concat(element);\r\n    elements.forEach(child => clear(child));\r\n}\r\n//TODO: review\r\n//question: how about this name ? \r\nElement.prototype.removeClassName = function(className){\r\nconst nodes = Array.from(this.querySelectorAll(`[class='${className}']`)).concat(this);\r\nnodes.forEach(node=>node.classList.remove(className));\r\n}","import { block_elments } from \"../constants/block_elms\";\r\n\r\nclass DomUtilis {\r\n\r\n\r\n  isElement(obj) {\r\n    try {\r\n      return obj instanceof HTMLElement;\r\n    }\r\n    catch (e) {\r\n      return (typeof obj === \"object\") &&\r\n        (obj.nodeType === 1) && (typeof obj.style === \"object\") &&\r\n        (typeof obj.ownerDocument === \"object\");\r\n    }\r\n  }\r\n  \r\n  wrap(el, wrapper) {\r\n    //el should be array\r\n    let elements = [];\r\n    if (Array.isArray(el)) {\r\n      elements = el;\r\n    } else {\r\n      elements = [el];\r\n    }\r\n\r\n    const parents = elements.map(e => e.parentNode);\r\n    var parentsDiff = parents.filter((p, _, self) => { return self[0] !== p });\r\n    if (parentsDiff.length !== 0) {\r\n      console.log(`[wrap] found ${parentsDiff.length} different parents 😅`);\r\n      return;\r\n    }\r\n    parents[0].insertBefore(wrapper, elements[0])\r\n    elements.forEach(_el => wrapper.appendChild(_el))\r\n\r\n    return true;\r\n  }\r\n}\r\nexport default new DomUtilis(); \r\n\r\nDocument.prototype.getSelectedElement=function(){var e=document.getSelection();if(null!==e){var t=e.anchorNode;if(null!==t){for(;3===t.nodeType;)t=t.parentNode;return t}return null}}\r\nElement.prototype.wrap = ( wrapper) => {\r\n  if (typeof wrapper === \"string\") wrapper = document.createElement(wrapper);\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nElement.prototype.createSelection = function() {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(this);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(this);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } \r\n}\r\nElement.prototype.__closest =function (s){\r\n      const el = this;\r\n      let ancestor = this;\r\n      if (!document.documentElement.contains(el)) return null;\r\n      do {\r\n        if (ancestor.matches(s) && ancestor.isContentEditable && !block_elments[ancestor.nodeName]) return ancestor;\r\n        if( ancestor.parentElement && block_elments[ ancestor.parentElement.nodeName]){\r\n          return null;\r\n        }\r\n        ancestor = ancestor.parentElement.isContentEditable ? ancestor.parentElement : null;\r\n      } while (ancestor !== null);\r\n      return null;\r\n  \r\n  \r\n}\r\nElement.prototype.ischildOf = function(parent) {\r\n  if (!parent) return false;\r\n  let node = this.parentNode;\r\n  while (node != null) {\r\n    if (node === parent) {\r\n      return true;\r\n    }\r\n    node = node.parentNode;\r\n  }\r\n  return false;\r\n}\r\nconst _wrap = function(wrapper) {\r\n  if (!this.parentNode) return false;\r\n  this.parentNode.insertBefore(wrapper, this);\r\n  wrapper.appendChild(this);\r\n  return wrapper;\r\n}\r\nText.prototype.wrap = _wrap;\r\nElement.prototype.wrap = _wrap;\r\nElement.prototype.insertAfter = function (newNode) {\r\n  this.parentNode.insertBefore(newNode, this.nextSibling);\r\n}\r\nElement.prototype.replaceNode = function(replacementNode) {\r\n  if (this.parentNode) {\r\n    this.parentNode.insertBefore(replacementNode, this)\r\n    this.remove();\r\n    return replacementNode;\r\n  }\r\n}\r\nElement.prototype.unwrap = function() {\r\n  var range = document.createRange()\r\n  range.selectNodeContents(this)\r\n  var extraContents = range.extractContents();\r\n  this.replaceNode(extraContents)\r\n  return extraContents;\r\n}\r\n","\r\n\r\n//class and style not includes yet..\r\nexport function getInheirtAttributes(fromElement, toElement) {\r\n    var attributes = {};\r\n    var currectElement = fromElement;\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        var attrs = currectElement.attributes;\r\n        for(var i = attrs.length - 1; i >= 0; i--) {\r\n            if(attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\"){\r\n                if(!attributes[attrs[i].name ]){\r\n                    attributes[attrs[i].name ] = attrs[i].value;\r\n                }\r\n            }\r\n          }\r\n      currectElement = currectElement.parentElement;\r\n    }\r\n    return attributes;\r\n  }\r\n  export function getAttributes(element,getAll){\r\n    var attributes = {};\r\n    var attrs = element.attributes;\r\n    for(var i = attrs.length - 1; i >= 0; i--) {\r\n        if(getAll  || (!getAll && attrs[i].name  !==\"class\" && attrs[i].name  !== \"style\")){\r\n            if(!attributes[attrs[i].name ]){\r\n                attributes[attrs[i].name ] = attrs[i].value;\r\n            }\r\n        }\r\n      }\r\n      return attributes;\r\n  }\r\n  export function removeAllAttrs(element){\r\n      if(element && !element.attributes){\r\n          console.error(\"element not have attributes..\");\r\n          return null;\r\n      }\r\n    Array.from(element.attributes).forEach(attr=>element.removeAttribute(attr.nodeName))\r\n  }","import DomUtilis from \"./DomUtilis\"\r\nimport { getInheirtCss } from \"../services/style.service\";\r\nimport { getInheirtAttributes } from \"../services/attr.service\";\r\nimport { getInheirtClassNames } from \"../services/className.service\";\r\n\r\n\r\nexport function splitHTML(fromElement, toElement,options = {}) {\r\n    const {tag = \"span\"} = options;\r\n    if(fromElement === toElement){\r\n        return null;\r\n    }\r\n    if (!fromElement.ischildOf(toElement)) {\r\n        console.log(fromElement,toElement)\r\n        console.error('fromElement must be child of toElement')\r\n        return null;\r\n    }\r\n    if (!DomUtilis.isElement(fromElement) || !DomUtilis.isElement(toElement)) {\r\n        console.error('fromElement && toElement must be dom elements..');\r\n        return null;\r\n    }\r\n    const setAttrs = (fromElement, toElement) => {\r\n        const styles = getInheirtCss(fromElement, toElement);\r\n        const attrs = getInheirtAttributes(fromElement, toElement);\r\n        const className = getInheirtClassNames(fromElement, toElement);\r\n        const template = document.createElement(tag);\r\n        template.className = className.join(\" \");\r\n        for (const style in styles) {\r\n            const value = styles[style];\r\n            template.style[style] = value;\r\n        }\r\n        for (const attr in attrs) {\r\n            const value = attrs[attr];\r\n            template.setAttribute(attr, value);\r\n        }\r\n        return template;\r\n    }\r\n    fromElement.createSelection();\r\n    const centerElement = document.getSelectedElement();\r\n    const centerTemplate = setAttrs(centerElement, toElement);\r\n    //center\r\n    centerTemplate.appendChild(fromElement);\r\n    var sel = window.getSelection();\r\n    var range = sel.getRangeAt(0);\r\n    //left\r\n    range.setStart(toElement, 0);\r\n    const leftElement = document.getSelectedElement();\r\n    const leftTemplate = setAttrs(leftElement, toElement);\r\n    var leftRange = range.extractContents();\r\n    leftTemplate.appendChild(leftRange);\r\n    //right\r\n    range.setEnd(toElement, toElement.childNodes.length);\r\n    const rightElement = document.getSelectedElement();\r\n    const rightTemplate = setAttrs(rightElement, toElement);\r\n    var rightRange = range.extractContents();\r\n    rightTemplate.appendChild(rightRange);\r\n    const split = {\r\n        left: leftTemplate,\r\n        center: centerTemplate,\r\n        right: rightTemplate\r\n    }\r\n    toElement.innerHTML = \"\";\r\n    for (const el in split) {\r\n        const element = split[el];\r\n        toElement.appendChild(element);\r\n    }\r\n    toElement.unwrap();\r\n    return split;\r\n\r\n}","import DomUtilis from \"./DomUtilis\"\r\nimport { getStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { getClasses, normalizeClassName } from \"../services/className.service\";\r\nimport { getAttributes } from \"../services/attr.service\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\nimport Config from '../_app.config.json';\r\n\r\n\r\n\r\n/**\r\n *  * Returns the new merge element\r\n * @param {Element} DomElement - element to merge with his first child\r\n */\r\nexport const mergeNodeContect = node => {\r\n\r\n    if (!DomUtilis.isElement(node)) {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (node.nodeName !== \"SPAN\" || node.nodeType !== Node.ELEMENT_NODE) {\r\n        // console.error('[mergeNodeContect] node is not a span');\r\n        return null;\r\n    }\r\n\r\n    const firstChild = node.firstElementChild;\r\n    if (!firstChild) {\r\n        // console.error('[mergeNodeContect] first child not found');\r\n        return null;\r\n    }\r\n    if (firstChild.nodeName !== \"SPAN\" || firstChild.nodeType !== Node.ELEMENT_NODE) {\r\n        // console.error('[mergeNodeContect] firstChild is not a span');\r\n        return null;\r\n    }\r\n    if (node.textContent !== firstChild.textContent) {\r\n        // console.error('[mergeNodeContect] text content is different');\r\n        return null;\r\n    }\r\n    const _elementProps = {\r\n        style: getStyle(node),\r\n        classes: getClasses(node),\r\n        attrs: getAttributes(node)\r\n    }\r\n    for (const style in _elementProps.style) {\r\n        const styleValue = _elementProps.style[style];\r\n        firstChild.style[style] = (firstChild.style[style] + \" \" + styleValue).trim();\r\n    }\r\n    normalizeStyle(firstChild);\r\n\r\n    for (const attr in _elementProps.attrs) {\r\n        const attrValue = _elementProps.attrs[attr];\r\n        firstChild.setAttribute(attr, attrValue);\r\n    }\r\n    firstChild.classList.add(..._elementProps.classes);\r\n    normalizeClassName(firstChild);\r\n    normalizeElement(firstChild);\r\n    if(firstChild.parentElement)\r\n    firstChild.parentElement.unwrap();\r\n    return firstChild;\r\n};\r\nexport function mergeTwoNodes(elementOne, elementTwo) {\r\n    if (!DomUtilis.isElement(elementOne) || !DomUtilis.isElement(elementTwo)) {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    if (elementOne.nodeName !== \"SPAN\" || elementTwo.nodeName !== \"SPAN\") {\r\n        // console.error('one of the props is not dom element.., please insert two element to merge..');\r\n        return null;\r\n    }\r\n    const _elementsData = [{\r\n        style: getStyle(elementOne),\r\n        classes: getClasses(elementOne),\r\n        attrs: getAttributes(elementOne)\r\n    },\r\n    {\r\n        style: getStyle(elementTwo),\r\n        classes: getClasses(elementTwo),\r\n        attrs: getAttributes(elementTwo)\r\n    }]\r\n    const getCommonClasses = (classes1, classes2) => {\r\n        if (!classes1 || !classes2)\r\n            return [];\r\n        const c1 = [...classes1];\r\n        const c2 = [...classes2];\r\n        return c1.filter(c => c2.includes(c));\r\n    }\r\n    const getCommonStyles = (style1, style2) => {\r\n        const commmonStyles = {};\r\n        for (const s in style1) {\r\n            if (!style2[s])\r\n                continue;\r\n\r\n            const style1Values = style1[s];\r\n            const style2Values = style2[s];\r\n            if (style2Values === style1Values) {\r\n                commmonStyles[s] = style2Values;\r\n            }\r\n        }\r\n        return commmonStyles;\r\n    };\r\n    const commoncLasses = getCommonClasses(_elementsData[0].classes, _elementsData[1].classes);\r\n    const commonStyles = getCommonStyles(_elementsData[0].style, _elementsData[1].style);\r\n    const buildWrappingElement = (commonStyles, commoncLasses) => {\r\n        const wrapper = document.createElement('span');\r\n        // handle styles\r\n        for (const s in commonStyles)\r\n            wrapper.style[s] = commonStyles[s];\r\n            \r\n\r\n        // handle classes\r\n        if (commoncLasses.length > 0) {\r\n            wrapper.classList.add(...commoncLasses);\r\n        }\r\n        if (wrapper.attributes.length === 0) {\r\n            wrapper.unwrap();\r\n            return null;\r\n        }else{\r\n            wrapper.normalize();\r\n        }\r\n        return wrapper;\r\n    }\r\n    const wrapper = buildWrappingElement(commonStyles, commoncLasses);\r\n    if (!wrapper) {\r\n        // console.error('wrapper is null')\r\n        return null;\r\n    }\r\n\r\n    const clearElementClasses = (node, commoncLasses) => {\r\n        node.classList.remove(...commoncLasses);\r\n        normalizeClassName(node);\r\n    }\r\n    const clearElementStyles = (node, commonStyles) => {\r\n        for (const s in commonStyles)\r\n            node.style[s] = null;\r\n    }\r\n    const elements = [elementOne, elementTwo];\r\n    elements.forEach(e => {\r\n        clearElementClasses(e, commoncLasses);\r\n        clearElementStyles(e, commonStyles);\r\n    })\r\n\r\n    DomUtilis.wrap(elements, wrapper);\r\n    [...wrapper.children].forEach(c => {\r\n        normalizeElement(c)\r\n    })\r\n    return wrapper;\r\n};\r\n\r\n\r\nexport function mergeCommonValuesObject(obj1, obj2) {\r\n    let commonValues = {};\r\n    for (const key in obj1) {\r\n        if (obj2[key] && obj2[key] === obj1[key]) {\r\n            commonValues[key] = obj1[key]\r\n        }\r\n    }\r\n    return commonValues;\r\n}\r\n\r\nexport function mergeCommonArrays(arr1, arr2) {\r\n    const mergeArr = [];\r\n    Array.from(arr1).forEach(item => {\r\n        if (arr2.findIndex(i => i === item) > 0) {\r\n            mergeArr.push(item);\r\n        }\r\n    })\r\n    return mergeArr;\r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { normalizeStyle } from \"./style.service\";\r\nimport { mergeNodeContect, mergeTwoNodes } from \"../utilis/merger\";\r\n\r\n/**\r\n * @param {Element} el - element to normalize\r\n */\r\nexport function normalizeElement(el) {\r\n    if(!el.isContentEditable){\r\n        return;\r\n    }\r\n    const recurse = (element) => {\r\n        Array.from(element.children).forEach((child) => {\r\n            recurse(child);\r\n            _normalize(child);\r\n        })\r\n        const mergeNodesStyles = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((element) => {\r\n                let wrapper = element;\r\n                while (wrapper !== null) {\r\n                    const nextElement = wrapper.nextSibling;\r\n                    if (!nextElement){\r\n                        break;\r\n                    }\r\n                    wrapper = mergeTwoNodes(wrapper, nextElement);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n\r\n        const mergeNodesContent = element => {\r\n            let merged = false;\r\n            Array.from(element.children).forEach((child) => {\r\n                let wrapper = child;\r\n                while (wrapper && wrapper.nodeType === 1) {\r\n                    wrapper = mergeNodeContect(wrapper);\r\n                    merged = merged || wrapper !== null;\r\n                }\r\n            })\r\n            return merged;\r\n        }\r\n        let mergedStyles = false;\r\n        let mergedContent = false;\r\n        do {\r\n            element = _normalize(element);\r\n            if(element){\r\n                mergedStyles = mergeNodesStyles(element);\r\n                mergedContent = mergeNodesContent(element);\r\n            }\r\n           \r\n        } while (mergedContent && element);\r\n    }\r\n        recurse(el);\r\n    function _normalize(element) {\r\n        element.normalize();\r\n        normalizeClassName(element);\r\n        normalizeStyle(element);\r\n        if (element && element.nodeName === \"SPAN\" && (!element.textContent.trim() || element.attributes.length === 0)) {\r\n            element.unwrap();\r\n            return null;\r\n        }\r\n        return element;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {Array} textNodes - textnode to remove the zero space like : u200B\r\n */\r\nexport function removeZeroSpace(textNodes) {\r\n    if (!Array.isArray(textNodes)) {\r\n        textNodes = [textNodes];\r\n    }\r\n    textNodes.forEach(el => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.parentElement && el.parentElement.nodeName !== \"TEXT-SELECTION\") {\r\n            el.textContent = el.textContent.replace(/\\u200B/g, '');\r\n        }\r\n    })\r\n}\r\nexport function getCleanText(text) {\r\n    return text.replace(/\\s/g, \"\").replace(/[\\u200B-\\u200D\\uFEFF]/g, '') \r\n}","import { normalizeClassName } from \"./className.service\";\r\nimport { UseRules } from \"../rules/rules\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\nimport { GetClosestBlockElement } from \"./range.service\";\r\n\r\nexport function getInheirtCss(fromElement, toElement) {\r\n    var intailStyle = {};\r\n    var currectElement = fromElement;\r\n\r\n    while (currectElement && currectElement.ischildOf(toElement.parentElement)) {\r\n        let map = getStyle(currectElement);\r\n        for (const style in map) {\r\n            if (map.hasOwnProperty(style)) {\r\n                const value = map[style];\r\n                // text-decoration  could be twice like underline and strike therough.. \r\n                if (!intailStyle[style])\r\n                    intailStyle[style] = value;\r\n            }\r\n        }\r\n        currectElement = currectElement.parentElement;\r\n    }\r\n    return intailStyle;\r\n}\r\nexport function removeStyle(element, key, value) {\r\n    element.style[key] = element.style[key].replace(value, \"\");\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = el.style[key].replace(value, \"\");\r\n    })\r\n}\r\n//TOGGLE\r\nexport function toggleStyle(element, key, value, isOn) {\r\n    if (isOn) {\r\n        element.style[key] = element.style[key] + \" \" + value;\r\n    } else {\r\n        element.style[key] = element.style[key].replace(value, \"\");\r\n    }\r\n    normalizeStyle(element);\r\n    normalizeClassName(element);\r\n    Array.from(element.querySelectorAll(`[style*='${value}']`)).forEach(child => {\r\n        child.style[key] = child.style[key].replace(value, \"\");\r\n        normalizeStyle(child);\r\n        normalizeClassName(child);\r\n    })\r\n}\r\n//EXTEND\r\n//TODO: fix name\r\nexport function setStyles(element, jsonStyle) {\r\n    for (const key in jsonStyle) {\r\n        if (jsonStyle.hasOwnProperty(key)) {\r\n            const style = jsonStyle[key];\r\n            element.style[key] = style;\r\n        }\r\n    }\r\n}\r\n//TOGGLE\r\n//TODO: fix name\r\nexport function setStyle(element, key, value) {\r\n    element.style[key] = value;\r\n    if (key === \"color\") {\r\n        UseRules({ element: element, key: 'color', value: value });\r\n    }\r\n    Array.from(element.querySelectorAll(`[style*='${key}']`)).forEach(el => {\r\n        el.style[key] = null;\r\n        normalizeStyle(el);\r\n    });\r\n    //experimental: style the text decorations with color..\r\n    //TODO:review\r\n    // UseRules({element:element,key:key,value:value});\r\n}\r\nexport const collectStyleFromSelectedElement = (connectecElement) => {\r\n    const selectedElement = getSelectedElement();\r\n    return getInheirtCss(selectedElement, connectecElement);\r\n}\r\n\r\nexport function normalizeStyle(element) {\r\n    if (!element) return null;\r\n    //TODO:review\r\n    const style = element.getAttribute('style');\r\n    if (!style) {\r\n        element.removeAttribute('style');\r\n    } else {\r\n        const collectStyles = getStyle(element);\r\n        for (const key in collectStyles) {\r\n            if (collectStyles.hasOwnProperty(key)) {\r\n                Array.from(element.querySelectorAll(`[style*='${collectStyles[key]}']`)).forEach(el => {\r\n                    el.style[key] = null;\r\n                    normalizeStyle(el);\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function JsonObjectToStyleString(styles) {\r\n    let collectStyles = [];\r\n    for (const key in styles) {\r\n        if (styles.hasOwnProperty(key)) {\r\n            const style = styles[key];\r\n            collectStyles.push(`${key}:${style}`);\r\n        }\r\n    }\r\n    return collectStyles.join(';');\r\n}\r\nexport function getStyle(el) {\r\n    if (!el || !el.style) return {};\r\n    let styles = {};\r\n    let style = el.getAttribute('style');\r\n    if (style) {\r\n        let collectStyles = style.split(';');\r\n        if (Array.isArray(collectStyles)) {\r\n            collectStyles.forEach(style => {\r\n\r\n                const keyValue = style.split(':');\r\n                if (keyValue[1] && keyValue[0])\r\n                    styles[keyValue[0].trim()] = keyValue[1].trim();\r\n            })\r\n        }\r\n\r\n    }\r\n    return styles;\r\n}\r\nexport function findBlockAndStyleIt(element, key, value) {\r\n    let blockElement = GetClosestBlockElement(element);\r\n    if (blockElement) {\r\n        blockElement.style[key] = value;\r\n        Array.from(blockElement.querySelectorAll(`[style*='${key}']`)).forEach(el => el.style[key] = null);\r\n        return true;\r\n    }\r\n    return false;\r\n}","import { setStyle, normalizeStyle } from \"../services/style.service\";\r\nimport { splitHTML } from \"../utilis/splitHTML\";\r\nimport { normalizeElement } from \"../services/textEditor.service\";\r\n\r\n//TODO:review\r\nexport function UseRules(data) {\r\n    const ColorTextDecorationRule = (data) => {\r\n        if (data.key === \"color\") {\r\n            const textDecoration = data.element.closest(`[style*='text-decoration']`);\r\n            if (textDecoration) {\r\n                const splits = splitHTML(data.element, textDecoration);\r\n                if (splits) {\r\n                    normalizeStyle();\r\n                    setStyle(splits.center, 'text-decoration-color', `${data.value}`);\r\n                    for (const key in splits) {\r\n                        const element = splits[key];\r\n                        normalizeElement(element);\r\n                    }\r\n                } else {\r\n                    setStyle(textDecoration, 'text-decoration-color', `${data.value}`);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const Rules = [\r\n        ColorTextDecorationRule\r\n    ]\r\n    Rules.forEach(rule => rule(data));\r\n}","export const void_elements = {\r\n    \"BR\":\"BR\",\r\n    \"HR\":\"HR\",\r\n    \"IMG\":\"IMG\",\r\n    \"INPUT\":\"INPUT\",\r\n    \"AUDIO\":\"AUDIO\",\r\n    \"VIDEO\":\"VIDEO\",\r\n    \"PICTURE\":\"PICTURE\"\r\n}","export const inline_elemets_arr = [\"SPAN\",\"BOLD\",\"STRONG\",\"EM\",\"I\",\"S\",\"MARK\",\"B\",\"SUB\",\"SUP\",\"SMALL\",\"INS\"];\r\nexport const inline_elements = {};\r\ninline_elemets_arr.forEach(tag=>{inline_elements[tag] = tag});","import { getStyle, JsonObjectToStyleString } from \"./style.service\";\r\nimport { void_elements } from \"../constants/void_elms\";\r\nimport { block_elments_queryString } from \"../constants/block_elms\";\r\nimport { inline_elements } from \"../constants/inline_elems\";\r\nimport { removeElement } from \"./range.service\";\r\n\r\nexport function wrapNakedTextNodes(target) {\r\n\r\n    target.normalize();\r\n\r\n    Array.from(target.childNodes).forEach(c => {\r\n\r\n        if (c.nodeType === 1 && !c.textContent.trim() && c.children.length === 0 && !void_elements[c.nodeName]) {\r\n            removeElement(c);\r\n            return;\r\n        }\r\n        if (c.parentElement === target && c.textContent.trim() && ((c.nodeType === 1 && inline_elements[c.nodeName] && !c.parentElement.closest(block_elments_queryString)) || c.nodeType === 3)) {\r\n            const p = document.createElement(\"p\");\r\n            c.wrap(p);\r\n\r\n            while (p.nextSibling && (p.nextSibling.nodeType === 3 || inline_elements[p.nextSibling.nodeName])) {\r\n                p.appendChild(p.nextSibling);\r\n            }\r\n\r\n            p.normalize();\r\n        }\r\n    })\r\n}\r\n\r\nexport function walkTheDOM(node, func) {\r\n    if (!node) return null;\r\n    func(node);\r\n    node = node.firstChild;\r\n    while (node) {\r\n        walkTheDOM(node, func);\r\n        node = node.nextSibling;\r\n    }\r\n}\r\nexport function walkOnElement(node, func) {\r\n    if (!node) return null;\r\n    const continueWith = func(node);\r\n    if (continueWith) {\r\n        node = continueWith;\r\n    }\r\n    node = node.firstElementChild;\r\n    while (node) {\r\n        walkOnElement(node, func);\r\n        node = node.nextElementSibling;\r\n    }\r\n}\r\nexport function getSelectedElement() {\r\n    var node = document.getSelection();\r\n    if (node) {\r\n        var ancNode = node.focusNode;\r\n        if (ancNode !== null) {\r\n            while (ancNode.nodeType === 3) {\r\n                ancNode = ancNode.parentNode;\r\n            }\r\n            // const el = (ancNode.nodeType === 3 ? ancNode.parentNode : node);\r\n            return ancNode;\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexport function JsonToElement(jsonObject, parentElement) {\r\n    //TODO: create parentelement and jsonobject validation   \r\n    const renderAttrs = (jsElement, element) => {\r\n        if (jsElement.classList) {\r\n            element.classList = [...jsElement.classList];\r\n        }\r\n        if (jsElement.style) {\r\n            const collectedStyle = JsonObjectToStyleString(jsElement.style);\r\n            element.style = collectedStyle;\r\n        }\r\n        if (jsElement.attrs) {\r\n            for (const attr in jsElement.attrs) {\r\n                if (Object.hasOwnProperty.call(jsElement.attrs, attr)) {\r\n                    const value = jsElement.attrs[attr];\r\n                    element.setAttribute(attr, value);\r\n                }\r\n            }\r\n        }\r\n        //TODO: other attrs...\r\n    }\r\n    const createHtmlElement = (jsElement) => {\r\n        const nodeType = jsElement.tag;\r\n        let element;\r\n        let isShouldRenderAttrs;\r\n        switch (nodeType) {\r\n            case \"#text\":\r\n                element = document.createTextNode(jsElement.textContent);\r\n                break;\r\n                case \"#comment\":\r\n                    element = document.createComment(jsElement.textContent)\r\n                    break;\r\n            case \"A\":\r\n                element = document.createElement(nodeType);\r\n                element.href = jsElement.href;\r\n                element.target = jsElement.target;\r\n                break;\r\n            default:\r\n                element = document.createElement(nodeType);\r\n                isShouldRenderAttrs = true;\r\n                break;\r\n        }\r\n        if (isShouldRenderAttrs && element) {\r\n            renderAttrs(jsElement, element);\r\n        }\r\n        return element;\r\n    }\r\n    if (!parentElement) {\r\n        parentElement = createHtmlElement(jsonObject);\r\n    }\r\n    if (Array.isArray(jsonObject.children)) {\r\n        jsonObject.children.forEach(jsChild => {\r\n            const htmlElement = createHtmlElement(jsChild);\r\n            if (htmlElement) {\r\n                parentElement.appendChild(htmlElement);\r\n                JsonToElement(jsChild, htmlElement);\r\n            } else {\r\n                console.error('cant create dom element from json', jsChild);\r\n            }\r\n        });\r\n    }\r\n    return parentElement;\r\n}\r\nexport function elementToJson(node) {\r\n\r\n    const nodeType = node.nodeName;\r\n    let isShouldRenderAttrs = true;\r\n    let json = {};\r\n    let isValid = true;\r\n\r\n\r\n    switch (nodeType) {\r\n        case \"#text\":\r\n            json.tag = nodeType;\r\n            json.textContent = node.textContent.replace(/\\u200B/g, '');\r\n            isShouldRenderAttrs = false;\r\n            //question: replace \\n ?\r\n            if (!json.textContent.trim()) isValid = false;\r\n            break;\r\n        case \"#comment\":\r\n            json.tag = nodeType;\r\n            json.textContent = node.textContent.replace(/\\u200B/g, '');\r\n            isShouldRenderAttrs = false;\r\n            if (!json.textContent.trim()) isValid = false;\r\n            break;\r\n        case \"A\":\r\n            json.tag = nodeType;\r\n            json.href = node.href;\r\n            json.target = node.target;\r\n            break;\r\n        default:\r\n            json.tag = nodeType;\r\n            //TODO: should we unwrap this node ? \r\n            break;\r\n    }\r\n    if (!isValid) return null;\r\n    if (isShouldRenderAttrs) {\r\n        json.attrs = {};\r\n        //TODO: get attrs \r\n        Array.from(node.attributes).forEach(attr => {\r\n            switch (attr.name) {\r\n                case \"style\":\r\n                    const style = getStyle(node);\r\n                    if (Object.keys(style).length > 0) {\r\n                        json.style = style;\r\n                    }\r\n                    break;\r\n                case \"class\":\r\n                    if (node.classList && node.classList.length > 0)\r\n                        json.classList = [...node.classList];\r\n                    break;\r\n                default:\r\n                    json.attrs[attr.name] = attr.value;\r\n                    break;\r\n            }\r\n        })\r\n\r\n\r\n\r\n        if (node.childNodes && node.childNodes.length > 0)\r\n            json.children = [...node.childNodes].map((cn) => elementToJson(cn)).filter(v => v);\r\n    }\r\n\r\n    return json;\r\n\r\n}","import { block_elments_queryString } from \"../constants/block_elms\";\r\nimport { getSelectedElement } from \"./elements.service\";\r\nimport { getCleanText } from \"./textEditor.service\";\r\n\r\nexport function createInnerWrapperElement(element, options) {\r\n  if (typeof (options) !== \"object\") options = {};\r\n  let innerSpan = document.createElement(options.el || \"span\");\r\n  Array.from(element.childNodes).forEach(child => innerSpan.appendChild(child));\r\n  element.appendChild(innerSpan);\r\n  return innerSpan;\r\n}\r\nexport function GetClosestBlockElement(element) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n  if (element.nodeType !== 1) {\r\n    element = element.parentElement;\r\n  } if (element) {\r\n    const block = element.closest(block_elments_queryString);\r\n    return block;\r\n  }\r\n\r\n}\r\n//TODO:review\r\nexport function wrapRangeWithBlockElement(limitElement) {\r\n  const wrapElementWithBlock = (el) => {\r\n    let wEl = \"div\";\r\n    if (el.nodeName === \"SPAN\") {\r\n      wEl = \"p\";\r\n    }\r\n    const wrapper = document.createElement(wEl);\r\n    el.wrap(wrapper);\r\n    return wrapper;\r\n  }\r\n  const elements = [];\r\n  let nodes = wrapRangeWithElement();\r\n  nodes.forEach(el => {\r\n    const blockEl = GetClosestBlockElement(el);\r\n    if (blockEl) {\r\n      if (blockEl.ischildOf(limitElement)) {\r\n        const founded = elements.find(block => blockEl.ischildOf(block));\r\n        if (!founded)\r\n          elements.push(blockEl);\r\n      } else {\r\n        const _wrapper = wrapElementWithBlock(el);\r\n        elements.push(_wrapper);\r\n      }\r\n    } else {\r\n      const _wrapper = wrapElementWithBlock(el);\r\n      elements.push(_wrapper);\r\n\r\n    }\r\n  });\r\n  return {\r\n    nodes: nodes,\r\n    blocks: elements\r\n  }\r\n  return elements;\r\n}\r\nexport function wrapRangeWithElement(wrapTag) {\r\n  const ranges = getRanges();\r\n    return wrapRangeText(wrapTag, ranges);\r\n\r\n}\r\nexport function getRanges() {\r\n  const sel = window.getSelection();\r\n  return sel.getRangeAt(0);;\r\n}\r\n// return all text nodes that are contained within `el`\r\nexport function getTextNodes(el) {\r\n  el = el || document.body\r\n\r\n  var doc = el.ownerDocument || document,\r\n    walker = doc.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false),\r\n    textNodes = [],\r\n    node = walker.nextNode();\r\n\r\n  while (node) {\r\n    if(getCleanText(node.textContent))\r\n    textNodes.push(node);\r\n    node = walker.nextNode();\r\n  }\r\n  return textNodes\r\n}\r\nexport function rangesIntersect(rangeA, rangeB) {\r\n  return rangeA.compareBoundaryPoints(Range.END_TO_START, rangeB) === -1 &&\r\n    rangeA.compareBoundaryPoints(Range.START_TO_END, rangeB) === 1\r\n}\r\nexport function createRangeFromNode(node) {\r\n  var range = node.ownerDocument.createRange()\r\n  try {\r\n    range.selectNode(node)\r\n  } catch (e) {\r\n    range.selectNodeContents(node)\r\n  }\r\n  return range\r\n}\r\nexport function getCaretCharacterOffsetWithin(element) {\r\n  var caretOffset = 0;\r\n  var doc = element.ownerDocument || element.document;\r\n  var win = doc.defaultView || doc.parentWindow;\r\n  var sel;\r\n  if (typeof win.getSelection != \"undefined\") {\r\n    sel = win.getSelection();\r\n    if (sel.rangeCount > 0) {\r\n      var range = win.getSelection().getRangeAt(0);\r\n      var preCaretRange = range.cloneRange();\r\n      preCaretRange.selectNodeContents(element);\r\n      preCaretRange.setEnd(range.endContainer, range.endOffset);\r\n      caretOffset = preCaretRange.toString().length;\r\n    }\r\n  } else if ((sel = doc.selection) && sel.type != \"Control\") {\r\n    var textRange = sel.createRange();\r\n    var preCaretTextRange = doc.body.createTextRange();\r\n    preCaretTextRange.moveToElementText(element);\r\n    preCaretTextRange.setEndPoint(\"EndToEnd\", textRange);\r\n    caretOffset = preCaretTextRange.text.length;\r\n  }\r\n  return caretOffset;\r\n}\r\nexport function setCaretAt(element, charIndex = 0) {\r\n\r\n  var node = element;\r\n  node.focus();\r\n  var textNode = Array.from(node.childNodes).filter(child => child.nodeType === Node.TEXT_NODE);\r\n  if (textNode.length === 0) {\r\n    textNode = element;\r\n    while (textNode && textNode.firstChild && textNode.nodeType !== 3) {\r\n      textNode = textNode.firstChild;\r\n    }\r\n    if (textNode) {\r\n      textNode = [textNode];\r\n    }\r\n  }\r\n\r\n  var range = document.createRange();\r\n  range.setStart(textNode[0], charIndex);\r\n  range.setEnd(textNode[0], charIndex);\r\n  range.collapse(true)\r\n  var sel = window.getSelection();\r\n  sel.removeAllRanges();\r\n  sel.addRange(range);\r\n\r\n}\r\nexport function pasteHtmlAtCaret(html) {\r\n  const selectedElement = getSelectedElement();\r\n  const contenteditable = selectedElement.closest(\"[contenteditable]\");\r\n  let isValid = true;\r\n  if (contenteditable) {\r\n    if (!contenteditable.isContentEditable) {\r\n      isValid = false;\r\n    }\r\n  } else {\r\n    isValid = false;\r\n  }\r\n  if (!isValid) {\r\n    return null;\r\n  }\r\n  var sel, range;\r\n  if (window.getSelection) {\r\n    // IE9 and non-IE\r\n    sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      range = sel.getRangeAt(0);\r\n      range.deleteContents();\r\n\r\n      // Range.createContextualFragment() would be useful here but is\r\n      // only relatively rece ntly standardized and is not supported in\r\n      // some browsers (IE9, for one)\r\n      let el;\r\n      if (typeof (html) === \"string\") {\r\n        el = document.createElement(\"div\");\r\n        el.innerHTML = html;\r\n        var frag = document.createDocumentFragment(), node, lastNode;\r\n        while ((node = el.firstChild)) {\r\n          lastNode = frag.appendChild(node);\r\n        }\r\n        range.insertNode(frag);\r\n      }\r\n      else if (typeof (html) === \"object\") {\r\n        range.insertNode(html);\r\n\r\n      }\r\n\r\n\r\n\r\n      // Preserve the selection\r\n      if (lastNode) {\r\n        range = range.cloneRange();\r\n        range.setStartAfter(lastNode);\r\n        range.collapse(true);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function rangeIntersectsNode(range, node) {\r\n  if (range.intersectsNode) {\r\n    return range.intersectsNode(node)\r\n  } else {\r\n    return rangesIntersect(range, createRangeFromNode(node))\r\n  }\r\n}\r\nexport function getRangeTextNodes(range) {\r\n  var container = range.commonAncestorContainer,\r\n    nodes = getTextNodes(container.parentNode || container)\r\n\r\n  return nodes.filter((node) => {\r\n    return rangeIntersectsNode(range, node) && isNonEmptyTextNode(node)\r\n  })\r\n}\r\nexport function isNonEmptyTextNode(node) {\r\n  return node.textContent.length > 0\r\n}\r\nexport function removeElement(el) {\r\n  if (el.parentNode) {\r\n    el.parentNode.removeChild(el)\r\n  }\r\n}\r\nexport function replaceNode(replacementNode, node) {\r\n  if (node.parentNode) {\r\n    removeElement(replacementNode);\r\n    node.parentNode.insertBefore(replacementNode, node);\r\n    removeElement(node);\r\n  }\r\n}\r\nexport function selectText(node) {\r\n  if (document.body.createTextRange) {\r\n    const range = document.body.createTextRange();\r\n    range.moveToElementText(node);\r\n    range.select();\r\n  } else if (window.getSelection) {\r\n    const selection = window.getSelection();\r\n    const range = document.createRange();\r\n    range.selectNodeContents(node);\r\n    selection.removeAllRanges();\r\n    selection.addRange(range);\r\n  } else {\r\n    console.warn(\"Could not select text in node: Unsupported browser.\");\r\n  }\r\n}\r\nexport function insertAfter(newNode, referenceNode) {\r\n  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\r\n}\r\nexport function createWrapperFunction(wrapperEl, range) {\r\n  var startNode = range.startContainer,\r\n    endNode = range.endContainer,\r\n    startOffset = range.startOffset,\r\n    endOffset = range.endOffset\r\n\r\n  return function wrapNode(node) {\r\n    var currentRange = document.createRange(),\r\n      currentWrapper = wrapperEl.cloneNode()\r\n\r\n    currentRange.selectNodeContents(node);\r\n    if (node === startNode && startNode.nodeType === 3) {\r\n      currentRange.setStart(node, startOffset)\r\n      startNode = currentWrapper\r\n      startOffset = 0\r\n    }\r\n    if (node === endNode && endNode.nodeType === 3) {\r\n      currentRange.setEnd(node, endOffset)\r\n      endNode = currentWrapper;\r\n      endOffset = 1\r\n    }\r\n    currentRange.surroundContents(currentWrapper);\r\n    let parentEl = currentWrapper;\r\n    while(parentEl.textContent  === parentEl.parentElement.textContent && parentEl.nodeName === parentEl.parentNode.nodeName){\r\n      parentEl = parentEl.parentNode;\r\n    }\r\n    if(parentEl !== currentWrapper){\r\n      currentWrapper.unwrap();\r\n    }\r\n    return parentEl\r\n  }\r\n}\r\nexport const querySelectorUnderSelection = (querySelector) => {\r\n  var selection = window.getSelection();\r\n  var range = selection.getRangeAt(0);\r\n  const allSelected = [];\r\n\r\n  let commonAncestorContainer = range.commonAncestorContainer;\r\n\r\n  if (commonAncestorContainer.nodeType === 3) {\r\n    commonAncestorContainer = commonAncestorContainer.parentElement;\r\n  }\r\n  if (!commonAncestorContainer) {\r\n    return allSelected;\r\n  }\r\n  const elements = commonAncestorContainer.querySelectorAll(querySelector);\r\n  for (var i = 0, el; el = elements[i]; i++) {\r\n    // The second parameter says to include the element \r\n    // even if it's not fully selected\r\n    if (selection.containsNode(el, true)) {\r\n      allSelected.push(el);\r\n    }\r\n  }\r\n  if (allSelected.length === 0) {\r\n    const selected = getSelectedElement();\r\n    if (selected) {\r\n      const closestElement = selected.closest(querySelector);\r\n      if (closestElement) {\r\n\r\n        allSelected.push(closestElement);\r\n      }\r\n    }\r\n  }\r\n  return allSelected;\r\n}\r\nexport function getAllNodes() {\r\n  var nodes, range;\r\n  if (typeof range === 'undefined') {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n  nodes = getRangeTextNodes(range)\r\n  nodes = nodes.map(node => {\r\n    if (node !== null) {\r\n      while (node.nodeType === 3) {\r\n        node = node.parentNode;\r\n      }\r\n      return node;\r\n    }\r\n    return null;\r\n  });\r\n  return nodes\r\n}\r\nexport function wrapRangeText(wrapperEl, range) {\r\n  var nodes, wrapNode;\r\n\r\n  if (!range) {\r\n    // get the current selection if no range is specified\r\n    range = window.getSelection().getRangeAt(0)\r\n  }\r\n\r\n  if (range.isCollapsed) {\r\n    // nothing to wrap\r\n    return []\r\n  }\r\n\r\n  if (!wrapperEl) {\r\n    wrapperEl = 'span'\r\n  }\r\n\r\n  if (typeof wrapperEl === 'string') {\r\n    // assume it's a tagname\r\n    wrapperEl = document.createElement(wrapperEl);\r\n  }\r\n\r\n  wrapNode = createWrapperFunction(wrapperEl, range)\r\n  nodes = getRangeTextNodes(range);\r\n  nodes = nodes.map(wrapNode);\r\n  return nodes\r\n}\r\nexport function setSelectionBetweenTwoNodes(firstFlag, lastFlag, options = {}) {\r\n  const _options = { remove: true };\r\n  Object.assign(_options, options);\r\n  document.getSelection().setBaseAndExtent(firstFlag, 0, lastFlag, lastFlag.childNodes.length);\r\n  if (_options.remove) {\r\n    [firstFlag, lastFlag].forEach(e => e.unwrap());\r\n  }\r\n}\r\nexport function setSelectionFlags(firstElement, LastElement) {\r\n  const selection = window.getSelection();\r\n  const firstFlag = document.createElement('text-selection');\r\n  firstFlag.setAttribute('zero-space', firstElement.textContent.length === 0)\r\n  const lastFlag = document.createElement('text-selection');\r\n  lastFlag.setAttribute('zero-space', LastElement.textContent.length === 0)\r\n\r\n  firstElement.prepend(firstFlag); //Set flag the first\r\n  LastElement.appendChild(lastFlag); //Set Flag at last\r\n  return { firstFlag, lastFlag };\r\n}\r\nexport function getSelectedHTML() {\r\n  var range;\r\n  if (window.getSelection) {\r\n    var selection = window.getSelection();\r\n    if (selection.focusNode === null) return;\r\n    range = selection.getRangeAt(0);\r\n    if (range.collapsed) {\r\n      return;\r\n    }\r\n    var content = range.extractContents();\r\n    return {\r\n      content: content,\r\n      range: range\r\n    }\r\n  }\r\n}\r\nexport function saveSelection() {\r\n  if (window.getSelection) {\r\n    var sel = window.getSelection();\r\n    if (sel.getRangeAt && sel.rangeCount) {\r\n      return sel.getRangeAt(0);\r\n    }\r\n  } else if (document.selection && document.selection.createRange) {\r\n    return document.selection.createRange();\r\n  }\r\n  return null;\r\n};\r\nexport function restoreSelection(range) {\r\n  if (range) {\r\n    if (window.getSelection) {\r\n      var sel = window.getSelection();\r\n      sel.removeAllRanges();\r\n      sel.addRange(range);\r\n    } else if (document.selection && range.select) {\r\n      range.select();\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { block_elments, block_elments_queryString } from \"../../constants/block_elms\";\r\nimport { inline_elements } from \"../../constants/inline_elems\";\r\nimport { void_elements } from \"../../constants/void_elms\";\r\nimport { splitHTML } from \"../../utilis/splitHTML\";\r\nimport { pasteHtmlAtCaret, setCaretAt } from \"../range.service\";\r\nimport { getInheirtCss, setStyles } from \"../style.service\";\r\nimport { getCleanText, normalizeElement } from \"../textEditor.service\";\r\n\r\n\r\nexport default class CopyPaste {\r\n\r\n  constructor(target, options) {\r\n    if(options.plugins && typeof options.plugins.copyPaste === \"boolean\" && options.plugins.copyPaste === false){\r\n      return;\r\n  }\r\n    this.target = target;\r\n    this.stylesToPaste = typeof options.stylesToPaste === \"object\" ? options.stylesToPaste : null;\r\n    this.paste = this.paste.bind(this);\r\n    this.copy = this.copy.bind(this);\r\n    this.destroy = this.destroy.bind(this);\r\n    this.start();\r\n  }\r\n\r\n  copy(event) {\r\n    let html = \"\";\r\n    if (typeof window.getSelection) {\r\n      var sel = window.getSelection();\r\n      if (sel.rangeCount) {\r\n        const container = document.createElement(\"div\");\r\n        for (var i = 0, len = sel.rangeCount; i < len; ++i) {\r\n          const range = sel.getRangeAt(i);\r\n          let copiedNode = range.cloneContents();\r\n          container.appendChild(copiedNode);\r\n          if(event.type === \"cut\"){\r\n            range.extractContents();\r\n          }\r\n          Array.from(container.childNodes).forEach(n => {\r\n            if (n.nodeType === 3) {\r\n              const parentCopiedNode = sel.getRangeAt(i).startContainer.parentNode;\r\n              const collectedCSS = getInheirtCss(parentCopiedNode, this.target);\r\n              const span = document.createElement(\"span\");\r\n              span.textContent = copiedNode.textContent;\r\n              setStyles(span, collectedCSS);\r\n              n.wrap(span);\r\n\r\n            } else if (void_elements[n.nodeName] && n.nodeName !== \"BR\") {\r\n              n.parentElement.removeChild(n);\r\n            }\r\n          })\r\n\r\n        }\r\n        html = container;\r\n      }\r\n    } else if (typeof document.selection) {\r\n      if (document.selection.type === \"Text\") {\r\n        html = document.selection.createRange().htmlText;\r\n      }\r\n    }\r\n    event.preventDefault();\r\n    event.clipboardData.setData('styleit/html', html.innerHTML);\r\n    event.clipboardData.setData('text/plain', html.textContent);\r\n  }\r\n  paste(event) {\r\n    const isShifted = event.shiftKey;\r\n    if (isShifted) {\r\n      this.pastePlainText(event);\r\n    } else {\r\n      this.pasteWithStyles(event);\r\n    }\r\n\r\n  };\r\n\r\n  pastePlainText(event) {\r\n    const data = event.clipboardData || window.clipboardData;\r\n    event.preventDefault();\r\n    let copied = data.getData('text/plain').trim();\r\n    copied = copied.replace(/\\n/g, \"<br/>\")\r\n    if (!copied.trim()) {\r\n      return;\r\n    }\r\n    const p = document.createElement(\"p\");\r\n    p.innerHTML = copied;\r\n\r\n    pasteHtmlAtCaret(p);\r\n    setCaretAt(p);\r\n\r\n    if (p.parentElement !== this.target) {\r\n      p.unwrap();\r\n\r\n    }\r\n    Array.from(this.target.children).forEach(child => {\r\n      if (!child.textContent.trim()) {\r\n        this.target.removeChild(child);\r\n      }\r\n    })\r\n  }\r\n  pasteWithStyles(event) {\r\n    event.preventDefault();\r\n    const data = event.clipboardData || window.clipboardData;\r\n    const copied = data.getData('styleit/html').trim();\r\n    //on copied on the editor localy\r\n    if (copied) {\r\n      const pastedContainer = document.createElement(\"div\");\r\n      pastedContainer.innerHTML = copied;\r\n      pasteHtmlAtCaret(pastedContainer);\r\n      Array.from(pastedContainer.children).forEach(child => {\r\n        if (!getCleanText(child.textContent) && !void_elements[child.nodeName] && (block_elments[child.nodeName] || inline_elements[child.nodeName])) {\r\n          child.parentElement.removeChild(child);\r\n        }\r\n      });\r\n      Array.from(pastedContainer.children).forEach(child => {\r\n        \r\n        const sameNode = child.parentElement.closest(block_elments_queryString);\r\n        if (sameNode && block_elments[child.nodeName] && getCleanText(sameNode.textContent) === getCleanText(pastedContainer.textContent)) {\r\n          sameNode.parentElement.insertBefore(child, sameNode);\r\n        }\r\n        else if (child.nodeType === 1 && block_elments[child.nodeName] && sameNode) {\r\n          if (pastedContainer.children.length > 1) {\r\n            child.insertAfter(document.createElement(\"BR\"));\r\n          }\r\n          child.unwrap();\r\n        }\r\n        else if (!getCleanText(child.textContent)) {\r\n          child.unwrap();\r\n        }\r\n      });\r\n      const block = pastedContainer.closest(block_elments_queryString);\r\n      if (block) {\r\n        const parts = splitHTML(pastedContainer, block, { tag: block.nodeName });\r\n        if (parts) {\r\n          parts.left.appendChild(parts.center);\r\n          parts.center.appendChild(parts.right);\r\n          parts.right.unwrap();\r\n          parts.center.unwrap();\r\n        }\r\n      }\r\n      normalizeElement(this.target);\r\n      setCaretAt(pastedContainer);\r\n      pastedContainer.unwrap();\r\n    } else {\r\n      this.pastePlainText(event);\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.target.addEventListener(\"paste\", this.paste);\r\n    this.target.addEventListener(\"copy\", this.copy);\r\n    this.target.addEventListener(\"cut\", this.copy);\r\n  }\r\n  destroy() {\r\n    if(this.target){\r\n      this.target.removeEventListener(\"paste\", this.paste);\r\n    this.target.removeEventListener(\"copy\", this.copy);\r\n    this.target.addEventListener(\"cut\", this.copy);\r\n    }\r\n  }\r\n}\r\n\r\n","export const EVENTS = {\r\n  \r\n}","export   const TARGETS = {\r\n    _blank: \"_blank\",\r\n    _self: \"_self\",\r\n    _parent: \"_parent\",\r\n    _top: \"_top\"\r\n}\r\nexport  const resetURL = (src) => {\r\n    src = src.replace(/https:/g, '');\r\n    src = src.replace(/http:/g, '');\r\n    src = src.replace(/mailto:/g, '');\r\n    src = src.replace(/tel:/g, '');\r\n    src = src.replace(/\\//g, '');\r\n    return src;\r\n}\r\nexport   const createTempLinkElement = (href) => {\r\n    const Atag = document.createElement(\"a\");\r\n    Atag.href = href;\r\n    return Atag;\r\n}","\r\nimport { collectStyleFromSelectedElement } from '../style.service';\r\nimport { EVENTS } from '../events/events';\r\nimport { getSelectedElement } from '../elements.service';\r\nimport { resetURL } from '../link.service';\r\n\r\n//TODO: review\r\n//question: how can we expose the collectedStyle ? \r\n//question: should we use this ? https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\r\nexport default class Inpsector {\r\n    constructor(target, onInspect) {\r\n\r\n        if (!target) {\r\n            console.error('[-] Inpsector => target is null');\r\n            return null;\r\n        }\r\n        //TODO: use the validator\r\n        this.onInspect = onInspect;\r\n        this.target = target;\r\n\r\n        const launchInspect = () => {\r\n            const collectedStyle = collectStyleFromSelectedElement(this.target);\r\n            if (typeof (this.onInspect) === \"function\")\r\n                this.onInspect(collectedStyle);\r\n            if (typeof (EVENTS[\"inspect\"]) === \"function\") {\r\n                EVENTS[\"inspect\"](collectedStyle);\r\n            }\r\n            const selectedElement = getSelectedElement();\r\n            \r\n            if(selectedElement ){\r\n                const aTag = selectedElement.closest(\"a\");\r\n                if(aTag){\r\n                    if(typeof(EVENTS[\"inspectLink\"]) === \"function\"){\r\n                        EVENTS[\"inspectLink\"]({\r\n                            protocol:aTag.protocol,\r\n                            href:resetURL(aTag.href),\r\n                            target:aTag.getAttribute(\"target\") || \"\",\r\n                            element:aTag\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        this.onKeyDown = (e) => {\r\n            //TODO: review\r\n            if (e.keyCode === 8 && this.target.children.length <= 1 && !this.target.textContent) {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n            launchInspect();\r\n        }\r\n        this.onClick = () => {\r\n            launchInspect();\r\n        }\r\n\r\n        this.target.addEventListener('click', this.onClick);\r\n        this.target.addEventListener('keydown', this.onKeyDown);\r\n\r\n        this.destroy = () => {\r\n            this.target.removeEventListener('click', this.onClick);\r\n            this.target.removeEventListener('keydown', this.onKeyDown);\r\n            this.target = null;\r\n        }\r\n    }\r\n}","import {  wrapNakedTextNodes } from \"../elements.service\";\r\nimport { GetClosestBlockElement, insertAfter, pasteHtmlAtCaret, setCaretAt } from \"../range.service\";\r\nimport {void_elements} from '../../constants/void_elms';\r\nimport { getCleanText } from \"../textEditor.service\";\r\nexport default class KeyPress {\r\n\r\n    constructor(target, options = {}) {\r\n        if (!target) {\r\n            console.error('[-] keyPress => target is null');\r\n            return null;\r\n        }\r\n        if(options.plugins && typeof options.plugins.keyPress === \"boolean\" && options.plugins.keyPress === false){\r\n            return;\r\n        }\r\n        if (typeof options.onKeyPress === \"function\") {\r\n            this.onKeyPress = options.onKeyPress;\r\n        }\r\n        this.target = target;\r\n    \r\n\r\n        this.keypress = (e) => {\r\n            // const sel = window.getSelection();\r\n            // if(sel.focusNode.nodeType === 3 && !sel.focusNode.parentElement.closest(block_elments_queryString)){\r\n            //     const p = document.createElement(\"P\");\r\n            //     sel.focusNode.wrap(p);\r\n            //     setCaretAt(p,1)\r\n            // }\r\n            if (e.keyCode === 8) {\r\n                const target = e.target;\r\n                if (getCleanText(target.textContent) === \"\") {\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n            }\r\n            else if (e.keyCode === 13) {\r\n                if (e.shiftKey) {\r\n                    pasteHtmlAtCaret(\"</br>&#8203;\");\r\n                    e.preventDefault();\r\n                    return;\r\n                }\r\n\r\n                const range = document.createRange();\r\n                const selection = window.getSelection();\r\n                var blockElement = GetClosestBlockElement(selection.anchorNode);\r\n\r\n                if (blockElement === this.target || !blockElement) {\r\n                    return false\r\n                }\r\n                const range2extract = selection.getRangeAt(0);\r\n                range2extract.extractContents();\r\n                range.setStart(selection.anchorNode, selection.anchorOffset);\r\n                range.setEnd(blockElement, blockElement.childNodes.length);\r\n                selection.removeAllRanges();\r\n                selection.addRange(range);\r\n                if (selection.isCollapsed) {\r\n                    if (blockElement && !this.target.textContent.trim()) {\r\n                        if (blockElement !== this.target) {\r\n                            Array.from(this.target.children).forEach(c => {\r\n                                if (c !== blockElement && !c.textContent.trim()) {\r\n                                    c.unwrap();\r\n                                }\r\n                            })\r\n                            blockElement.innerHTML = blockElement.innerHTML + \"&#8203;\";\r\n                            setCaretAt(blockElement);\r\n                            e.preventDefault();\r\n                        }\r\n                    }\r\n                    return false;\r\n                } else {\r\n                    e.preventDefault();\r\n                }\r\n\r\n                const docFragment = range.extractContents();\r\n                Array.from(docFragment.children).forEach(child => {\r\n                    if (child.nodeType === 1 && !child.textContent.trim() && !void_elements[child.nodeName]) {\r\n                        child.unwrap();\r\n                    }\r\n                });\r\n\r\n                const el = document.createElement(blockElement.nodeName || \"p\");\r\n                el.appendChild(docFragment);\r\n                if (!el.textContent.trim()) {\r\n                    el.innerHTML = \"&#8203;\";\r\n                }\r\n                insertAfter(el, blockElement);\r\n                Array.from(el.previousSibling.attributes).forEach(attr=>{\r\n                    el.setAttribute(attr.name,attr.value);\r\n                })\r\n               \r\n                const br = document.createElement(\"br\");\r\n                blockElement.appendChild(br);\r\n\r\n\r\n                selection.removeAllRanges();\r\n                wrapNakedTextNodes(this.target, { expect: blockElement });\r\n                setCaretAt(el, 0);\r\n            }\r\n            else if (typeof this.onKeyPress === \"function\") {\r\n                this.onKeyPress(e);\r\n            }\r\n        }\r\n\r\n\r\n        this.target.addEventListener('keydown', this.keypress);\r\n\r\n        this.destroy = () => {\r\n            if(this.target){\r\n                this.target.removeEventListener('keydown', this.keypress);\r\n                this.target = null;\r\n            }\r\n        }\r\n    }\r\n}","import DomUtilis from \"./utilis/DomUtilis\";\r\nimport CopyPaste from \"./services/copyPaste/copyPaste.service\";\r\nimport Inpsector from \"./services/Inspector/Inspector.service\";\r\nimport KeyPress from \"./services/keyPress/KeyPress\";\r\nimport { wrapNakedTextNodes } from \"./services/elements.service\";\r\n\r\n//TODO:review\r\nexport default class Connector {\r\n    constructor() {\r\n    }\r\n\r\n    Connect(element, options) {\r\n        if (typeof element === \"string\") {\r\n            element = document.getElementById(element);\r\n            if (!element) {\r\n                //TODO: use the validator\r\n                console.error('[-] =>connectWith should be element id or dom element..');\r\n                return null;\r\n            }\r\n        } \r\n         if (DomUtilis.isElement(element)) {\r\n            // valid..\r\n            document.execCommand('defaultParagraphSeparator', false, 'p');\r\n            document.execCommand(\"styleWithCSS\", true, null);\r\n        } else {\r\n            //TODO: use the validator\r\n            console.error('[-] =>connectWith should be element id or dom element..');\r\n            return null;\r\n        }\r\n      \r\n        const usePlugins = (element, options) => {\r\n            return {\r\n                copyPaste: new CopyPaste(element, options),\r\n                inspector: new Inpsector(element, options.onInspect),\r\n                keyPress: new KeyPress(element, options),\r\n            }\r\n        }\r\n        Array.from(element.querySelectorAll(\"[contenteditable]\")).forEach(editable=>{    \r\n            wrapNakedTextNodes(editable);\r\n        });\r\n        this.createDefaultStyle();\r\n        this.plugins = usePlugins(element, options);\r\n        return element;\r\n    }\r\n    createDefaultStyle() {\r\n        const style = document.createElement(\"style\");\r\n        style.innerHTML = `\r\n            [contenteditable]{\r\n                min-height:10px;\r\n            }\r\n            `;\r\n        document.head.appendChild(style);\r\n    }\r\n\r\n    //TODO: destory events..\r\n    //question: how to use the events ? \r\n\r\n\r\n    Destroy() {\r\n        for (const key in this.plugins) {\r\n            if (this.plugins.hasOwnProperty(key)) {\r\n                const plugin = this.plugins[key];\r\n                if(plugin.destroy){\r\n                    plugin.destroy();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    wrapRangeWithElement,\r\n    setSelectionFlags,\r\n    setSelectionBetweenTwoNodes,\r\n    createInnerWrapperElement,\r\n    setCaretAt,\r\n    GetClosestBlockElement,\r\n    querySelectorUnderSelection,\r\n} from \"./services/range.service\";\r\nimport Modes from './constants/Modes.json';\r\nimport { splitHTML } from \"./utilis/splitHTML\";\r\nimport { setStyle, toggleStyle, collectStyleFromSelectedElement, findBlockAndStyleIt } from \"./services/style.service\";\r\nimport { normalizeElement } from \"./services/textEditor.service\";\r\nimport Connector from './connector';\r\nimport './components/custom/textSelected';\r\nimport { elementToJson, JsonToElement, getSelectedElement, wrapNakedTextNodes } from \"./services/elements.service\";\r\nimport { EVENTS } from './services/events/events';\r\nimport { createTempLinkElement, resetURL, TARGETS } from \"./services/link.service\";\r\nimport { void_elements } from \"./constants/void_elms\";\r\nimport { block_elments, block_elments_queryString } from \"./constants/block_elms\";\r\nexport default class Core {\r\n\r\n    // *target => can be Id of Element that should contain Editor instance or the element itself..\r\n    // *config =>  configuration passed t   o Tool constructor\r\n    //TODO: add target validations..;\r\n    constructor(target, config) {\r\n        this.__config = {\r\n            onInspect: undefined,\r\n        };\r\n\r\n        this.on = (key, callback) => {\r\n            if (typeof (key) !== \"string\") {\r\n                console.error(\"key must be a string..\");\r\n            }\r\n            if (typeof (callback) !== \"function\") {\r\n                console.error(\"callback must be a function..\");\r\n            }\r\n            EVENTS[key] = callback;\r\n        };\r\n        this.Connector = new Connector();\r\n        this.modeHandlers = {\r\n            [Modes.Toggle]: (v, key, value, options) => this.onToggle(v, key, value, options),\r\n            [Modes.Extend]: (v, key, value, options) => this.onExtend(v, key, value, options),\r\n        }\r\n        this.config = config ? Object.assign(this.__config, config) : this.__config;\r\n        this.events = {\r\n            styleChanged: this.config.onInspect,\r\n        }\r\n        this.connectedElement = this.Connector.Connect(target, this.config);\r\n    }\r\n    save(element) {\r\n        return elementToJson(element || this.connectedElement);\r\n    }\r\n    load(json) {\r\n        return JsonToElement(json, this.connectedElement);\r\n    }\r\n    destroy() {\r\n        this.Connector.Destroy();\r\n        const self = this;\r\n        for (const key in self) {\r\n            this[key] = null;\r\n            delete this[key];\r\n        }\r\n    }\r\n    //TODO: review.\r\n    //TODO: Create normalize..\r\n    //question: if text was selected, should we unwrap the selectiion only ? \r\n    unLink() {\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        const selection = window.getSelection();\r\n\r\n        if (selection && !selection.toString()) {\r\n            let elementToUnwrap;\r\n            const baseNode = selection.baseNode;\r\n            if (baseNode && baseNode.nodeType === 3 && baseNode.parentElement) {\r\n                elementToUnwrap = baseNode.parentElement;\r\n            }\r\n            if (baseNode && baseNode.nodeType === 1) {\r\n                elementToUnwrap = elementToUnwrap.__closest(\"a\");\r\n            }\r\n            if (elementToUnwrap) {\r\n                elementToUnwrap.unwrap();\r\n            }\r\n            return null;\r\n        }\r\n        const linkElements = wrapRangeWithElement();\r\n        Array.from(linkElements).forEach(r => {\r\n            const closestATag = r.__closest(\"a\");\r\n            if (closestATag) {\r\n                var a = splitHTML(r, closestATag, {\r\n                    tag: \"a\"\r\n                })\r\n                if (a) {\r\n                    a.center.unwrap();\r\n                }\r\n            }\r\n            Array.from(r.querySelectorAll(\"a\")).forEach(a => {\r\n                a.unwrap();\r\n            });\r\n            r.unwrap();\r\n        });\r\n        const { firstFlag, lastFlag } = setSelectionFlags(linkElements[0], linkElements[linkElements.length - 1]); //Set Flag at last\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n    }\r\n    //TODO: review\r\n    //TODO: merge a tags..\r\n    //TODO: remove a childs\r\n    //TODO: move function to Link.service.js\r\n    link(options = {}) {\r\n        if (!options || (options && !options.href) || !this.isValid()) {\r\n            return;\r\n        }\r\n\r\n        if (window.getSelection && !window.getSelection().toString()) {\r\n            console.warn(\"no text selected..\");\r\n            return null;\r\n        }\r\n        const unwrapAtags = (linkElements) => {\r\n            linkElements.forEach(link => {\r\n                Array.from(link.querySelectorAll(\"a\")).forEach(aTag => aTag.unwrap());\r\n                const closestATag = link.parentElement ? link.parentElement.__closest(\"a\") : null;\r\n                if (closestATag) {\r\n                    var a = splitHTML(link, closestATag, {\r\n                        tag: \"a\"\r\n                    });\r\n                    if (a) {\r\n                        a.center.unwrap();\r\n                    }\r\n                    // closestATag.unwrap();\r\n                }\r\n            });\r\n        }\r\n        const setTargetToTag = (linkElements, renderedLink, _target) => {\r\n            linkElements.forEach(aTag => {\r\n                aTag.href = renderedLink;\r\n                if (_target) {\r\n                    aTag.setAttribute(\"target\", _target);\r\n                }\r\n            });\r\n        }\r\n        const setProtocol = (_protocol, newURL) => {\r\n            _protocol = _protocol.replace(/:/g, \"\");\r\n            _protocol = _protocol.replace(/\\/\\//g, \"\");\r\n            _protocol += \":\";\r\n            if (_protocol.includes(\"http\")) {\r\n                _protocol += \"//\";\r\n            } else {\r\n            }\r\n            newURL.push(_protocol);\r\n            return _protocol;\r\n        }\r\n\r\n\r\n        const { href = \"\", protocol = \"\", target = \"\" } = options;\r\n\r\n        const linkElements = wrapRangeWithElement(\"a\");\r\n        let newURL = [];\r\n        const Atag = createTempLinkElement(href);\r\n        let _href = resetURL(href.trim());\r\n\r\n        let _protocol = protocol.trim() || Atag.protocol;\r\n        let _target = null;\r\n        const testTarget = TARGETS[target.trim().toLowerCase()];\r\n        if (testTarget) {\r\n            _target = testTarget;\r\n        }\r\n        if (_protocol.trim()) {\r\n            _protocol = setProtocol(_protocol, newURL);\r\n        }\r\n        if (_href) {\r\n            newURL.push(_href);\r\n        }\r\n        const renderedLink = newURL.join(\"\");\r\n        unwrapAtags(linkElements);\r\n        setTargetToTag(linkElements, renderedLink, _target);\r\n        const { firstFlag, lastFlag } = setSelectionFlags(linkElements[0], linkElements[linkElements.length - 1]); //Set Flag at last\r\n        setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        linkElements.forEach(aTag=>{\r\n            normalizeElement(aTag.parentElement);// merge siblings and parents with child as possible.. \r\n        })\r\n    }\r\n    formatBlock(tagName, options) {\r\n        if (!block_elments[tagName.toUpperCase()]) {\r\n            throw Error(`valid tags: ${block_elments_queryString}`);\r\n        }\r\n        const elements = querySelectorUnderSelection(block_elments_queryString);\r\n        if (elements.length > 0) {\r\n            const ranges = wrapRangeWithElement();\r\n            const { firstFlag, lastFlag } = setSelectionFlags(ranges[0], ranges[ranges.length - 1]); //Set Flag at last\r\n\r\n            elements.forEach(block => {\r\n                const tag = document.createElement(tagName);\r\n                Array.from(block.attributes).forEach(attr => {\r\n                    tag.setAttribute(attr.name, attr.value);\r\n                });\r\n                block.wrap(tag);\r\n                block.unwrap();\r\n            });\r\n            Array.from(ranges).forEach(range => range.unwrap());\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        }\r\n\r\n\r\n    }\r\n    //TODO: review\r\n    //question : we want to handle and toggle any attribute ? \r\n    toggleClass(className, options) {\r\n        //here\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        if (typeof (className) !== \"string\") {\r\n            console.warn(\"className must be a string..\");\r\n            return null;\r\n        }\r\n\r\n        const elements = wrapRangeWithElement();\r\n        if (elements.length === 0) {\r\n            return;\r\n        }\r\n        if (!options) options = {};\r\n        const isToggleOn = (typeof (options.isON) === \"boolean\") ? options.isON : elements[0].__closest(`[class='${className}']`);\r\n        if (!isToggleOn) {\r\n            elements.forEach(el => el.classList.add(className));\r\n        } else {\r\n            elements.forEach(el => {\r\n                if (el.parentElement) {\r\n                    const closestClass = el.parentElement.closest(`[class='${className}']`);\r\n                    if (closestClass) {\r\n                        const split = splitHTML(el, closestClass);\r\n                        if (split) {\r\n                            split.center.removeClassName(className);\r\n                        }\r\n                    }\r\n                } else {\r\n                    el.removeClassName(className);\r\n                }\r\n            })\r\n        }\r\n        const { firstFlag, lastFlag } = setSelectionFlags(elements[0], elements[elements.length - 1]); //Set Flag at last\r\n        elements.forEach(el=>normalizeElement(el.parentElement));\r\n\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * @param {String} key - key of css \r\n    *  @param {String} value - value of css\r\n    *  @param {(Object | String)} Modes - mode from Modes => Extend or Toggle\r\n    *  @param {string} Modes.Extend - override style\r\n    *  @param {string} Modes.toggle - toggle style\r\n    *  @param {Object} [options] - options \r\n    */\r\n    execCmd(key, value, mode, options) {\r\n        if (!this.isValid() || !this.isVAlidKeyValue(key, value)) {\r\n            return;\r\n        }\r\n        this.connectedElement.normalize();\r\n\r\n        this.ELEMENTS = [];\r\n        mode = mode ? mode : Modes.Extend;\r\n        if (!options) options = {};\r\n\r\n\r\n        //==============review===============//\r\n        this.ELEMENTS = wrapRangeWithElement();\r\n        //This is how i make the text selection, i dont know if this is good way, but it works..\r\n        const { firstFlag, lastFlag } = setSelectionFlags(this.ELEMENTS[0], this.ELEMENTS[this.ELEMENTS.length - 1]);//Set Flag at last\r\n        //======================================================================//\r\n        // removeZeroSpace(getTextNodes(this.connectedElement));\r\n\r\n        let ToggleMode;//Declare toggle mode, The first element determines whether it is on or off\r\n\r\n        this.ELEMENTS.forEach((element, i) => {\r\n            options.onOff = ToggleMode;\r\n            const result = this.modeHandlers[mode](element, key, value, options);\r\n            if (mode === Modes.Toggle && typeof (ToggleMode) === 'undefined')\r\n                ToggleMode = result;\r\n        });\r\n        const normalizedParents = [];\r\n        this.ELEMENTS.forEach(el => {\r\n            if (el.parentElement && normalizedParents.findIndex(n => n === el.parentElement) < 0) {\r\n                normalizeElement(el.parentElement);// merge siblings and parents with child as possible.. \r\n                normalizedParents.push(el.parentElement);\r\n            }\r\n        })\r\n        //use the first and last flags to make the text selection and unwrap them..\r\n        if (firstFlag && lastFlag) {\r\n            setSelectionBetweenTwoNodes(firstFlag, lastFlag);\r\n        } else {\r\n            const sel = window.getSelection();\r\n            if (sel.removeAllRanges) {\r\n                sel.removeAllRanges();\r\n            }\r\n            if (this.caretHolder) {\r\n                setCaretAt(this.caretHolder, this.caretHolder.textContent.length);\r\n                this.caretHolder.unwrap();\r\n                this.caretHolder = null;\r\n            }\r\n        }\r\n        const collectedStyles = collectStyleFromSelectedElement(this.connectedElement);\r\n        if (typeof (EVENTS[\"inspect\"]) === \"function\") {\r\n            EVENTS[\"inspect\"](collectedStyles);\r\n        }\r\n        this.dispatchEvent('styleChanged', collectedStyles);\r\n    }\r\n    createCaretPlacement(atNode) {\r\n        if (!atNode) return null;\r\n        const caretHolder = document.createElement('text-selection');\r\n        caretHolder.setAttribute('zero-space', 'true');\r\n        atNode.appendChild(caretHolder);\r\n        return caretHolder;\r\n    }\r\n\r\n    dispatchEvent(event, payload) {\r\n        if (this.events[event])\r\n            this.events[event](payload);\r\n    }\r\n    onToggle(element, key, value, options = {}) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            // detect if there is any parent with style to split.\r\n            //TODO: use the catch from options to detect more than one style or tag element.\r\n             let elementToSplit =  element.__closest(`[style*='${value}']`);\r\n            //TODO: tests\r\n            if (elementToSplit && block_elments[elementToSplit.nodeName]) {\r\n                let innerSpan = createInnerWrapperElement(elementToSplit);\r\n                elementToSplit.style[key] = null;\r\n                innerSpan.style[key] = value;\r\n                options.onOff = false;\r\n                return this.onToggle(element, key, value, options);\r\n            }\r\n            if (elementToSplit && elementToSplit !== element) {\r\n                if (typeof (options.onOff) === 'undefined')\r\n                    options.onOff = false;\r\n                //unbold\r\n                const splitElements = splitHTML(element, elementToSplit);\r\n                // if there is no split elements, its error!\r\n                if (splitElements) {\r\n                    toggleStyle(splitElements.center, key, value, options.onOff);\r\n                } else {\r\n                    console.error('splitHTML return null');\r\n                }\r\n            }\r\n            else {\r\n                if (typeof (options.onOff) === 'undefined' && elementToSplit) {\r\n                    options.onOff = false;\r\n                } else if (typeof (options.onOff) === 'undefined') {\r\n                    options.onOff = true;\r\n                }\r\n                toggleStyle(element, key, value, options.onOff);\r\n                normalizeElement(element);\r\n            }\r\n\r\n            return options.onOff;\r\n        }\r\n\r\n    }\r\n    onExtend(element, key, value, options = {}) {\r\n        if (options.target === \"block\") {\r\n            this.createBlockStyle(options, element, key, value);\r\n        } else {\r\n            const elementToSplit = element.__closest(`[style*='${key}']`);\r\n            if (elementToSplit) {\r\n                const splitBlocks = splitHTML(element, elementToSplit);\r\n                if (splitBlocks) {\r\n                    setStyle(splitBlocks.center, key, value);\r\n                }\r\n                else if (options.target === \"block\") {\r\n                    elementToSplit.style[key] = value;\r\n                }\r\n                else if (options.target !== \"block\") {\r\n                    let innerSpan = createInnerWrapperElement(elementToSplit, { el: 'span' });\r\n                    setStyle(innerSpan, key, value);\r\n                    elementToSplit.style[key] = null;\r\n                    return this.onExtend(element, key, value);\r\n\r\n                }\r\n                else if (elementToSplit !== element) {\r\n                    const splitElements = splitHTML(element, elementToSplit);\r\n                    if (splitElements) {\r\n                        setStyle(splitElements.center, key, value);\r\n                    } else {\r\n                        console.error('splitHTML return null');\r\n                    }\r\n                }\r\n\r\n            } else if (window.getComputedStyle(element).display !== \"block\" && options.target === \"block\") {\r\n                const blockElement = GetClosestBlockElement(element);\r\n                if (blockElement && blockElement.ischildOf(this.connectedElement)) {\r\n                    setStyle(parentElement, key, value);\r\n                } else {\r\n                    const wrapper = document.createElement(\"div\");\r\n                    parentElement.wrap(wrapper);\r\n                    setStyle(wrapper, key, value);\r\n                }\r\n            } else {\r\n                setStyle(element, key, value);\r\n            }\r\n        }\r\n    }\r\n    createBlockStyle(options, element, key, value) {\r\n\r\n        if (options.as === \"inline\") {\r\n            let blockElement = GetClosestBlockElement(element);\r\n            if (blockElement) {\r\n                const wrapTextNodeWithAppendStyle = (node) => {\r\n                    const span = document.createElement(\"span\");\r\n                    span.style[key] = value;\r\n                    node.wrap(span);\r\n                };\r\n                const createInlineStyle = (parentNode) => {\r\n                    //TODO: tests\r\n                    parentNode.style[key] = null;\r\n                    Array.from(parentNode.childNodes).forEach(node => {\r\n                        if (node.nodeType === 3) {\r\n                            wrapTextNodeWithAppendStyle(node);\r\n                        } else if (node.nodeType === 1 && !void_elements[node.nodeName]) {\r\n                            createInlineStyle(node);\r\n                        }\r\n                        else {\r\n                            node.style[key] = value;\r\n                        }\r\n                    });\r\n                };\r\n                createInlineStyle(blockElement);\r\n                // Array.from(blockElement.querySelectorAll(\"span\")).forEach(el=>el.style[key] = value);\r\n            }\r\n\r\n        } else {\r\n            let isSuccess = findBlockAndStyleIt(element, key, value);\r\n            if (!isSuccess) {\r\n                const contentEditable = element.closest(\"[contenteditable]\");\r\n                if (contentEditable && contentEditable.isContentEditable) {\r\n                    wrapNakedTextNodes(contentEditable);\r\n                    isSuccess = findBlockAndStyleIt(element, key, value);\r\n                    if (!isSuccess) {\r\n                        console.log(\"text nodes and inline elements must be inside block element like p,h1,h2,h3,h4,h5,h6\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    isVAlidKeyValue(key, value) {\r\n        return !!(typeof key === \"string\" && typeof value === \"string\");\r\n    }\r\n    isValid() {\r\n        if (!this.connectedElement) {\r\n            console.error('please create new instance..')\r\n            return false;\r\n        };\r\n        const selectedElement = getSelectedElement();\r\n        if (selectedElement && ((selectedElement.ischildOf(this.connectedElement) || selectedElement === this.connectedElement) && selectedElement.isContentEditable)) {\r\n            return true;\r\n        }\r\n        ;\r\n    }\r\n}","import Core from './StyleIt/index';\r\nimport  MODES  from './StyleIt/constants/Modes.json';\r\n\r\n/**\r\n * Create a new instance of StyleIt\r\n *\r\n * @param {HTMLElement} target\r\n  * @param {object} config\r\n * @public\r\n */\r\nexport default class StyleIt {\r\n  //expose only the relevant methods..\r\n  constructor(target, config) {\r\n    //TODO: validate target & config..\r\n    const styleIt = new Core(target, config);\r\n    if (styleIt) {  \r\n      this.execCmd = styleIt.execCmd;\r\n      this.toggleClass = styleIt.toggleClass;\r\n      this.link = styleIt.link;\r\n      this.unLink = styleIt.unLink;\r\n      this.formatBlock = styleIt.formatBlock;\r\n      this.save = styleIt.save;\r\n      this.load = styleIt.load;\r\n      this.destroy = styleIt.destroy;\r\n      this.on = styleIt.on;\r\n      this.MODES = MODES;\r\n      //========================================//\r\n      this.toggleClass = this.toggleClass.bind(styleIt);\r\n      this.execCmd = this.execCmd.bind(styleIt);\r\n      this.formatBlock = this.formatBlock.bind(styleIt);\r\n      this.on = this.on.bind(styleIt);\r\n      this.link = this.link.bind(styleIt);\r\n      this.unLink = this.unLink.bind(styleIt);\r\n      this.save = this.save.bind(styleIt);\r\n      this.load = this.load.bind(styleIt);\r\n      this.destroy = this.destroy.bind(styleIt);\r\n    }\r\n  }\r\n}"],"sourceRoot":""}